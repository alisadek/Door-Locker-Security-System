
ProjMicrocontroller2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000023c6  0000245a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006c  0080006c  00002466  2**0
                  ALLOC
  3 .stab         0000222c  00000000  00000000  00002468  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ef2  00000000  00000000  00004694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005586  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000056c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005836  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000747f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000836a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009118  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009278  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009505  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009cd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 27 07 	call	0xe4e	; 0xe4e <main>
      8a:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <storeNewPassword>:
 *
 *Arguments: None.
 *
 *******************************************************************************/
void storeNewPassword(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	aa 97       	sbiw	r28, 0x2a	; 42
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	UART_receiveString(g_savedPass);
     b5a:	8c e6       	ldi	r24, 0x6C	; 108
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 22 11 	call	0x2244	; 0x2244 <UART_receiveString>
	passwordLength = UART_receiveByte();
     b62:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_receiveByte>
     b66:	80 93 7c 00 	sts	0x007C, r24

	EEPROM_writeString(PASS_STORE_LOCATION, g_savedPass);
     b6a:	2c e6       	ldi	r18, 0x6C	; 108
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	b9 01       	movw	r22, r18
     b74:	0e 94 00 09 	call	0x1200	; 0x1200 <EEPROM_writeString>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	aa e7       	ldi	r26, 0x7A	; 122
     b7e:	b4 e4       	ldi	r27, 0x44	; 68
     b80:	8f a3       	std	Y+39, r24	; 0x27
     b82:	98 a7       	std	Y+40, r25	; 0x28
     b84:	a9 a7       	std	Y+41, r26	; 0x29
     b86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b88:	6f a1       	ldd	r22, Y+39	; 0x27
     b8a:	78 a5       	ldd	r23, Y+40	; 0x28
     b8c:	89 a5       	ldd	r24, Y+41	; 0x29
     b8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	4a e7       	ldi	r20, 0x7A	; 122
     b96:	53 e4       	ldi	r21, 0x43	; 67
     b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	8b a3       	std	Y+35, r24	; 0x23
     ba2:	9c a3       	std	Y+36, r25	; 0x24
     ba4:	ad a3       	std	Y+37, r26	; 0x25
     ba6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ba8:	6b a1       	ldd	r22, Y+35	; 0x23
     baa:	7c a1       	ldd	r23, Y+36	; 0x24
     bac:	8d a1       	ldd	r24, Y+37	; 0x25
     bae:	9e a1       	ldd	r25, Y+38	; 0x26
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <storeNewPassword+0x84>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9a a3       	std	Y+34, r25	; 0x22
     bc6:	89 a3       	std	Y+33, r24	; 0x21
     bc8:	3f c0       	rjmp	.+126    	; 0xc48 <storeNewPassword+0x102>
	else if (__tmp > 65535)
     bca:	6b a1       	ldd	r22, Y+35	; 0x23
     bcc:	7c a1       	ldd	r23, Y+36	; 0x24
     bce:	8d a1       	ldd	r24, Y+37	; 0x25
     bd0:	9e a1       	ldd	r25, Y+38	; 0x26
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	3f ef       	ldi	r19, 0xFF	; 255
     bd6:	4f e7       	ldi	r20, 0x7F	; 127
     bd8:	57 e4       	ldi	r21, 0x47	; 71
     bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bde:	18 16       	cp	r1, r24
     be0:	4c f5       	brge	.+82     	; 0xc34 <storeNewPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be2:	6f a1       	ldd	r22, Y+39	; 0x27
     be4:	78 a5       	ldd	r23, Y+40	; 0x28
     be6:	89 a5       	ldd	r24, Y+41	; 0x29
     be8:	9a a5       	ldd	r25, Y+42	; 0x2a
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e2       	ldi	r20, 0x20	; 32
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	bc 01       	movw	r22, r24
     bfc:	cd 01       	movw	r24, r26
     bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	9a a3       	std	Y+34, r25	; 0x22
     c08:	89 a3       	std	Y+33, r24	; 0x21
     c0a:	0f c0       	rjmp	.+30     	; 0xc2a <storeNewPassword+0xe4>
     c0c:	89 e1       	ldi	r24, 0x19	; 25
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	98 a3       	std	Y+32, r25	; 0x20
     c12:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c14:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c16:	98 a1       	ldd	r25, Y+32	; 0x20
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <storeNewPassword+0xd2>
     c1c:	98 a3       	std	Y+32, r25	; 0x20
     c1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c20:	89 a1       	ldd	r24, Y+33	; 0x21
     c22:	9a a1       	ldd	r25, Y+34	; 0x22
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	9a a3       	std	Y+34, r25	; 0x22
     c28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2a:	89 a1       	ldd	r24, Y+33	; 0x21
     c2c:	9a a1       	ldd	r25, Y+34	; 0x22
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	69 f7       	brne	.-38     	; 0xc0c <storeNewPassword+0xc6>
     c32:	14 c0       	rjmp	.+40     	; 0xc5c <storeNewPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c34:	6b a1       	ldd	r22, Y+35	; 0x23
     c36:	7c a1       	ldd	r23, Y+36	; 0x24
     c38:	8d a1       	ldd	r24, Y+37	; 0x25
     c3a:	9e a1       	ldd	r25, Y+38	; 0x26
     c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	9a a3       	std	Y+34, r25	; 0x22
     c46:	89 a3       	std	Y+33, r24	; 0x21
     c48:	89 a1       	ldd	r24, Y+33	; 0x21
     c4a:	9a a1       	ldd	r25, Y+34	; 0x22
     c4c:	9e 8f       	std	Y+30, r25	; 0x1e
     c4e:	8d 8f       	std	Y+29, r24	; 0x1d
     c50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c52:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <storeNewPassword+0x10e>
     c58:	9e 8f       	std	Y+30, r25	; 0x1e
     c5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);

	/*stores the length of the password in EEPROM to be retrieved the next time*/
	EEPROM_writeByte(PASS_LENGTH_LOCATION, passwordLength);
     c5c:	20 91 7c 00 	lds	r18, 0x007C
     c60:	80 e3       	ldi	r24, 0x30	; 48
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	62 2f       	mov	r22, r18
     c66:	0e 94 c8 0a 	call	0x1590	; 0x1590 <EEPROM_writeByte>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	aa e7       	ldi	r26, 0x7A	; 122
     c70:	b4 e4       	ldi	r27, 0x44	; 68
     c72:	89 8f       	std	Y+25, r24	; 0x19
     c74:	9a 8f       	std	Y+26, r25	; 0x1a
     c76:	ab 8f       	std	Y+27, r26	; 0x1b
     c78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c7a:	69 8d       	ldd	r22, Y+25	; 0x19
     c7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	4a e7       	ldi	r20, 0x7A	; 122
     c88:	53 e4       	ldi	r21, 0x43	; 67
     c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	8d 8b       	std	Y+21, r24	; 0x15
     c94:	9e 8b       	std	Y+22, r25	; 0x16
     c96:	af 8b       	std	Y+23, r26	; 0x17
     c98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c9a:	6d 89       	ldd	r22, Y+21	; 0x15
     c9c:	7e 89       	ldd	r23, Y+22	; 0x16
     c9e:	8f 89       	ldd	r24, Y+23	; 0x17
     ca0:	98 8d       	ldd	r25, Y+24	; 0x18
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e8       	ldi	r20, 0x80	; 128
     ca8:	5f e3       	ldi	r21, 0x3F	; 63
     caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cae:	88 23       	and	r24, r24
     cb0:	2c f4       	brge	.+10     	; 0xcbc <storeNewPassword+0x176>
		__ticks = 1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	9c 8b       	std	Y+20, r25	; 0x14
     cb8:	8b 8b       	std	Y+19, r24	; 0x13
     cba:	3f c0       	rjmp	.+126    	; 0xd3a <storeNewPassword+0x1f4>
	else if (__tmp > 65535)
     cbc:	6d 89       	ldd	r22, Y+21	; 0x15
     cbe:	7e 89       	ldd	r23, Y+22	; 0x16
     cc0:	8f 89       	ldd	r24, Y+23	; 0x17
     cc2:	98 8d       	ldd	r25, Y+24	; 0x18
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	3f ef       	ldi	r19, 0xFF	; 255
     cc8:	4f e7       	ldi	r20, 0x7F	; 127
     cca:	57 e4       	ldi	r21, 0x47	; 71
     ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd0:	18 16       	cp	r1, r24
     cd2:	4c f5       	brge	.+82     	; 0xd26 <storeNewPassword+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd4:	69 8d       	ldd	r22, Y+25	; 0x19
     cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e2       	ldi	r20, 0x20	; 32
     ce2:	51 e4       	ldi	r21, 0x41	; 65
     ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	bc 01       	movw	r22, r24
     cee:	cd 01       	movw	r24, r26
     cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	9c 8b       	std	Y+20, r25	; 0x14
     cfa:	8b 8b       	std	Y+19, r24	; 0x13
     cfc:	0f c0       	rjmp	.+30     	; 0xd1c <storeNewPassword+0x1d6>
     cfe:	89 e1       	ldi	r24, 0x19	; 25
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9a 8b       	std	Y+18, r25	; 0x12
     d04:	89 8b       	std	Y+17, r24	; 0x11
     d06:	89 89       	ldd	r24, Y+17	; 0x11
     d08:	9a 89       	ldd	r25, Y+18	; 0x12
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <storeNewPassword+0x1c4>
     d0e:	9a 8b       	std	Y+18, r25	; 0x12
     d10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d12:	8b 89       	ldd	r24, Y+19	; 0x13
     d14:	9c 89       	ldd	r25, Y+20	; 0x14
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	9c 8b       	std	Y+20, r25	; 0x14
     d1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1c:	8b 89       	ldd	r24, Y+19	; 0x13
     d1e:	9c 89       	ldd	r25, Y+20	; 0x14
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	69 f7       	brne	.-38     	; 0xcfe <storeNewPassword+0x1b8>
     d24:	14 c0       	rjmp	.+40     	; 0xd4e <storeNewPassword+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d26:	6d 89       	ldd	r22, Y+21	; 0x15
     d28:	7e 89       	ldd	r23, Y+22	; 0x16
     d2a:	8f 89       	ldd	r24, Y+23	; 0x17
     d2c:	98 8d       	ldd	r25, Y+24	; 0x18
     d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	9c 8b       	std	Y+20, r25	; 0x14
     d38:	8b 8b       	std	Y+19, r24	; 0x13
     d3a:	8b 89       	ldd	r24, Y+19	; 0x13
     d3c:	9c 89       	ldd	r25, Y+20	; 0x14
     d3e:	98 8b       	std	Y+16, r25	; 0x10
     d40:	8f 87       	std	Y+15, r24	; 0x0f
     d42:	8f 85       	ldd	r24, Y+15	; 0x0f
     d44:	98 89       	ldd	r25, Y+16	; 0x10
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <storeNewPassword+0x200>
     d4a:	98 8b       	std	Y+16, r25	; 0x10
     d4c:	8f 87       	std	Y+15, r24	; 0x0f
	/******************************************************************************
	 * stores a byte in EEPROM to tell the MC next time that a pw is already stored
	 *
	 * the value of PASS_EXISTS can be changed to start from first stage if needed
	 * ***************************************************************************/
	EEPROM_writeByte(PASS_CHECK_LOCATION, PASS_EXISTS);
     d4e:	89 e1       	ldi	r24, 0x19	; 25
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	62 e1       	ldi	r22, 0x12	; 18
     d54:	0e 94 c8 0a 	call	0x1590	; 0x1590 <EEPROM_writeByte>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	aa e7       	ldi	r26, 0x7A	; 122
     d5e:	b4 e4       	ldi	r27, 0x44	; 68
     d60:	8b 87       	std	Y+11, r24	; 0x0b
     d62:	9c 87       	std	Y+12, r25	; 0x0c
     d64:	ad 87       	std	Y+13, r26	; 0x0d
     d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d68:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a e7       	ldi	r20, 0x7A	; 122
     d76:	53 e4       	ldi	r21, 0x43	; 67
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8f 83       	std	Y+7, r24	; 0x07
     d82:	98 87       	std	Y+8, r25	; 0x08
     d84:	a9 87       	std	Y+9, r26	; 0x09
     d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	2c f4       	brge	.+10     	; 0xdaa <storeNewPassword+0x264>
		__ticks = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <storeNewPassword+0x2e2>
	else if (__tmp > 65535)
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	4c f5       	brge	.+82     	; 0xe14 <storeNewPassword+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <storeNewPassword+0x2c4>
     dec:	89 e1       	ldi	r24, 0x19	; 25
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <storeNewPassword+0x2b2>
     dfc:	9c 83       	std	Y+4, r25	; 0x04
     dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	69 f7       	brne	.-38     	; 0xdec <storeNewPassword+0x2a6>
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <storeNewPassword+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <storeNewPassword+0x2ee>
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     e3c:	aa 96       	adiw	r28, 0x2a	; 42
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <main>:
 *
 * Arguments: None
 *
 *******************************************************************************/
int main (void)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	e4 97       	sbiw	r28, 0x34	; 52
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
	uint8 passExistsFlag=0;
     e62:	1c a6       	std	Y+44, r1	; 0x2c

	UART_init();
     e64:	0e 94 b6 10 	call	0x216c	; 0x216c <UART_init>
	twi_config TWI_Configuration = {0x02, 0b00000010, TWI_PRESCALER_1};
     e68:	ce 01       	movw	r24, r28
     e6a:	8d 96       	adiw	r24, 0x2d	; 45
     e6c:	99 ab       	std	Y+49, r25	; 0x31
     e6e:	88 ab       	std	Y+48, r24	; 0x30
     e70:	e8 e6       	ldi	r30, 0x68	; 104
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	fb ab       	std	Y+51, r31	; 0x33
     e76:	ea ab       	std	Y+50, r30	; 0x32
     e78:	f3 e0       	ldi	r31, 0x03	; 3
     e7a:	fc ab       	std	Y+52, r31	; 0x34
     e7c:	ea a9       	ldd	r30, Y+50	; 0x32
     e7e:	fb a9       	ldd	r31, Y+51	; 0x33
     e80:	00 80       	ld	r0, Z
     e82:	8a a9       	ldd	r24, Y+50	; 0x32
     e84:	9b a9       	ldd	r25, Y+51	; 0x33
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	9b ab       	std	Y+51, r25	; 0x33
     e8a:	8a ab       	std	Y+50, r24	; 0x32
     e8c:	e8 a9       	ldd	r30, Y+48	; 0x30
     e8e:	f9 a9       	ldd	r31, Y+49	; 0x31
     e90:	00 82       	st	Z, r0
     e92:	88 a9       	ldd	r24, Y+48	; 0x30
     e94:	99 a9       	ldd	r25, Y+49	; 0x31
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	99 ab       	std	Y+49, r25	; 0x31
     e9a:	88 ab       	std	Y+48, r24	; 0x30
     e9c:	9c a9       	ldd	r25, Y+52	; 0x34
     e9e:	91 50       	subi	r25, 0x01	; 1
     ea0:	9c ab       	std	Y+52, r25	; 0x34
     ea2:	ec a9       	ldd	r30, Y+52	; 0x34
     ea4:	ee 23       	and	r30, r30
     ea6:	51 f7       	brne	.-44     	; 0xe7c <main+0x2e>
	EEPROM_init(&TWI_Configuration);
     ea8:	ce 01       	movw	r24, r28
     eaa:	8d 96       	adiw	r24, 0x2d	; 45
     eac:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <EEPROM_init>

	EEPROM_readByte(PASS_CHECK_LOCATION, &passExistsFlag); /*checks if a password is stored*/
     eb0:	9e 01       	movw	r18, r28
     eb2:	24 5d       	subi	r18, 0xD4	; 212
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	89 e1       	ldi	r24, 0x19	; 25
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	b9 01       	movw	r22, r18
     ebc:	0e 94 09 0b 	call	0x1612	; 0x1612 <EEPROM_readByte>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	aa e7       	ldi	r26, 0x7A	; 122
     ec6:	b4 e4       	ldi	r27, 0x44	; 68
     ec8:	8f a3       	std	Y+39, r24	; 0x27
     eca:	98 a7       	std	Y+40, r25	; 0x28
     ecc:	a9 a7       	std	Y+41, r26	; 0x29
     ece:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed0:	6f a1       	ldd	r22, Y+39	; 0x27
     ed2:	78 a5       	ldd	r23, Y+40	; 0x28
     ed4:	89 a5       	ldd	r24, Y+41	; 0x29
     ed6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	4a e7       	ldi	r20, 0x7A	; 122
     ede:	53 e4       	ldi	r21, 0x43	; 67
     ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	8b a3       	std	Y+35, r24	; 0x23
     eea:	9c a3       	std	Y+36, r25	; 0x24
     eec:	ad a3       	std	Y+37, r26	; 0x25
     eee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ef0:	6b a1       	ldd	r22, Y+35	; 0x23
     ef2:	7c a1       	ldd	r23, Y+36	; 0x24
     ef4:	8d a1       	ldd	r24, Y+37	; 0x25
     ef6:	9e a1       	ldd	r25, Y+38	; 0x26
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e8       	ldi	r20, 0x80	; 128
     efe:	5f e3       	ldi	r21, 0x3F	; 63
     f00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f04:	88 23       	and	r24, r24
     f06:	2c f4       	brge	.+10     	; 0xf12 <main+0xc4>
		__ticks = 1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9a a3       	std	Y+34, r25	; 0x22
     f0e:	89 a3       	std	Y+33, r24	; 0x21
     f10:	3f c0       	rjmp	.+126    	; 0xf90 <main+0x142>
	else if (__tmp > 65535)
     f12:	6b a1       	ldd	r22, Y+35	; 0x23
     f14:	7c a1       	ldd	r23, Y+36	; 0x24
     f16:	8d a1       	ldd	r24, Y+37	; 0x25
     f18:	9e a1       	ldd	r25, Y+38	; 0x26
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	3f ef       	ldi	r19, 0xFF	; 255
     f1e:	4f e7       	ldi	r20, 0x7F	; 127
     f20:	57 e4       	ldi	r21, 0x47	; 71
     f22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f26:	18 16       	cp	r1, r24
     f28:	4c f5       	brge	.+82     	; 0xf7c <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2a:	6f a1       	ldd	r22, Y+39	; 0x27
     f2c:	78 a5       	ldd	r23, Y+40	; 0x28
     f2e:	89 a5       	ldd	r24, Y+41	; 0x29
     f30:	9a a5       	ldd	r25, Y+42	; 0x2a
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e2       	ldi	r20, 0x20	; 32
     f38:	51 e4       	ldi	r21, 0x41	; 65
     f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9a a3       	std	Y+34, r25	; 0x22
     f50:	89 a3       	std	Y+33, r24	; 0x21
     f52:	0f c0       	rjmp	.+30     	; 0xf72 <main+0x124>
     f54:	89 e1       	ldi	r24, 0x19	; 25
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	98 a3       	std	Y+32, r25	; 0x20
     f5a:	8f 8f       	std	Y+31, r24	; 0x1f
     f5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f5e:	98 a1       	ldd	r25, Y+32	; 0x20
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <main+0x112>
     f64:	98 a3       	std	Y+32, r25	; 0x20
     f66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f68:	89 a1       	ldd	r24, Y+33	; 0x21
     f6a:	9a a1       	ldd	r25, Y+34	; 0x22
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	9a a3       	std	Y+34, r25	; 0x22
     f70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f72:	89 a1       	ldd	r24, Y+33	; 0x21
     f74:	9a a1       	ldd	r25, Y+34	; 0x22
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	69 f7       	brne	.-38     	; 0xf54 <main+0x106>
     f7a:	14 c0       	rjmp	.+40     	; 0xfa4 <main+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7c:	6b a1       	ldd	r22, Y+35	; 0x23
     f7e:	7c a1       	ldd	r23, Y+36	; 0x24
     f80:	8d a1       	ldd	r24, Y+37	; 0x25
     f82:	9e a1       	ldd	r25, Y+38	; 0x26
     f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9a a3       	std	Y+34, r25	; 0x22
     f8e:	89 a3       	std	Y+33, r24	; 0x21
     f90:	89 a1       	ldd	r24, Y+33	; 0x21
     f92:	9a a1       	ldd	r25, Y+34	; 0x22
     f94:	9e 8f       	std	Y+30, r25	; 0x1e
     f96:	8d 8f       	std	Y+29, r24	; 0x1d
     f98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <main+0x14e>
     fa0:	9e 8f       	std	Y+30, r25	; 0x1e
     fa2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	UART_sendByte(M2_READY); /*syncs UART with MC1*/
     fa4:	80 e1       	ldi	r24, 0x10	; 16
     fa6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
	if(passExistsFlag != PASS_EXISTS)
     faa:	8c a5       	ldd	r24, Y+44	; 0x2c
     fac:	82 31       	cpi	r24, 0x12	; 18
     fae:	31 f0       	breq	.+12     	; 0xfbc <main+0x16e>
	{
		UART_sendByte(FIRST_TIME);
     fb0:	82 e1       	ldi	r24, 0x12	; 18
     fb2:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
		storeNewPassword();
     fb6:	0e 94 a3 05 	call	0xb46	; 0xb46 <storeNewPassword>
     fba:	08 c1       	rjmp	.+528    	; 0x11cc <main+0x37e>
	}
	else
	{
		UART_sendByte(NOT_FIRST_TIME);
     fbc:	81 e1       	ldi	r24, 0x11	; 17
     fbe:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
		EEPROM_readByte(PASS_LENGTH_LOCATION, &passwordLength);
     fc2:	2c e7       	ldi	r18, 0x7C	; 124
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	80 e3       	ldi	r24, 0x30	; 48
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	b9 01       	movw	r22, r18
     fcc:	0e 94 09 0b 	call	0x1612	; 0x1612 <EEPROM_readByte>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	aa e7       	ldi	r26, 0x7A	; 122
     fd6:	b4 e4       	ldi	r27, 0x44	; 68
     fd8:	89 8f       	std	Y+25, r24	; 0x19
     fda:	9a 8f       	std	Y+26, r25	; 0x1a
     fdc:	ab 8f       	std	Y+27, r26	; 0x1b
     fde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	69 8d       	ldd	r22, Y+25	; 0x19
     fe2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a e7       	ldi	r20, 0x7A	; 122
     fee:	53 e4       	ldi	r21, 0x43	; 67
     ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8d 8b       	std	Y+21, r24	; 0x15
     ffa:	9e 8b       	std	Y+22, r25	; 0x16
     ffc:	af 8b       	std	Y+23, r26	; 0x17
     ffe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1000:	6d 89       	ldd	r22, Y+21	; 0x15
    1002:	7e 89       	ldd	r23, Y+22	; 0x16
    1004:	8f 89       	ldd	r24, Y+23	; 0x17
    1006:	98 8d       	ldd	r25, Y+24	; 0x18
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <main+0x1d4>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9c 8b       	std	Y+20, r25	; 0x14
    101e:	8b 8b       	std	Y+19, r24	; 0x13
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <main+0x252>
	else if (__tmp > 65535)
    1022:	6d 89       	ldd	r22, Y+21	; 0x15
    1024:	7e 89       	ldd	r23, Y+22	; 0x16
    1026:	8f 89       	ldd	r24, Y+23	; 0x17
    1028:	98 8d       	ldd	r25, Y+24	; 0x18
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1036:	18 16       	cp	r1, r24
    1038:	4c f5       	brge	.+82     	; 0x108c <main+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	69 8d       	ldd	r22, Y+25	; 0x19
    103c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    103e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9c 8b       	std	Y+20, r25	; 0x14
    1060:	8b 8b       	std	Y+19, r24	; 0x13
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <main+0x234>
    1064:	89 e1       	ldi	r24, 0x19	; 25
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9a 8b       	std	Y+18, r25	; 0x12
    106a:	89 8b       	std	Y+17, r24	; 0x11
    106c:	89 89       	ldd	r24, Y+17	; 0x11
    106e:	9a 89       	ldd	r25, Y+18	; 0x12
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <main+0x222>
    1074:	9a 8b       	std	Y+18, r25	; 0x12
    1076:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	8b 89       	ldd	r24, Y+19	; 0x13
    107a:	9c 89       	ldd	r25, Y+20	; 0x14
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9c 8b       	std	Y+20, r25	; 0x14
    1080:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	8b 89       	ldd	r24, Y+19	; 0x13
    1084:	9c 89       	ldd	r25, Y+20	; 0x14
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f7       	brne	.-38     	; 0x1064 <main+0x216>
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	6d 89       	ldd	r22, Y+21	; 0x15
    108e:	7e 89       	ldd	r23, Y+22	; 0x16
    1090:	8f 89       	ldd	r24, Y+23	; 0x17
    1092:	98 8d       	ldd	r25, Y+24	; 0x18
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	98 8b       	std	Y+16, r25	; 0x10
    10a6:	8f 87       	std	Y+15, r24	; 0x0f
    10a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10aa:	98 89       	ldd	r25, Y+16	; 0x10
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <main+0x25e>
    10b0:	98 8b       	std	Y+16, r25	; 0x10
    10b2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);

		UART_sendByte(passwordLength);
    10b4:	80 91 7c 00 	lds	r24, 0x007C
    10b8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
		EEPROM_readString(PASS_STORE_LOCATION, g_savedPass, passwordLength);
    10bc:	40 91 7c 00 	lds	r20, 0x007C
    10c0:	2c e6       	ldi	r18, 0x6C	; 108
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	84 e0       	ldi	r24, 0x04	; 4
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	b9 01       	movw	r22, r18
    10ca:	0e 94 24 0a 	call	0x1448	; 0x1448 <EEPROM_readString>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	aa e7       	ldi	r26, 0x7A	; 122
    10d4:	b4 e4       	ldi	r27, 0x44	; 68
    10d6:	8b 87       	std	Y+11, r24	; 0x0b
    10d8:	9c 87       	std	Y+12, r25	; 0x0c
    10da:	ad 87       	std	Y+13, r26	; 0x0d
    10dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10de:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4a e7       	ldi	r20, 0x7A	; 122
    10ec:	53 e4       	ldi	r21, 0x43	; 67
    10ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	8f 83       	std	Y+7, r24	; 0x07
    10f8:	98 87       	std	Y+8, r25	; 0x08
    10fa:	a9 87       	std	Y+9, r26	; 0x09
    10fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1100:	78 85       	ldd	r23, Y+8	; 0x08
    1102:	89 85       	ldd	r24, Y+9	; 0x09
    1104:	9a 85       	ldd	r25, Y+10	; 0x0a
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	5f e3       	ldi	r21, 0x3F	; 63
    110e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1112:	88 23       	and	r24, r24
    1114:	2c f4       	brge	.+10     	; 0x1120 <main+0x2d2>
		__ticks = 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9e 83       	std	Y+6, r25	; 0x06
    111c:	8d 83       	std	Y+5, r24	; 0x05
    111e:	3f c0       	rjmp	.+126    	; 0x119e <main+0x350>
	else if (__tmp > 65535)
    1120:	6f 81       	ldd	r22, Y+7	; 0x07
    1122:	78 85       	ldd	r23, Y+8	; 0x08
    1124:	89 85       	ldd	r24, Y+9	; 0x09
    1126:	9a 85       	ldd	r25, Y+10	; 0x0a
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	3f ef       	ldi	r19, 0xFF	; 255
    112c:	4f e7       	ldi	r20, 0x7F	; 127
    112e:	57 e4       	ldi	r21, 0x47	; 71
    1130:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1134:	18 16       	cp	r1, r24
    1136:	4c f5       	brge	.+82     	; 0x118a <main+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1138:	6b 85       	ldd	r22, Y+11	; 0x0b
    113a:	7c 85       	ldd	r23, Y+12	; 0x0c
    113c:	8d 85       	ldd	r24, Y+13	; 0x0d
    113e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e2       	ldi	r20, 0x20	; 32
    1146:	51 e4       	ldi	r21, 0x41	; 65
    1148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <main+0x332>
    1162:	89 e1       	ldi	r24, 0x19	; 25
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9c 83       	std	Y+4, r25	; 0x04
    1168:	8b 83       	std	Y+3, r24	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <main+0x320>
    1172:	9c 83       	std	Y+4, r25	; 0x04
    1174:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	9e 83       	std	Y+6, r25	; 0x06
    117e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	69 f7       	brne	.-38     	; 0x1162 <main+0x314>
    1188:	14 c0       	rjmp	.+40     	; 0x11b2 <main+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118a:	6f 81       	ldd	r22, Y+7	; 0x07
    118c:	78 85       	ldd	r23, Y+8	; 0x08
    118e:	89 85       	ldd	r24, Y+9	; 0x09
    1190:	9a 85       	ldd	r25, Y+10	; 0x0a
    1192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9e 83       	std	Y+6, r25	; 0x06
    119c:	8d 83       	std	Y+5, r24	; 0x05
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	9e 81       	ldd	r25, Y+6	; 0x06
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <main+0x35c>
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);

		g_savedPass[passwordLength] = '#'; /* adds "#" to the end of string to be able to send through UART*/
    11b2:	80 91 7c 00 	lds	r24, 0x007C
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	fc 01       	movw	r30, r24
    11bc:	e4 59       	subi	r30, 0x94	; 148
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	83 e2       	ldi	r24, 0x23	; 35
    11c2:	80 83       	st	Z, r24
		UART_sendString(g_savedPass);
    11c4:	8c e6       	ldi	r24, 0x6C	; 108
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <UART_sendString>



	while(1)
	{
		uint8 stage =0;
    11cc:	1b a6       	std	Y+43, r1	; 0x2b
		stage=UART_receiveByte();
    11ce:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_receiveByte>
    11d2:	8b a7       	std	Y+43, r24	; 0x2b

		/*checks if user tries to change password on second Micro-controller to store it in EEPROM*/
		if (stage == CHANGE_PASS)
    11d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d6:	87 37       	cpi	r24, 0x77	; 119
    11d8:	c9 f7       	brne	.-14     	; 0x11cc <main+0x37e>
		{
			storeNewPassword();
    11da:	0e 94 a3 05 	call	0xb46	; 0xb46 <storeNewPassword>
    11de:	f6 cf       	rjmp	.-20     	; 0x11cc <main+0x37e>

000011e0 <EEPROM_init>:
#include "eeprom.h"



void EEPROM_init(const twi_config *i2c_config_ptr)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <EEPROM_init+0x6>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	9a 83       	std	Y+2, r25	; 0x02
    11ec:	89 83       	std	Y+1, r24	; 0x01
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_Init(i2c_config_ptr);
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <TWI_Init>
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <EEPROM_writeString>:

void EEPROM_writeString(uint16 memLocation, const uint8 *Str)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	a1 97       	sbiw	r28, 0x21	; 33
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	9f 8f       	std	Y+31, r25	; 0x1f
    1216:	8e 8f       	std	Y+30, r24	; 0x1e
    1218:	79 a3       	std	Y+33, r23	; 0x21
    121a:	68 a3       	std	Y+32, r22	; 0x20
	uint8 i=0;
    121c:	1d 8e       	std	Y+29, r1	; 0x1d
    121e:	88 c0       	rjmp	.+272    	; 0x1330 <EEPROM_writeString+0x130>
	while(Str[i]!= '\0')
	{

		EEPROM_writeByte(memLocation, Str[i]);
    1220:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	88 a1       	ldd	r24, Y+32	; 0x20
    1228:	99 a1       	ldd	r25, Y+33	; 0x21
    122a:	fc 01       	movw	r30, r24
    122c:	e2 0f       	add	r30, r18
    122e:	f3 1f       	adc	r31, r19
    1230:	20 81       	ld	r18, Z
    1232:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1234:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1236:	62 2f       	mov	r22, r18
    1238:	0e 94 c8 0a 	call	0x1590	; 0x1590 <EEPROM_writeByte>
		memLocation++;
    123c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    123e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	9f 8f       	std	Y+31, r25	; 0x1f
    1244:	8e 8f       	std	Y+30, r24	; 0x1e
		i++;
    1246:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1248:	8f 5f       	subi	r24, 0xFF	; 255
    124a:	8d 8f       	std	Y+29, r24	; 0x1d
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	aa e7       	ldi	r26, 0x7A	; 122
    1252:	b4 e4       	ldi	r27, 0x44	; 68
    1254:	89 8f       	std	Y+25, r24	; 0x19
    1256:	9a 8f       	std	Y+26, r25	; 0x1a
    1258:	ab 8f       	std	Y+27, r26	; 0x1b
    125a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125c:	69 8d       	ldd	r22, Y+25	; 0x19
    125e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1260:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1262:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	4a e7       	ldi	r20, 0x7A	; 122
    126a:	53 e4       	ldi	r21, 0x43	; 67
    126c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	8d 8b       	std	Y+21, r24	; 0x15
    1276:	9e 8b       	std	Y+22, r25	; 0x16
    1278:	af 8b       	std	Y+23, r26	; 0x17
    127a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    127c:	6d 89       	ldd	r22, Y+21	; 0x15
    127e:	7e 89       	ldd	r23, Y+22	; 0x16
    1280:	8f 89       	ldd	r24, Y+23	; 0x17
    1282:	98 8d       	ldd	r25, Y+24	; 0x18
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e8       	ldi	r20, 0x80	; 128
    128a:	5f e3       	ldi	r21, 0x3F	; 63
    128c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1290:	88 23       	and	r24, r24
    1292:	2c f4       	brge	.+10     	; 0x129e <EEPROM_writeString+0x9e>
		__ticks = 1;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	9c 8b       	std	Y+20, r25	; 0x14
    129a:	8b 8b       	std	Y+19, r24	; 0x13
    129c:	3f c0       	rjmp	.+126    	; 0x131c <EEPROM_writeString+0x11c>
	else if (__tmp > 65535)
    129e:	6d 89       	ldd	r22, Y+21	; 0x15
    12a0:	7e 89       	ldd	r23, Y+22	; 0x16
    12a2:	8f 89       	ldd	r24, Y+23	; 0x17
    12a4:	98 8d       	ldd	r25, Y+24	; 0x18
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	3f ef       	ldi	r19, 0xFF	; 255
    12aa:	4f e7       	ldi	r20, 0x7F	; 127
    12ac:	57 e4       	ldi	r21, 0x47	; 71
    12ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b2:	18 16       	cp	r1, r24
    12b4:	4c f5       	brge	.+82     	; 0x1308 <EEPROM_writeString+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b6:	69 8d       	ldd	r22, Y+25	; 0x19
    12b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e2       	ldi	r20, 0x20	; 32
    12c4:	51 e4       	ldi	r21, 0x41	; 65
    12c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	bc 01       	movw	r22, r24
    12d0:	cd 01       	movw	r24, r26
    12d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	9c 8b       	std	Y+20, r25	; 0x14
    12dc:	8b 8b       	std	Y+19, r24	; 0x13
    12de:	0f c0       	rjmp	.+30     	; 0x12fe <EEPROM_writeString+0xfe>
    12e0:	89 e1       	ldi	r24, 0x19	; 25
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9a 8b       	std	Y+18, r25	; 0x12
    12e6:	89 8b       	std	Y+17, r24	; 0x11
    12e8:	89 89       	ldd	r24, Y+17	; 0x11
    12ea:	9a 89       	ldd	r25, Y+18	; 0x12
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <EEPROM_writeString+0xec>
    12f0:	9a 8b       	std	Y+18, r25	; 0x12
    12f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f4:	8b 89       	ldd	r24, Y+19	; 0x13
    12f6:	9c 89       	ldd	r25, Y+20	; 0x14
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	9c 8b       	std	Y+20, r25	; 0x14
    12fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1300:	9c 89       	ldd	r25, Y+20	; 0x14
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	69 f7       	brne	.-38     	; 0x12e0 <EEPROM_writeString+0xe0>
    1306:	14 c0       	rjmp	.+40     	; 0x1330 <EEPROM_writeString+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1308:	6d 89       	ldd	r22, Y+21	; 0x15
    130a:	7e 89       	ldd	r23, Y+22	; 0x16
    130c:	8f 89       	ldd	r24, Y+23	; 0x17
    130e:	98 8d       	ldd	r25, Y+24	; 0x18
    1310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	9c 8b       	std	Y+20, r25	; 0x14
    131a:	8b 8b       	std	Y+19, r24	; 0x13
    131c:	8b 89       	ldd	r24, Y+19	; 0x13
    131e:	9c 89       	ldd	r25, Y+20	; 0x14
    1320:	98 8b       	std	Y+16, r25	; 0x10
    1322:	8f 87       	std	Y+15, r24	; 0x0f
    1324:	8f 85       	ldd	r24, Y+15	; 0x0f
    1326:	98 89       	ldd	r25, Y+16	; 0x10
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <EEPROM_writeString+0x128>
    132c:	98 8b       	std	Y+16, r25	; 0x10
    132e:	8f 87       	std	Y+15, r24	; 0x0f
}

void EEPROM_writeString(uint16 memLocation, const uint8 *Str)
{
	uint8 i=0;
	while(Str[i]!= '\0')
    1330:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	88 a1       	ldd	r24, Y+32	; 0x20
    1338:	99 a1       	ldd	r25, Y+33	; 0x21
    133a:	fc 01       	movw	r30, r24
    133c:	e2 0f       	add	r30, r18
    133e:	f3 1f       	adc	r31, r19
    1340:	80 81       	ld	r24, Z
    1342:	88 23       	and	r24, r24
    1344:	09 f0       	breq	.+2      	; 0x1348 <EEPROM_writeString+0x148>
    1346:	6c cf       	rjmp	.-296    	; 0x1220 <EEPROM_writeString+0x20>
		EEPROM_writeByte(memLocation, Str[i]);
		memLocation++;
		i++;
		_delay_ms(1000);
	}
	EEPROM_writeByte(memLocation, '\0');
    1348:	8e 8d       	ldd	r24, Y+30	; 0x1e
    134a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <EEPROM_writeByte>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	aa e7       	ldi	r26, 0x7A	; 122
    1358:	b4 e4       	ldi	r27, 0x44	; 68
    135a:	8b 87       	std	Y+11, r24	; 0x0b
    135c:	9c 87       	std	Y+12, r25	; 0x0c
    135e:	ad 87       	std	Y+13, r26	; 0x0d
    1360:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1362:	6b 85       	ldd	r22, Y+11	; 0x0b
    1364:	7c 85       	ldd	r23, Y+12	; 0x0c
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	9e 85       	ldd	r25, Y+14	; 0x0e
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	4a e7       	ldi	r20, 0x7A	; 122
    1370:	53 e4       	ldi	r21, 0x43	; 67
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	8f 83       	std	Y+7, r24	; 0x07
    137c:	98 87       	std	Y+8, r25	; 0x08
    137e:	a9 87       	std	Y+9, r26	; 0x09
    1380:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1382:	6f 81       	ldd	r22, Y+7	; 0x07
    1384:	78 85       	ldd	r23, Y+8	; 0x08
    1386:	89 85       	ldd	r24, Y+9	; 0x09
    1388:	9a 85       	ldd	r25, Y+10	; 0x0a
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e8       	ldi	r20, 0x80	; 128
    1390:	5f e3       	ldi	r21, 0x3F	; 63
    1392:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1396:	88 23       	and	r24, r24
    1398:	2c f4       	brge	.+10     	; 0x13a4 <EEPROM_writeString+0x1a4>
		__ticks = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9e 83       	std	Y+6, r25	; 0x06
    13a0:	8d 83       	std	Y+5, r24	; 0x05
    13a2:	3f c0       	rjmp	.+126    	; 0x1422 <EEPROM_writeString+0x222>
	else if (__tmp > 65535)
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	3f ef       	ldi	r19, 0xFF	; 255
    13b0:	4f e7       	ldi	r20, 0x7F	; 127
    13b2:	57 e4       	ldi	r21, 0x47	; 71
    13b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13b8:	18 16       	cp	r1, r24
    13ba:	4c f5       	brge	.+82     	; 0x140e <EEPROM_writeString+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13be:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e2       	ldi	r20, 0x20	; 32
    13ca:	51 e4       	ldi	r21, 0x41	; 65
    13cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <EEPROM_writeString+0x204>
    13e6:	89 e1       	ldi	r24, 0x19	; 25
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <EEPROM_writeString+0x1f2>
    13f6:	9c 83       	std	Y+4, r25	; 0x04
    13f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	69 f7       	brne	.-38     	; 0x13e6 <EEPROM_writeString+0x1e6>
    140c:	14 c0       	rjmp	.+40     	; 0x1436 <EEPROM_writeString+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140e:	6f 81       	ldd	r22, Y+7	; 0x07
    1410:	78 85       	ldd	r23, Y+8	; 0x08
    1412:	89 85       	ldd	r24, Y+9	; 0x09
    1414:	9a 85       	ldd	r25, Y+10	; 0x0a
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 83       	std	Y+5, r24	; 0x05
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <EEPROM_writeString+0x22e>
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);

}
    1436:	a1 96       	adiw	r28, 0x21	; 33
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <EEPROM_readString>:
void EEPROM_readString(uint16 memLocation, char *Str, uint8 strLength)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	64 97       	sbiw	r28, 0x14	; 20
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	99 8b       	std	Y+17, r25	; 0x11
    145e:	88 8b       	std	Y+16, r24	; 0x10
    1460:	7b 8b       	std	Y+19, r23	; 0x13
    1462:	6a 8b       	std	Y+18, r22	; 0x12
    1464:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 i=0;
    1466:	1f 86       	std	Y+15, r1	; 0x0f
    1468:	86 c0       	rjmp	.+268    	; 0x1576 <EEPROM_readString+0x12e>
	while(i<5)
	{

		EEPROM_readByte(memLocation, &Str[i]);
    146a:	8f 85       	ldd	r24, Y+15	; 0x0f
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8a 89       	ldd	r24, Y+18	; 0x12
    1472:	9b 89       	ldd	r25, Y+19	; 0x13
    1474:	28 0f       	add	r18, r24
    1476:	39 1f       	adc	r19, r25
    1478:	88 89       	ldd	r24, Y+16	; 0x10
    147a:	99 89       	ldd	r25, Y+17	; 0x11
    147c:	b9 01       	movw	r22, r18
    147e:	0e 94 09 0b 	call	0x1612	; 0x1612 <EEPROM_readByte>
		memLocation++;
    1482:	88 89       	ldd	r24, Y+16	; 0x10
    1484:	99 89       	ldd	r25, Y+17	; 0x11
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	99 8b       	std	Y+17, r25	; 0x11
    148a:	88 8b       	std	Y+16, r24	; 0x10
		i++;
    148c:	8f 85       	ldd	r24, Y+15	; 0x0f
    148e:	8f 5f       	subi	r24, 0xFF	; 255
    1490:	8f 87       	std	Y+15, r24	; 0x0f
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	aa e7       	ldi	r26, 0x7A	; 122
    1498:	b4 e4       	ldi	r27, 0x44	; 68
    149a:	8b 87       	std	Y+11, r24	; 0x0b
    149c:	9c 87       	std	Y+12, r25	; 0x0c
    149e:	ad 87       	std	Y+13, r26	; 0x0d
    14a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	4a e7       	ldi	r20, 0x7A	; 122
    14b0:	53 e4       	ldi	r21, 0x43	; 67
    14b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	8f 83       	std	Y+7, r24	; 0x07
    14bc:	98 87       	std	Y+8, r25	; 0x08
    14be:	a9 87       	std	Y+9, r26	; 0x09
    14c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	78 85       	ldd	r23, Y+8	; 0x08
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e8       	ldi	r20, 0x80	; 128
    14d0:	5f e3       	ldi	r21, 0x3F	; 63
    14d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d6:	88 23       	and	r24, r24
    14d8:	2c f4       	brge	.+10     	; 0x14e4 <EEPROM_readString+0x9c>
		__ticks = 1;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	3f c0       	rjmp	.+126    	; 0x1562 <EEPROM_readString+0x11a>
	else if (__tmp > 65535)
    14e4:	6f 81       	ldd	r22, Y+7	; 0x07
    14e6:	78 85       	ldd	r23, Y+8	; 0x08
    14e8:	89 85       	ldd	r24, Y+9	; 0x09
    14ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	3f ef       	ldi	r19, 0xFF	; 255
    14f0:	4f e7       	ldi	r20, 0x7F	; 127
    14f2:	57 e4       	ldi	r21, 0x47	; 71
    14f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f8:	18 16       	cp	r1, r24
    14fa:	4c f5       	brge	.+82     	; 0x154e <EEPROM_readString+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1500:	8d 85       	ldd	r24, Y+13	; 0x0d
    1502:	9e 85       	ldd	r25, Y+14	; 0x0e
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e2       	ldi	r20, 0x20	; 32
    150a:	51 e4       	ldi	r21, 0x41	; 65
    150c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	bc 01       	movw	r22, r24
    1516:	cd 01       	movw	r24, r26
    1518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	0f c0       	rjmp	.+30     	; 0x1544 <EEPROM_readString+0xfc>
    1526:	89 e1       	ldi	r24, 0x19	; 25
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	8b 83       	std	Y+3, r24	; 0x03
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <EEPROM_readString+0xea>
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	69 f7       	brne	.-38     	; 0x1526 <EEPROM_readString+0xde>
    154c:	14 c0       	rjmp	.+40     	; 0x1576 <EEPROM_readString+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154e:	6f 81       	ldd	r22, Y+7	; 0x07
    1550:	78 85       	ldd	r23, Y+8	; 0x08
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	9a 85       	ldd	r25, Y+10	; 0x0a
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <EEPROM_readString+0x126>
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	89 83       	std	Y+1, r24	; 0x01

}
void EEPROM_readString(uint16 memLocation, char *Str, uint8 strLength)
{
	uint8 i=0;
	while(i<5)
    1576:	8f 85       	ldd	r24, Y+15	; 0x0f
    1578:	85 30       	cpi	r24, 0x05	; 5
    157a:	08 f4       	brcc	.+2      	; 0x157e <EEPROM_readString+0x136>
    157c:	76 cf       	rjmp	.-276    	; 0x146a <EEPROM_readString+0x22>
		EEPROM_readByte(memLocation, &Str[i]);
		memLocation++;
		i++;
		_delay_ms(1000);
	}
}
    157e:	64 96       	adiw	r28, 0x14	; 20
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <EEPROM_writeByte+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <EEPROM_writeByte+0x8>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	9a 83       	std	Y+2, r25	; 0x02
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	6b 83       	std	Y+3, r22	; 0x03
	TWI_Start();
    15a2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    15a6:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Get_Status>
    15aa:	88 30       	cpi	r24, 0x08	; 8
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <EEPROM_writeByte+0x22>
		return ERROR;
    15ae:	1c 82       	std	Y+4, r1	; 0x04
    15b0:	28 c0       	rjmp	.+80     	; 0x1602 <EEPROM_writeByte+0x72>

	TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700) >> 7)));
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	80 70       	andi	r24, 0x00	; 0
    15b8:	97 70       	andi	r25, 0x07	; 7
    15ba:	88 0f       	add	r24, r24
    15bc:	89 2f       	mov	r24, r25
    15be:	88 1f       	adc	r24, r24
    15c0:	99 0b       	sbc	r25, r25
    15c2:	91 95       	neg	r25
    15c4:	80 6a       	ori	r24, 0xA0	; 160
    15c6:	0e 94 a6 0b 	call	0x174c	; 0x174c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    15ca:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Get_Status>
    15ce:	88 31       	cpi	r24, 0x18	; 24
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <EEPROM_writeByte+0x46>
		return ERROR;
    15d2:	1c 82       	std	Y+4, r1	; 0x04
    15d4:	16 c0       	rjmp	.+44     	; 0x1602 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_Write((uint8)(u16addr));
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	0e 94 a6 0b 	call	0x174c	; 0x174c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    15dc:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Get_Status>
    15e0:	88 32       	cpi	r24, 0x28	; 40
    15e2:	11 f0       	breq	.+4      	; 0x15e8 <EEPROM_writeByte+0x58>
		return ERROR;
    15e4:	1c 82       	std	Y+4, r1	; 0x04
    15e6:	0d c0       	rjmp	.+26     	; 0x1602 <EEPROM_writeByte+0x72>

	TWI_Write(u8data);
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	0e 94 a6 0b 	call	0x174c	; 0x174c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    15ee:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Get_Status>
    15f2:	88 32       	cpi	r24, 0x28	; 40
    15f4:	11 f0       	breq	.+4      	; 0x15fa <EEPROM_writeByte+0x6a>
		return ERROR;
    15f6:	1c 82       	std	Y+4, r1	; 0x04
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <EEPROM_writeByte+0x72>

	TWI_Stop();
    15fa:	0e 94 9b 0b 	call	0x1736	; 0x1736 <TWI_Stop>
	return SUCCESS;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8c 83       	std	Y+4, r24	; 0x04
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <EEPROM_readByte+0x6>
    1618:	00 d0       	rcall	.+0      	; 0x161a <EEPROM_readByte+0x8>
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	7c 83       	std	Y+4, r23	; 0x04
    1626:	6b 83       	std	Y+3, r22	; 0x03
	TWI_Start();
    1628:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    162c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Get_Status>
    1630:	88 30       	cpi	r24, 0x08	; 8
    1632:	11 f0       	breq	.+4      	; 0x1638 <EEPROM_readByte+0x26>
		return ERROR;
    1634:	1d 82       	std	Y+5, r1	; 0x05
    1636:	44 c0       	rjmp	.+136    	; 0x16c0 <EEPROM_readByte+0xae>

	TWI_Write((uint8)((0xA0) |((u16addr & 0x0700) >> 7)));
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	9a 81       	ldd	r25, Y+2	; 0x02
    163c:	80 70       	andi	r24, 0x00	; 0
    163e:	97 70       	andi	r25, 0x07	; 7
    1640:	88 0f       	add	r24, r24
    1642:	89 2f       	mov	r24, r25
    1644:	88 1f       	adc	r24, r24
    1646:	99 0b       	sbc	r25, r25
    1648:	91 95       	neg	r25
    164a:	80 6a       	ori	r24, 0xA0	; 160
    164c:	0e 94 a6 0b 	call	0x174c	; 0x174c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1650:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Get_Status>
    1654:	88 31       	cpi	r24, 0x18	; 24
    1656:	11 f0       	breq	.+4      	; 0x165c <EEPROM_readByte+0x4a>
		return ERROR;
    1658:	1d 82       	std	Y+5, r1	; 0x05
    165a:	32 c0       	rjmp	.+100    	; 0x16c0 <EEPROM_readByte+0xae>

	TWI_Write((uint8)(u16addr));
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	0e 94 a6 0b 	call	0x174c	; 0x174c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1662:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Get_Status>
    1666:	88 32       	cpi	r24, 0x28	; 40
    1668:	11 f0       	breq	.+4      	; 0x166e <EEPROM_readByte+0x5c>
		return ERROR;
    166a:	1d 82       	std	Y+5, r1	; 0x05
    166c:	29 c0       	rjmp	.+82     	; 0x16c0 <EEPROM_readByte+0xae>

	TWI_Start();
    166e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    1672:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Get_Status>
    1676:	80 31       	cpi	r24, 0x10	; 16
    1678:	11 f0       	breq	.+4      	; 0x167e <EEPROM_readByte+0x6c>
		return ERROR;
    167a:	1d 82       	std	Y+5, r1	; 0x05
    167c:	21 c0       	rjmp	.+66     	; 0x16c0 <EEPROM_readByte+0xae>

	TWI_Write((uint8)((0xA1) |((u16addr & 0x0700) >> 7)));
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	80 70       	andi	r24, 0x00	; 0
    1684:	97 70       	andi	r25, 0x07	; 7
    1686:	88 0f       	add	r24, r24
    1688:	89 2f       	mov	r24, r25
    168a:	88 1f       	adc	r24, r24
    168c:	99 0b       	sbc	r25, r25
    168e:	91 95       	neg	r25
    1690:	81 6a       	ori	r24, 0xA1	; 161
    1692:	0e 94 a6 0b 	call	0x174c	; 0x174c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    1696:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Get_Status>
    169a:	80 34       	cpi	r24, 0x40	; 64
    169c:	11 f0       	breq	.+4      	; 0x16a2 <EEPROM_readByte+0x90>
		return ERROR;
    169e:	1d 82       	std	Y+5, r1	; 0x05
    16a0:	0f c0       	rjmp	.+30     	; 0x16c0 <EEPROM_readByte+0xae>

	*u8data = TWI_Read_With_NACK();
    16a2:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <TWI_Read_With_NACK>
    16a6:	eb 81       	ldd	r30, Y+3	; 0x03
    16a8:	fc 81       	ldd	r31, Y+4	; 0x04
    16aa:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_NACK)
    16ac:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Get_Status>
    16b0:	88 35       	cpi	r24, 0x58	; 88
    16b2:	11 f0       	breq	.+4      	; 0x16b8 <EEPROM_readByte+0xa6>
		return ERROR;
    16b4:	1d 82       	std	Y+5, r1	; 0x05
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <EEPROM_readByte+0xae>

	TWI_Stop();
    16b8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <TWI_Stop>
	return SUCCESS;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	8d 83       	std	Y+5, r24	; 0x05
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <TWI_Init>:
 *
 *******************************************************************/
#include "i2c.h"

void TWI_Init(const twi_config *config_ptr)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <TWI_Init+0x6>
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
	TWBR = (config_ptr -> bitRate);
    16e0:	a0 e2       	ldi	r26, 0x20	; 32
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e9 81       	ldd	r30, Y+1	; 0x01
    16e6:	fa 81       	ldd	r31, Y+2	; 0x02
    16e8:	80 81       	ld	r24, Z
    16ea:	8c 93       	st	X, r24
	TWSR = (config_ptr -> i2c_prescaler);
    16ec:	a1 e2       	ldi	r26, 0x21	; 33
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e9 81       	ldd	r30, Y+1	; 0x01
    16f2:	fa 81       	ldd	r31, Y+2	; 0x02
    16f4:	82 81       	ldd	r24, Z+2	; 0x02
    16f6:	8c 93       	st	X, r24
	TWAR = (config_ptr -> slave_address);
    16f8:	a2 e2       	ldi	r26, 0x22	; 34
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e9 81       	ldd	r30, Y+1	; 0x01
    16fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1700:	81 81       	ldd	r24, Z+1	; 0x01
    1702:	8c 93       	st	X, r24
	TWCR = (1 << TWEN);
    1704:	e6 e5       	ldi	r30, 0x56	; 86
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	84 e0       	ldi	r24, 0x04	; 4
    170a:	80 83       	st	Z, r24
}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <TWI_Start>:

void TWI_Start(void)
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    171e:	e6 e5       	ldi	r30, 0x56	; 86
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	84 ea       	ldi	r24, 0xA4	; 164
    1724:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT)){};
    1726:	e6 e5       	ldi	r30, 0x56	; 86
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	88 23       	and	r24, r24
    172e:	dc f7       	brge	.-10     	; 0x1726 <TWI_Start+0x10>
}
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <TWI_Stop>:

void TWI_Stop(void)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    173e:	e6 e5       	ldi	r30, 0x56	; 86
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	84 e9       	ldi	r24, 0x94	; 148
    1744:	80 83       	st	Z, r24
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <TWI_Write>:

void TWI_Write(uint8 data)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	0f 92       	push	r0
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    1758:	e3 e2       	ldi	r30, 0x23	; 35
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    1760:	e6 e5       	ldi	r30, 0x56	; 86
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	84 e8       	ldi	r24, 0x84	; 132
    1766:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1768:	e6 e5       	ldi	r30, 0x56	; 86
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	88 23       	and	r24, r24
    1770:	dc f7       	brge	.-10     	; 0x1768 <TWI_Write+0x1c>
}
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
    1782:	e6 e5       	ldi	r30, 0x56	; 86
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	84 ec       	ldi	r24, 0xC4	; 196
    1788:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT)){};
    178a:	e6 e5       	ldi	r30, 0x56	; 86
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	88 23       	and	r24, r24
    1792:	dc f7       	brge	.-10     	; 0x178a <TWI_Read_With_ACK+0x10>
	return TWDR;
    1794:	e3 e2       	ldi	r30, 0x23	; 35
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
}
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN);
    17a8:	e6 e5       	ldi	r30, 0x56	; 86
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	84 e8       	ldi	r24, 0x84	; 132
    17ae:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT)){}
    17b0:	e6 e5       	ldi	r30, 0x56	; 86
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	88 23       	and	r24, r24
    17b8:	dc f7       	brge	.-10     	; 0x17b0 <TWI_Read_With_NACK+0x10>
	return TWDR;
    17ba:	e3 e2       	ldi	r30, 0x23	; 35
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
}
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	0f 92       	push	r0
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status = (TWSR & 0xF8);
    17d0:	e1 e2       	ldi	r30, 0x21	; 33
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	88 7f       	andi	r24, 0xF8	; 248
    17d8:	89 83       	std	Y+1, r24	; 0x01
	return status;
    17da:	89 81       	ldd	r24, Y+1	; 0x01
}
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    17ec:	a7 e3       	ldi	r26, 0x37	; 55
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e7 e3       	ldi	r30, 0x37	; 55
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8e 60       	ori	r24, 0x0E	; 14
    17f8:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    17fa:	ea e3       	ldi	r30, 0x3A	; 58
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8f ef       	ldi	r24, 0xFF	; 255
    1800:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1802:	88 e3       	ldi	r24, 0x38	; 56
    1804:	0e 94 0d 0c 	call	0x181a	; 0x181a <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1808:	8c e0       	ldi	r24, 0x0C	; 12
    180a:	0e 94 0d 0c 	call	0x181a	; 0x181a <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	0e 94 0d 0c 	call	0x181a	; 0x181a <LCD_sendCommand>
}
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	e9 97       	sbiw	r28, 0x39	; 57
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1830:	a8 e3       	ldi	r26, 0x38	; 56
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e8 e3       	ldi	r30, 0x38	; 56
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8d 7f       	andi	r24, 0xFD	; 253
    183c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    183e:	a8 e3       	ldi	r26, 0x38	; 56
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e8 e3       	ldi	r30, 0x38	; 56
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8b 7f       	andi	r24, 0xFB	; 251
    184a:	8c 93       	st	X, r24
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a0 e8       	ldi	r26, 0x80	; 128
    1852:	bf e3       	ldi	r27, 0x3F	; 63
    1854:	8d ab       	std	Y+53, r24	; 0x35
    1856:	9e ab       	std	Y+54, r25	; 0x36
    1858:	af ab       	std	Y+55, r26	; 0x37
    185a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185c:	6d a9       	ldd	r22, Y+53	; 0x35
    185e:	7e a9       	ldd	r23, Y+54	; 0x36
    1860:	8f a9       	ldd	r24, Y+55	; 0x37
    1862:	98 ad       	ldd	r25, Y+56	; 0x38
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a e7       	ldi	r20, 0x7A	; 122
    186a:	53 e4       	ldi	r21, 0x43	; 67
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	89 ab       	std	Y+49, r24	; 0x31
    1876:	9a ab       	std	Y+50, r25	; 0x32
    1878:	ab ab       	std	Y+51, r26	; 0x33
    187a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    187c:	69 a9       	ldd	r22, Y+49	; 0x31
    187e:	7a a9       	ldd	r23, Y+50	; 0x32
    1880:	8b a9       	ldd	r24, Y+51	; 0x33
    1882:	9c a9       	ldd	r25, Y+52	; 0x34
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <LCD_sendCommand+0x84>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	98 ab       	std	Y+48, r25	; 0x30
    189a:	8f a7       	std	Y+47, r24	; 0x2f
    189c:	3f c0       	rjmp	.+126    	; 0x191c <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    189e:	69 a9       	ldd	r22, Y+49	; 0x31
    18a0:	7a a9       	ldd	r23, Y+50	; 0x32
    18a2:	8b a9       	ldd	r24, Y+51	; 0x33
    18a4:	9c a9       	ldd	r25, Y+52	; 0x34
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	4c f5       	brge	.+82     	; 0x1908 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	6d a9       	ldd	r22, Y+53	; 0x35
    18b8:	7e a9       	ldd	r23, Y+54	; 0x36
    18ba:	8f a9       	ldd	r24, Y+55	; 0x37
    18bc:	98 ad       	ldd	r25, Y+56	; 0x38
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <LCD_sendCommand+0xe4>
    18e0:	89 e1       	ldi	r24, 0x19	; 25
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9e a7       	std	Y+46, r25	; 0x2e
    18e6:	8d a7       	std	Y+45, r24	; 0x2d
    18e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_sendCommand+0xd2>
    18f0:	9e a7       	std	Y+46, r25	; 0x2e
    18f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f6:	98 a9       	ldd	r25, Y+48	; 0x30
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	98 ab       	std	Y+48, r25	; 0x30
    18fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1900:	98 a9       	ldd	r25, Y+48	; 0x30
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f7       	brne	.-38     	; 0x18e0 <LCD_sendCommand+0xc6>
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	69 a9       	ldd	r22, Y+49	; 0x31
    190a:	7a a9       	ldd	r23, Y+50	; 0x32
    190c:	8b a9       	ldd	r24, Y+51	; 0x33
    190e:	9c a9       	ldd	r25, Y+52	; 0x34
    1910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	98 ab       	std	Y+48, r25	; 0x30
    191a:	8f a7       	std	Y+47, r24	; 0x2f
    191c:	8f a5       	ldd	r24, Y+47	; 0x2f
    191e:	98 a9       	ldd	r25, Y+48	; 0x30
    1920:	9c a7       	std	Y+44, r25	; 0x2c
    1922:	8b a7       	std	Y+43, r24	; 0x2b
    1924:	8b a5       	ldd	r24, Y+43	; 0x2b
    1926:	9c a5       	ldd	r25, Y+44	; 0x2c
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <LCD_sendCommand+0x10e>
    192c:	9c a7       	std	Y+44, r25	; 0x2c
    192e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1930:	a8 e3       	ldi	r26, 0x38	; 56
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e8 e3       	ldi	r30, 0x38	; 56
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	88 60       	ori	r24, 0x08	; 8
    193c:	8c 93       	st	X, r24
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a0 e8       	ldi	r26, 0x80	; 128
    1944:	bf e3       	ldi	r27, 0x3F	; 63
    1946:	8f a3       	std	Y+39, r24	; 0x27
    1948:	98 a7       	std	Y+40, r25	; 0x28
    194a:	a9 a7       	std	Y+41, r26	; 0x29
    194c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194e:	6f a1       	ldd	r22, Y+39	; 0x27
    1950:	78 a5       	ldd	r23, Y+40	; 0x28
    1952:	89 a5       	ldd	r24, Y+41	; 0x29
    1954:	9a a5       	ldd	r25, Y+42	; 0x2a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a e7       	ldi	r20, 0x7A	; 122
    195c:	53 e4       	ldi	r21, 0x43	; 67
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8b a3       	std	Y+35, r24	; 0x23
    1968:	9c a3       	std	Y+36, r25	; 0x24
    196a:	ad a3       	std	Y+37, r26	; 0x25
    196c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    196e:	6b a1       	ldd	r22, Y+35	; 0x23
    1970:	7c a1       	ldd	r23, Y+36	; 0x24
    1972:	8d a1       	ldd	r24, Y+37	; 0x25
    1974:	9e a1       	ldd	r25, Y+38	; 0x26
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	2c f4       	brge	.+10     	; 0x1990 <LCD_sendCommand+0x176>
		__ticks = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9a a3       	std	Y+34, r25	; 0x22
    198c:	89 a3       	std	Y+33, r24	; 0x21
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1990:	6b a1       	ldd	r22, Y+35	; 0x23
    1992:	7c a1       	ldd	r23, Y+36	; 0x24
    1994:	8d a1       	ldd	r24, Y+37	; 0x25
    1996:	9e a1       	ldd	r25, Y+38	; 0x26
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	4c f5       	brge	.+82     	; 0x19fa <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	6f a1       	ldd	r22, Y+39	; 0x27
    19aa:	78 a5       	ldd	r23, Y+40	; 0x28
    19ac:	89 a5       	ldd	r24, Y+41	; 0x29
    19ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	51 e4       	ldi	r21, 0x41	; 65
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9a a3       	std	Y+34, r25	; 0x22
    19ce:	89 a3       	std	Y+33, r24	; 0x21
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <LCD_sendCommand+0x1d6>
    19d2:	89 e1       	ldi	r24, 0x19	; 25
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	98 a3       	std	Y+32, r25	; 0x20
    19d8:	8f 8f       	std	Y+31, r24	; 0x1f
    19da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19dc:	98 a1       	ldd	r25, Y+32	; 0x20
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <LCD_sendCommand+0x1c4>
    19e2:	98 a3       	std	Y+32, r25	; 0x20
    19e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	89 a1       	ldd	r24, Y+33	; 0x21
    19e8:	9a a1       	ldd	r25, Y+34	; 0x22
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	9a a3       	std	Y+34, r25	; 0x22
    19ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	89 a1       	ldd	r24, Y+33	; 0x21
    19f2:	9a a1       	ldd	r25, Y+34	; 0x22
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <LCD_sendCommand+0x1b8>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	6b a1       	ldd	r22, Y+35	; 0x23
    19fc:	7c a1       	ldd	r23, Y+36	; 0x24
    19fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1a00:	9e a1       	ldd	r25, Y+38	; 0x26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9a a3       	std	Y+34, r25	; 0x22
    1a0c:	89 a3       	std	Y+33, r24	; 0x21
    1a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a10:	9a a1       	ldd	r25, Y+34	; 0x22
    1a12:	9e 8f       	std	Y+30, r25	; 0x1e
    1a14:	8d 8f       	std	Y+29, r24	; 0x1d
    1a16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <LCD_sendCommand+0x200>
    1a1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a20:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1a22:	eb e3       	ldi	r30, 0x3B	; 59
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	89 ad       	ldd	r24, Y+57	; 0x39
    1a28:	80 83       	st	Z, r24
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a0 e8       	ldi	r26, 0x80	; 128
    1a30:	bf e3       	ldi	r27, 0x3F	; 63
    1a32:	89 8f       	std	Y+25, r24	; 0x19
    1a34:	9a 8f       	std	Y+26, r25	; 0x1a
    1a36:	ab 8f       	std	Y+27, r26	; 0x1b
    1a38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a e7       	ldi	r20, 0x7A	; 122
    1a48:	53 e4       	ldi	r21, 0x43	; 67
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8d 8b       	std	Y+21, r24	; 0x15
    1a54:	9e 8b       	std	Y+22, r25	; 0x16
    1a56:	af 8b       	std	Y+23, r26	; 0x17
    1a58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a60:	98 8d       	ldd	r25, Y+24	; 0x18
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e8       	ldi	r20, 0x80	; 128
    1a68:	5f e3       	ldi	r21, 0x3F	; 63
    1a6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <LCD_sendCommand+0x262>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9c 8b       	std	Y+20, r25	; 0x14
    1a78:	8b 8b       	std	Y+19, r24	; 0x13
    1a7a:	3f c0       	rjmp	.+126    	; 0x1afa <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a80:	8f 89       	ldd	r24, Y+23	; 0x17
    1a82:	98 8d       	ldd	r25, Y+24	; 0x18
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	57 e4       	ldi	r21, 0x47	; 71
    1a8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	4c f5       	brge	.+82     	; 0x1ae6 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	69 8d       	ldd	r22, Y+25	; 0x19
    1a96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9c 8b       	std	Y+20, r25	; 0x14
    1aba:	8b 8b       	std	Y+19, r24	; 0x13
    1abc:	0f c0       	rjmp	.+30     	; 0x1adc <LCD_sendCommand+0x2c2>
    1abe:	89 e1       	ldi	r24, 0x19	; 25
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9a 8b       	std	Y+18, r25	; 0x12
    1ac4:	89 8b       	std	Y+17, r24	; 0x11
    1ac6:	89 89       	ldd	r24, Y+17	; 0x11
    1ac8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_sendCommand+0x2b0>
    1ace:	9a 8b       	std	Y+18, r25	; 0x12
    1ad0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	9c 8b       	std	Y+20, r25	; 0x14
    1ada:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1adc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ade:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <LCD_sendCommand+0x2a4>
    1ae4:	14 c0       	rjmp	.+40     	; 0x1b0e <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aea:	8f 89       	ldd	r24, Y+23	; 0x17
    1aec:	98 8d       	ldd	r25, Y+24	; 0x18
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9c 8b       	std	Y+20, r25	; 0x14
    1af8:	8b 8b       	std	Y+19, r24	; 0x13
    1afa:	8b 89       	ldd	r24, Y+19	; 0x13
    1afc:	9c 89       	ldd	r25, Y+20	; 0x14
    1afe:	98 8b       	std	Y+16, r25	; 0x10
    1b00:	8f 87       	std	Y+15, r24	; 0x0f
    1b02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b04:	98 89       	ldd	r25, Y+16	; 0x10
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_sendCommand+0x2ec>
    1b0a:	98 8b       	std	Y+16, r25	; 0x10
    1b0c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1b0e:	a8 e3       	ldi	r26, 0x38	; 56
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e8 e3       	ldi	r30, 0x38	; 56
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	87 7f       	andi	r24, 0xF7	; 247
    1b1a:	8c 93       	st	X, r24
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a0 e8       	ldi	r26, 0x80	; 128
    1b22:	bf e3       	ldi	r27, 0x3F	; 63
    1b24:	8b 87       	std	Y+11, r24	; 0x0b
    1b26:	9c 87       	std	Y+12, r25	; 0x0c
    1b28:	ad 87       	std	Y+13, r26	; 0x0d
    1b2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a e7       	ldi	r20, 0x7A	; 122
    1b3a:	53 e4       	ldi	r21, 0x43	; 67
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	8f 83       	std	Y+7, r24	; 0x07
    1b46:	98 87       	std	Y+8, r25	; 0x08
    1b48:	a9 87       	std	Y+9, r26	; 0x09
    1b4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4e:	78 85       	ldd	r23, Y+8	; 0x08
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <LCD_sendCommand+0x354>
		__ticks = 1;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	3f c0       	rjmp	.+126    	; 0x1bec <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b70:	78 85       	ldd	r23, Y+8	; 0x08
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	3f ef       	ldi	r19, 0xFF	; 255
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	57 e4       	ldi	r21, 0x47	; 71
    1b7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	4c f5       	brge	.+82     	; 0x1bd8 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e2       	ldi	r20, 0x20	; 32
    1b94:	51 e4       	ldi	r21, 0x41	; 65
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <LCD_sendCommand+0x3b4>
    1bb0:	89 e1       	ldi	r24, 0x19	; 25
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_sendCommand+0x3a2>
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <LCD_sendCommand+0x396>
    1bd6:	14 c0       	rjmp	.+40     	; 0x1c00 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <LCD_sendCommand+0x3de>
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c00:	e9 96       	adiw	r28, 0x39	; 57
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	e9 97       	sbiw	r28, 0x39	; 57
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1c28:	a8 e3       	ldi	r26, 0x38	; 56
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e8 e3       	ldi	r30, 0x38	; 56
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	82 60       	ori	r24, 0x02	; 2
    1c34:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1c36:	a8 e3       	ldi	r26, 0x38	; 56
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e8 e3       	ldi	r30, 0x38	; 56
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8b 7f       	andi	r24, 0xFB	; 251
    1c42:	8c 93       	st	X, r24
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a0 e8       	ldi	r26, 0x80	; 128
    1c4a:	bf e3       	ldi	r27, 0x3F	; 63
    1c4c:	8d ab       	std	Y+53, r24	; 0x35
    1c4e:	9e ab       	std	Y+54, r25	; 0x36
    1c50:	af ab       	std	Y+55, r26	; 0x37
    1c52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c54:	6d a9       	ldd	r22, Y+53	; 0x35
    1c56:	7e a9       	ldd	r23, Y+54	; 0x36
    1c58:	8f a9       	ldd	r24, Y+55	; 0x37
    1c5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a e7       	ldi	r20, 0x7A	; 122
    1c62:	53 e4       	ldi	r21, 0x43	; 67
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	89 ab       	std	Y+49, r24	; 0x31
    1c6e:	9a ab       	std	Y+50, r25	; 0x32
    1c70:	ab ab       	std	Y+51, r26	; 0x33
    1c72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c74:	69 a9       	ldd	r22, Y+49	; 0x31
    1c76:	7a a9       	ldd	r23, Y+50	; 0x32
    1c78:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e8       	ldi	r20, 0x80	; 128
    1c82:	5f e3       	ldi	r21, 0x3F	; 63
    1c84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c88:	88 23       	and	r24, r24
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	98 ab       	std	Y+48, r25	; 0x30
    1c92:	8f a7       	std	Y+47, r24	; 0x2f
    1c94:	3f c0       	rjmp	.+126    	; 0x1d14 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1c96:	69 a9       	ldd	r22, Y+49	; 0x31
    1c98:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	3f ef       	ldi	r19, 0xFF	; 255
    1ca2:	4f e7       	ldi	r20, 0x7F	; 127
    1ca4:	57 e4       	ldi	r21, 0x47	; 71
    1ca6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1caa:	18 16       	cp	r1, r24
    1cac:	4c f5       	brge	.+82     	; 0x1d00 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cae:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb0:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb2:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb4:	98 ad       	ldd	r25, Y+56	; 0x38
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e2       	ldi	r20, 0x20	; 32
    1cbc:	51 e4       	ldi	r21, 0x41	; 65
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	98 ab       	std	Y+48, r25	; 0x30
    1cd4:	8f a7       	std	Y+47, r24	; 0x2f
    1cd6:	0f c0       	rjmp	.+30     	; 0x1cf6 <LCD_displayCharacter+0xe4>
    1cd8:	89 e1       	ldi	r24, 0x19	; 25
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9e a7       	std	Y+46, r25	; 0x2e
    1cde:	8d a7       	std	Y+45, r24	; 0x2d
    1ce0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ce2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <LCD_displayCharacter+0xd2>
    1ce8:	9e a7       	std	Y+46, r25	; 0x2e
    1cea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cee:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	98 ab       	std	Y+48, r25	; 0x30
    1cf4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	69 f7       	brne	.-38     	; 0x1cd8 <LCD_displayCharacter+0xc6>
    1cfe:	14 c0       	rjmp	.+40     	; 0x1d28 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d00:	69 a9       	ldd	r22, Y+49	; 0x31
    1d02:	7a a9       	ldd	r23, Y+50	; 0x32
    1d04:	8b a9       	ldd	r24, Y+51	; 0x33
    1d06:	9c a9       	ldd	r25, Y+52	; 0x34
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	98 ab       	std	Y+48, r25	; 0x30
    1d12:	8f a7       	std	Y+47, r24	; 0x2f
    1d14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d16:	98 a9       	ldd	r25, Y+48	; 0x30
    1d18:	9c a7       	std	Y+44, r25	; 0x2c
    1d1a:	8b a7       	std	Y+43, r24	; 0x2b
    1d1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_displayCharacter+0x10e>
    1d24:	9c a7       	std	Y+44, r25	; 0x2c
    1d26:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1d28:	a8 e3       	ldi	r26, 0x38	; 56
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e8 e3       	ldi	r30, 0x38	; 56
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	88 60       	ori	r24, 0x08	; 8
    1d34:	8c 93       	st	X, r24
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	a0 e8       	ldi	r26, 0x80	; 128
    1d3c:	bf e3       	ldi	r27, 0x3F	; 63
    1d3e:	8f a3       	std	Y+39, r24	; 0x27
    1d40:	98 a7       	std	Y+40, r25	; 0x28
    1d42:	a9 a7       	std	Y+41, r26	; 0x29
    1d44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d46:	6f a1       	ldd	r22, Y+39	; 0x27
    1d48:	78 a5       	ldd	r23, Y+40	; 0x28
    1d4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	4a e7       	ldi	r20, 0x7A	; 122
    1d54:	53 e4       	ldi	r21, 0x43	; 67
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	8b a3       	std	Y+35, r24	; 0x23
    1d60:	9c a3       	std	Y+36, r25	; 0x24
    1d62:	ad a3       	std	Y+37, r26	; 0x25
    1d64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d66:	6b a1       	ldd	r22, Y+35	; 0x23
    1d68:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e8       	ldi	r20, 0x80	; 128
    1d74:	5f e3       	ldi	r21, 0x3F	; 63
    1d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7a:	88 23       	and	r24, r24
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9a a3       	std	Y+34, r25	; 0x22
    1d84:	89 a3       	std	Y+33, r24	; 0x21
    1d86:	3f c0       	rjmp	.+126    	; 0x1e06 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1d88:	6b a1       	ldd	r22, Y+35	; 0x23
    1d8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	3f ef       	ldi	r19, 0xFF	; 255
    1d94:	4f e7       	ldi	r20, 0x7F	; 127
    1d96:	57 e4       	ldi	r21, 0x47	; 71
    1d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	4c f5       	brge	.+82     	; 0x1df2 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da0:	6f a1       	ldd	r22, Y+39	; 0x27
    1da2:	78 a5       	ldd	r23, Y+40	; 0x28
    1da4:	89 a5       	ldd	r24, Y+41	; 0x29
    1da6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	51 e4       	ldi	r21, 0x41	; 65
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9a a3       	std	Y+34, r25	; 0x22
    1dc6:	89 a3       	std	Y+33, r24	; 0x21
    1dc8:	0f c0       	rjmp	.+30     	; 0x1de8 <LCD_displayCharacter+0x1d6>
    1dca:	89 e1       	ldi	r24, 0x19	; 25
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	98 a3       	std	Y+32, r25	; 0x20
    1dd0:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dd4:	98 a1       	ldd	r25, Y+32	; 0x20
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_displayCharacter+0x1c4>
    1dda:	98 a3       	std	Y+32, r25	; 0x20
    1ddc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dde:	89 a1       	ldd	r24, Y+33	; 0x21
    1de0:	9a a1       	ldd	r25, Y+34	; 0x22
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	9a a3       	std	Y+34, r25	; 0x22
    1de6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dea:	9a a1       	ldd	r25, Y+34	; 0x22
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	69 f7       	brne	.-38     	; 0x1dca <LCD_displayCharacter+0x1b8>
    1df0:	14 c0       	rjmp	.+40     	; 0x1e1a <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df2:	6b a1       	ldd	r22, Y+35	; 0x23
    1df4:	7c a1       	ldd	r23, Y+36	; 0x24
    1df6:	8d a1       	ldd	r24, Y+37	; 0x25
    1df8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9a a3       	std	Y+34, r25	; 0x22
    1e04:	89 a3       	std	Y+33, r24	; 0x21
    1e06:	89 a1       	ldd	r24, Y+33	; 0x21
    1e08:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_displayCharacter+0x200>
    1e16:	9e 8f       	std	Y+30, r25	; 0x1e
    1e18:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1e1a:	eb e3       	ldi	r30, 0x3B	; 59
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e20:	80 83       	st	Z, r24
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	a0 e8       	ldi	r26, 0x80	; 128
    1e28:	bf e3       	ldi	r27, 0x3F	; 63
    1e2a:	89 8f       	std	Y+25, r24	; 0x19
    1e2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e32:	69 8d       	ldd	r22, Y+25	; 0x19
    1e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	4a e7       	ldi	r20, 0x7A	; 122
    1e40:	53 e4       	ldi	r21, 0x43	; 67
    1e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	8d 8b       	std	Y+21, r24	; 0x15
    1e4c:	9e 8b       	std	Y+22, r25	; 0x16
    1e4e:	af 8b       	std	Y+23, r26	; 0x17
    1e50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e52:	6d 89       	ldd	r22, Y+21	; 0x15
    1e54:	7e 89       	ldd	r23, Y+22	; 0x16
    1e56:	8f 89       	ldd	r24, Y+23	; 0x17
    1e58:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e8       	ldi	r20, 0x80	; 128
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	2c f4       	brge	.+10     	; 0x1e74 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9c 8b       	std	Y+20, r25	; 0x14
    1e70:	8b 8b       	std	Y+19, r24	; 0x13
    1e72:	3f c0       	rjmp	.+126    	; 0x1ef2 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1e74:	6d 89       	ldd	r22, Y+21	; 0x15
    1e76:	7e 89       	ldd	r23, Y+22	; 0x16
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	3f ef       	ldi	r19, 0xFF	; 255
    1e80:	4f e7       	ldi	r20, 0x7F	; 127
    1e82:	57 e4       	ldi	r21, 0x47	; 71
    1e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e88:	18 16       	cp	r1, r24
    1e8a:	4c f5       	brge	.+82     	; 0x1ede <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e2       	ldi	r20, 0x20	; 32
    1e9a:	51 e4       	ldi	r21, 0x41	; 65
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
    1eb4:	0f c0       	rjmp	.+30     	; 0x1ed4 <LCD_displayCharacter+0x2c2>
    1eb6:	89 e1       	ldi	r24, 0x19	; 25
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9a 8b       	std	Y+18, r25	; 0x12
    1ebc:	89 8b       	std	Y+17, r24	; 0x11
    1ebe:	89 89       	ldd	r24, Y+17	; 0x11
    1ec0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_displayCharacter+0x2b0>
    1ec6:	9a 8b       	std	Y+18, r25	; 0x12
    1ec8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	9c 8b       	std	Y+20, r25	; 0x14
    1ed2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	69 f7       	brne	.-38     	; 0x1eb6 <LCD_displayCharacter+0x2a4>
    1edc:	14 c0       	rjmp	.+40     	; 0x1f06 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ede:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	98 8b       	std	Y+16, r25	; 0x10
    1ef8:	8f 87       	std	Y+15, r24	; 0x0f
    1efa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efc:	98 89       	ldd	r25, Y+16	; 0x10
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <LCD_displayCharacter+0x2ec>
    1f02:	98 8b       	std	Y+16, r25	; 0x10
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1f06:	a8 e3       	ldi	r26, 0x38	; 56
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e8 e3       	ldi	r30, 0x38	; 56
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	87 7f       	andi	r24, 0xF7	; 247
    1f12:	8c 93       	st	X, r24
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a0 e8       	ldi	r26, 0x80	; 128
    1f1a:	bf e3       	ldi	r27, 0x3F	; 63
    1f1c:	8b 87       	std	Y+11, r24	; 0x0b
    1f1e:	9c 87       	std	Y+12, r25	; 0x0c
    1f20:	ad 87       	std	Y+13, r26	; 0x0d
    1f22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a e7       	ldi	r20, 0x7A	; 122
    1f32:	53 e4       	ldi	r21, 0x43	; 67
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	8f 83       	std	Y+7, r24	; 0x07
    1f3e:	98 87       	std	Y+8, r25	; 0x08
    1f40:	a9 87       	std	Y+9, r26	; 0x09
    1f42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f44:	6f 81       	ldd	r22, Y+7	; 0x07
    1f46:	78 85       	ldd	r23, Y+8	; 0x08
    1f48:	89 85       	ldd	r24, Y+9	; 0x09
    1f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1f66:	6f 81       	ldd	r22, Y+7	; 0x07
    1f68:	78 85       	ldd	r23, Y+8	; 0x08
    1f6a:	89 85       	ldd	r24, Y+9	; 0x09
    1f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9e 83       	std	Y+6, r25	; 0x06
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <LCD_displayCharacter+0x3b4>
    1fa8:	89 e1       	ldi	r24, 0x19	; 25
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9c 83       	std	Y+4, r25	; 0x04
    1fae:	8b 83       	std	Y+3, r24	; 0x03
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_displayCharacter+0x3a2>
    1fb8:	9c 83       	std	Y+4, r25	; 0x04
    1fba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <LCD_displayCharacter+0x396>
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd2:	78 85       	ldd	r23, Y+8	; 0x08
    1fd4:	89 85       	ldd	r24, Y+9	; 0x09
    1fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9e 83       	std	Y+6, r25	; 0x06
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	9a 83       	std	Y+2, r25	; 0x02
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <LCD_displayCharacter+0x3de>
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
    1ff6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ff8:	e9 96       	adiw	r28, 0x39	; 57
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <LCD_displayString>:

void LCD_displayString(const uint8 *Str)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <LCD_displayString+0x6>
    2010:	0f 92       	push	r0
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	9b 83       	std	Y+3, r25	; 0x03
    2018:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    201a:	19 82       	std	Y+1, r1	; 0x01
    201c:	0e c0       	rjmp	.+28     	; 0x203a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	9b 81       	ldd	r25, Y+3	; 0x03
    2028:	fc 01       	movw	r30, r24
    202a:	e2 0f       	add	r30, r18
    202c:	f3 1f       	adc	r31, r19
    202e:	80 81       	ld	r24, Z
    2030:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_displayCharacter>
		i++;
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	8f 5f       	subi	r24, 0xFF	; 255
    2038:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	9b 81       	ldd	r25, Y+3	; 0x03
    2044:	fc 01       	movw	r30, r24
    2046:	e2 0f       	add	r30, r18
    2048:	f3 1f       	adc	r31, r19
    204a:	80 81       	ld	r24, Z
    204c:	88 23       	and	r24, r24
    204e:	39 f7       	brne	.-50     	; 0x201e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <LCD_goToRowColumn+0x6>
    2062:	00 d0       	rcall	.+0      	; 0x2064 <LCD_goToRowColumn+0x8>
    2064:	0f 92       	push	r0
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	8a 83       	std	Y+2, r24	; 0x02
    206c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	3d 83       	std	Y+5, r19	; 0x05
    2076:	2c 83       	std	Y+4, r18	; 0x04
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	9d 81       	ldd	r25, Y+5	; 0x05
    207c:	81 30       	cpi	r24, 0x01	; 1
    207e:	91 05       	cpc	r25, r1
    2080:	c1 f0       	breq	.+48     	; 0x20b2 <LCD_goToRowColumn+0x56>
    2082:	2c 81       	ldd	r18, Y+4	; 0x04
    2084:	3d 81       	ldd	r19, Y+5	; 0x05
    2086:	22 30       	cpi	r18, 0x02	; 2
    2088:	31 05       	cpc	r19, r1
    208a:	2c f4       	brge	.+10     	; 0x2096 <LCD_goToRowColumn+0x3a>
    208c:	8c 81       	ldd	r24, Y+4	; 0x04
    208e:	9d 81       	ldd	r25, Y+5	; 0x05
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	61 f0       	breq	.+24     	; 0x20ac <LCD_goToRowColumn+0x50>
    2094:	19 c0       	rjmp	.+50     	; 0x20c8 <LCD_goToRowColumn+0x6c>
    2096:	2c 81       	ldd	r18, Y+4	; 0x04
    2098:	3d 81       	ldd	r19, Y+5	; 0x05
    209a:	22 30       	cpi	r18, 0x02	; 2
    209c:	31 05       	cpc	r19, r1
    209e:	69 f0       	breq	.+26     	; 0x20ba <LCD_goToRowColumn+0x5e>
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	83 30       	cpi	r24, 0x03	; 3
    20a6:	91 05       	cpc	r25, r1
    20a8:	61 f0       	breq	.+24     	; 0x20c2 <LCD_goToRowColumn+0x66>
    20aa:	0e c0       	rjmp	.+28     	; 0x20c8 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	0b c0       	rjmp	.+22     	; 0x20c8 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	80 5c       	subi	r24, 0xC0	; 192
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	07 c0       	rjmp	.+14     	; 0x20c8 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	80 5f       	subi	r24, 0xF0	; 240
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	03 c0       	rjmp	.+6      	; 0x20c8 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	80 5b       	subi	r24, 0xB0	; 176
    20c6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	80 68       	ori	r24, 0x80	; 128
    20cc:	0e 94 0d 0c 	call	0x181a	; 0x181a <LCD_sendCommand>
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *Str)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <LCD_displayStringRowColumn+0x6>
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <LCD_displayStringRowColumn+0x8>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	6a 83       	std	Y+2, r22	; 0x02
    20f0:	5c 83       	std	Y+4, r21	; 0x04
    20f2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	6a 81       	ldd	r22, Y+2	; 0x02
    20f8:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	0e 94 05 10 	call	0x200a	; 0x200a <LCD_displayString>
}
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <LCD_integerToString>:

void LCD_integerToString(int data)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	62 97       	sbiw	r28, 0x12	; 18
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	9a 8b       	std	Y+18, r25	; 0x12
    2128:	89 8b       	std	Y+17, r24	; 0x11
   uint8 buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    212a:	89 89       	ldd	r24, Y+17	; 0x11
    212c:	9a 89       	ldd	r25, Y+18	; 0x12
    212e:	9e 01       	movw	r18, r28
    2130:	2f 5f       	subi	r18, 0xFF	; 255
    2132:	3f 4f       	sbci	r19, 0xFF	; 255
    2134:	b9 01       	movw	r22, r18
    2136:	4a e0       	ldi	r20, 0x0A	; 10
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	0e 94 9c 11 	call	0x2338	; 0x2338 <itoa>
   LCD_displayString(buff);
    213e:	ce 01       	movw	r24, r28
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	0e 94 05 10 	call	0x200a	; 0x200a <LCD_displayString>
}
    2146:	62 96       	adiw	r28, 0x12	; 18
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	0e 94 0d 0c 	call	0x181a	; 0x181a <LCD_sendCommand>
}
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <UART_init>:


#include "uart.h"

void UART_init(void)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 - Double the USART transmission speed*/
	SET_BIT(UCSRA, U2X);
    2174:	ab e2       	ldi	r26, 0x2B	; 43
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	eb e2       	ldi	r30, 0x2B	; 43
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	82 60       	ori	r24, 0x02	; 2
    2180:	8c 93       	st	X, r24

	/* Enable The receiver and transmitter */
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2182:	ea e2       	ldi	r30, 0x2A	; 42
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	88 e1       	ldi	r24, 0x18	; 24
    2188:	80 83       	st	Z, r24

	/* UCSZ0 =1 and UCSZ1 =1 UCSZ2 =0 - 8-bit (character size) in a frame */
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
    218a:	e0 e4       	ldi	r30, 0x40	; 64
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	86 e8       	ldi	r24, 0x86	; 134
    2190:	80 83       	st	Z, r24

	UBRRH= 0;
    2192:	e0 e4       	ldi	r30, 0x40	; 64
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	10 82       	st	Z, r1

	/* UBBRL=13 for 9600kb/s Baud Rate */
	UBRRL = 103;
    2198:	e9 e2       	ldi	r30, 0x29	; 41
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	87 e6       	ldi	r24, 0x67	; 103
    219e:	80 83       	st	Z, r24

}
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <UART_sendByte>:
 *Arguments:
 *uint8 a_data: contains the byte that will be sent.
 *
 *******************************************************************************/
void UART_sendByte(uint8 a_data)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA, UDRE)){}
    21b2:	eb e2       	ldi	r30, 0x2B	; 43
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	88 2f       	mov	r24, r24
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	80 72       	andi	r24, 0x20	; 32
    21be:	90 70       	andi	r25, 0x00	; 0
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	b9 f3       	breq	.-18     	; 0x21b2 <UART_sendByte+0xc>
	UDR = a_data;
    21c4:	ec e2       	ldi	r30, 0x2C	; 44
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	80 83       	st	Z, r24
}
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <UART_receiveByte>:
 *Return type: char
 *Return : the value of UDR
 *
 *******************************************************************************/
char UART_receiveByte(void)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC)){};
    21dc:	eb e2       	ldi	r30, 0x2B	; 43
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	88 23       	and	r24, r24
    21e4:	dc f7       	brge	.-10     	; 0x21dc <UART_receiveByte+0x8>
	return UDR;
    21e6:	ec e2       	ldi	r30, 0x2C	; 44
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
}
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <UART_sendString>:
 *Arguments: const char *a_Str
 *
 *
 *******************************************************************************/
void UART_sendString(const char *a_Str)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <UART_sendString+0x6>
    21f8:	0f 92       	push	r0
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	9b 83       	std	Y+3, r25	; 0x03
    2200:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2202:	19 82       	std	Y+1, r1	; 0x01
    2204:	0e c0       	rjmp	.+28     	; 0x2222 <UART_sendString+0x30>
	while(a_Str[i] != '\0')
	{
		UART_sendByte(a_Str[i]);
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	9b 81       	ldd	r25, Y+3	; 0x03
    2210:	fc 01       	movw	r30, r24
    2212:	e2 0f       	add	r30, r18
    2214:	f3 1f       	adc	r31, r19
    2216:	80 81       	ld	r24, Z
    2218:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <UART_sendByte>
		i++;
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	8f 5f       	subi	r24, 0xFF	; 255
    2220:	89 83       	std	Y+1, r24	; 0x01
 *
 *******************************************************************************/
void UART_sendString(const char *a_Str)
{
	uint8 i = 0;
	while(a_Str[i] != '\0')
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	9b 81       	ldd	r25, Y+3	; 0x03
    222c:	fc 01       	movw	r30, r24
    222e:	e2 0f       	add	r30, r18
    2230:	f3 1f       	adc	r31, r19
    2232:	80 81       	ld	r24, Z
    2234:	88 23       	and	r24, r24
    2236:	39 f7       	brne	.-50     	; 0x2206 <UART_sendString+0x14>
	{
		UART_sendByte(a_Str[i]);
		i++;
	}
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <UART_receiveString>:

void UART_receiveString(char *Str)
{
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	00 d0       	rcall	.+0      	; 0x224e <UART_receiveString+0xa>
    224e:	0f 92       	push	r0
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	9b 83       	std	Y+3, r25	; 0x03
    2256:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2258:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	8c 01       	movw	r16, r24
    2266:	02 0f       	add	r16, r18
    2268:	13 1f       	adc	r17, r19
    226a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_receiveByte>
    226e:	f8 01       	movw	r30, r16
    2270:	80 83       	st	Z, r24
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	9b 81       	ldd	r25, Y+3	; 0x03
    2284:	8c 01       	movw	r16, r24
    2286:	02 0f       	add	r16, r18
    2288:	13 1f       	adc	r17, r19
    228a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_receiveByte>
    228e:	f8 01       	movw	r30, r16
    2290:	80 83       	st	Z, r24

void UART_receiveString(char *Str)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte();
	while(Str[i] != '#')
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	9b 81       	ldd	r25, Y+3	; 0x03
    229c:	fc 01       	movw	r30, r24
    229e:	e2 0f       	add	r30, r18
    22a0:	f3 1f       	adc	r31, r19
    22a2:	80 81       	ld	r24, Z
    22a4:	83 32       	cpi	r24, 0x23	; 35
    22a6:	31 f7       	brne	.-52     	; 0x2274 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	Str[i] = '\0';
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	9b 81       	ldd	r25, Y+3	; 0x03
    22b2:	fc 01       	movw	r30, r24
    22b4:	e2 0f       	add	r30, r18
    22b6:	f3 1f       	adc	r31, r19
    22b8:	10 82       	st	Z, r1
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <__prologue_saves__>:
    22ca:	2f 92       	push	r2
    22cc:	3f 92       	push	r3
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	ca 1b       	sub	r28, r26
    22f4:	db 0b       	sbc	r29, r27
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	09 94       	ijmp

00002302 <__epilogue_restores__>:
    2302:	2a 88       	ldd	r2, Y+18	; 0x12
    2304:	39 88       	ldd	r3, Y+17	; 0x11
    2306:	48 88       	ldd	r4, Y+16	; 0x10
    2308:	5f 84       	ldd	r5, Y+15	; 0x0f
    230a:	6e 84       	ldd	r6, Y+14	; 0x0e
    230c:	7d 84       	ldd	r7, Y+13	; 0x0d
    230e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2310:	9b 84       	ldd	r9, Y+11	; 0x0b
    2312:	aa 84       	ldd	r10, Y+10	; 0x0a
    2314:	b9 84       	ldd	r11, Y+9	; 0x09
    2316:	c8 84       	ldd	r12, Y+8	; 0x08
    2318:	df 80       	ldd	r13, Y+7	; 0x07
    231a:	ee 80       	ldd	r14, Y+6	; 0x06
    231c:	fd 80       	ldd	r15, Y+5	; 0x05
    231e:	0c 81       	ldd	r16, Y+4	; 0x04
    2320:	1b 81       	ldd	r17, Y+3	; 0x03
    2322:	aa 81       	ldd	r26, Y+2	; 0x02
    2324:	b9 81       	ldd	r27, Y+1	; 0x01
    2326:	ce 0f       	add	r28, r30
    2328:	d1 1d       	adc	r29, r1
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	ed 01       	movw	r28, r26
    2336:	08 95       	ret

00002338 <itoa>:
    2338:	fb 01       	movw	r30, r22
    233a:	9f 01       	movw	r18, r30
    233c:	e8 94       	clt
    233e:	42 30       	cpi	r20, 0x02	; 2
    2340:	c4 f0       	brlt	.+48     	; 0x2372 <itoa+0x3a>
    2342:	45 32       	cpi	r20, 0x25	; 37
    2344:	b4 f4       	brge	.+44     	; 0x2372 <itoa+0x3a>
    2346:	4a 30       	cpi	r20, 0x0A	; 10
    2348:	29 f4       	brne	.+10     	; 0x2354 <itoa+0x1c>
    234a:	97 fb       	bst	r25, 7
    234c:	1e f4       	brtc	.+6      	; 0x2354 <itoa+0x1c>
    234e:	90 95       	com	r25
    2350:	81 95       	neg	r24
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	64 2f       	mov	r22, r20
    2356:	77 27       	eor	r23, r23
    2358:	0e 94 cd 11 	call	0x239a	; 0x239a <__udivmodhi4>
    235c:	80 5d       	subi	r24, 0xD0	; 208
    235e:	8a 33       	cpi	r24, 0x3A	; 58
    2360:	0c f0       	brlt	.+2      	; 0x2364 <itoa+0x2c>
    2362:	89 5d       	subi	r24, 0xD9	; 217
    2364:	81 93       	st	Z+, r24
    2366:	cb 01       	movw	r24, r22
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	a1 f7       	brne	.-24     	; 0x2354 <itoa+0x1c>
    236c:	16 f4       	brtc	.+4      	; 0x2372 <itoa+0x3a>
    236e:	5d e2       	ldi	r21, 0x2D	; 45
    2370:	51 93       	st	Z+, r21
    2372:	10 82       	st	Z, r1
    2374:	c9 01       	movw	r24, r18
    2376:	0c 94 bd 11 	jmp	0x237a	; 0x237a <strrev>

0000237a <strrev>:
    237a:	dc 01       	movw	r26, r24
    237c:	fc 01       	movw	r30, r24
    237e:	67 2f       	mov	r22, r23
    2380:	71 91       	ld	r23, Z+
    2382:	77 23       	and	r23, r23
    2384:	e1 f7       	brne	.-8      	; 0x237e <strrev+0x4>
    2386:	32 97       	sbiw	r30, 0x02	; 2
    2388:	04 c0       	rjmp	.+8      	; 0x2392 <strrev+0x18>
    238a:	7c 91       	ld	r23, X
    238c:	6d 93       	st	X+, r22
    238e:	70 83       	st	Z, r23
    2390:	62 91       	ld	r22, -Z
    2392:	ae 17       	cp	r26, r30
    2394:	bf 07       	cpc	r27, r31
    2396:	c8 f3       	brcs	.-14     	; 0x238a <strrev+0x10>
    2398:	08 95       	ret

0000239a <__udivmodhi4>:
    239a:	aa 1b       	sub	r26, r26
    239c:	bb 1b       	sub	r27, r27
    239e:	51 e1       	ldi	r21, 0x11	; 17
    23a0:	07 c0       	rjmp	.+14     	; 0x23b0 <__udivmodhi4_ep>

000023a2 <__udivmodhi4_loop>:
    23a2:	aa 1f       	adc	r26, r26
    23a4:	bb 1f       	adc	r27, r27
    23a6:	a6 17       	cp	r26, r22
    23a8:	b7 07       	cpc	r27, r23
    23aa:	10 f0       	brcs	.+4      	; 0x23b0 <__udivmodhi4_ep>
    23ac:	a6 1b       	sub	r26, r22
    23ae:	b7 0b       	sbc	r27, r23

000023b0 <__udivmodhi4_ep>:
    23b0:	88 1f       	adc	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	5a 95       	dec	r21
    23b6:	a9 f7       	brne	.-22     	; 0x23a2 <__udivmodhi4_loop>
    23b8:	80 95       	com	r24
    23ba:	90 95       	com	r25
    23bc:	bc 01       	movw	r22, r24
    23be:	cd 01       	movw	r24, r26
    23c0:	08 95       	ret

000023c2 <_exit>:
    23c2:	f8 94       	cli

000023c4 <__stop_program>:
    23c4:	ff cf       	rjmp	.-2      	; 0x23c4 <__stop_program>
