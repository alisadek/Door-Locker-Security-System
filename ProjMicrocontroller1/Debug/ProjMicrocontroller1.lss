
ProjMicrocontroller1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000359e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  0000359e  00003632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800172  00800172  00003744  2**0
                  ALLOC
  3 .stab         00003120  00000000  00000000  00003744  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000114b  00000000  00000000  00006864  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000079af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000098a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a793  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b540  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b92d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c0fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 11 	call	0x2256	; 0x2256 <main>
      8a:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e6       	ldi	r26, 0x62	; 98
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <setPassword>:
 * from the user.
 *
 *******************************************************************************/

void setPassword(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6d 97       	sbiw	r28, 0x1d	; 29
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 i=1;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	8d 8f       	std	Y+29, r24	; 0x1d
	g_passLength=1;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	80 93 a3 01 	sts	0x01A3, r24

	LCD_clearScreen();
     b64:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
	LCD_displayString("Enter New Pass");
     b68:	80 e6       	ldi	r24, 0x60	; 96
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
	LCD_goToRowColumn(1,0);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>

	key=KeyPad_getPressedKey();
     b78:	0e 94 b8 12 	call	0x2570	; 0x2570 <KeyPad_getPressedKey>
     b7c:	80 93 72 01 	sts	0x0172, r24
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a8 e4       	ldi	r26, 0x48	; 72
     b86:	b2 e4       	ldi	r27, 0x42	; 66
     b88:	89 8f       	std	Y+25, r24	; 0x19
     b8a:	9a 8f       	std	Y+26, r25	; 0x1a
     b8c:	ab 8f       	std	Y+27, r26	; 0x1b
     b8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b90:	69 8d       	ldd	r22, Y+25	; 0x19
     b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	4a ef       	ldi	r20, 0xFA	; 250
     b9e:	54 e4       	ldi	r21, 0x44	; 68
     ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	8d 8b       	std	Y+21, r24	; 0x15
     baa:	9e 8b       	std	Y+22, r25	; 0x16
     bac:	af 8b       	std	Y+23, r26	; 0x17
     bae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bb0:	6d 89       	ldd	r22, Y+21	; 0x15
     bb2:	7e 89       	ldd	r23, Y+22	; 0x16
     bb4:	8f 89       	ldd	r24, Y+23	; 0x17
     bb6:	98 8d       	ldd	r25, Y+24	; 0x18
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e8       	ldi	r20, 0x80	; 128
     bbe:	5f e3       	ldi	r21, 0x3F	; 63
     bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc4:	88 23       	and	r24, r24
     bc6:	2c f4       	brge	.+10     	; 0xbd2 <setPassword+0x8c>
		__ticks = 1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	9c 8b       	std	Y+20, r25	; 0x14
     bce:	8b 8b       	std	Y+19, r24	; 0x13
     bd0:	3f c0       	rjmp	.+126    	; 0xc50 <setPassword+0x10a>
	else if (__tmp > 65535)
     bd2:	6d 89       	ldd	r22, Y+21	; 0x15
     bd4:	7e 89       	ldd	r23, Y+22	; 0x16
     bd6:	8f 89       	ldd	r24, Y+23	; 0x17
     bd8:	98 8d       	ldd	r25, Y+24	; 0x18
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	3f ef       	ldi	r19, 0xFF	; 255
     bde:	4f e7       	ldi	r20, 0x7F	; 127
     be0:	57 e4       	ldi	r21, 0x47	; 71
     be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be6:	18 16       	cp	r1, r24
     be8:	4c f5       	brge	.+82     	; 0xc3c <setPassword+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bea:	69 8d       	ldd	r22, Y+25	; 0x19
     bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e2       	ldi	r20, 0x20	; 32
     bf8:	51 e4       	ldi	r21, 0x41	; 65
     bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	bc 01       	movw	r22, r24
     c04:	cd 01       	movw	r24, r26
     c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	9c 8b       	std	Y+20, r25	; 0x14
     c10:	8b 8b       	std	Y+19, r24	; 0x13
     c12:	0f c0       	rjmp	.+30     	; 0xc32 <setPassword+0xec>
     c14:	88 ec       	ldi	r24, 0xC8	; 200
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	9a 8b       	std	Y+18, r25	; 0x12
     c1a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1c:	89 89       	ldd	r24, Y+17	; 0x11
     c1e:	9a 89       	ldd	r25, Y+18	; 0x12
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <setPassword+0xda>
     c24:	9a 8b       	std	Y+18, r25	; 0x12
     c26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c28:	8b 89       	ldd	r24, Y+19	; 0x13
     c2a:	9c 89       	ldd	r25, Y+20	; 0x14
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	9c 8b       	std	Y+20, r25	; 0x14
     c30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c32:	8b 89       	ldd	r24, Y+19	; 0x13
     c34:	9c 89       	ldd	r25, Y+20	; 0x14
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	69 f7       	brne	.-38     	; 0xc14 <setPassword+0xce>
     c3a:	14 c0       	rjmp	.+40     	; 0xc64 <setPassword+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3c:	6d 89       	ldd	r22, Y+21	; 0x15
     c3e:	7e 89       	ldd	r23, Y+22	; 0x16
     c40:	8f 89       	ldd	r24, Y+23	; 0x17
     c42:	98 8d       	ldd	r25, Y+24	; 0x18
     c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9c 8b       	std	Y+20, r25	; 0x14
     c4e:	8b 8b       	std	Y+19, r24	; 0x13
     c50:	8b 89       	ldd	r24, Y+19	; 0x13
     c52:	9c 89       	ldd	r25, Y+20	; 0x14
     c54:	98 8b       	std	Y+16, r25	; 0x10
     c56:	8f 87       	std	Y+15, r24	; 0x0f
     c58:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5a:	98 89       	ldd	r25, Y+16	; 0x10
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <setPassword+0x116>
     c60:	98 8b       	std	Y+16, r25	; 0x10
     c62:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	if(key>='0' && key <= '9')
     c64:	80 91 72 01 	lds	r24, 0x0172
     c68:	80 33       	cpi	r24, 0x30	; 48
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <setPassword+0x128>
     c6c:	97 c0       	rjmp	.+302    	; 0xd9c <setPassword+0x256>
     c6e:	80 91 72 01 	lds	r24, 0x0172
     c72:	8a 33       	cpi	r24, 0x3A	; 58
     c74:	08 f0       	brcs	.+2      	; 0xc78 <setPassword+0x132>
     c76:	92 c0       	rjmp	.+292    	; 0xd9c <setPassword+0x256>
	{
		LCD_displayCharacter('*');
     c78:	8a e2       	ldi	r24, 0x2A	; 42
     c7a:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayCharacter>
		g_enteredPass[0] = key;
     c7e:	80 91 72 01 	lds	r24, 0x0172
     c82:	80 93 73 01 	sts	0x0173, r24
     c86:	8a c0       	rjmp	.+276    	; 0xd9c <setPassword+0x256>
	}
	while (key>='0' && key <= '9')
	{
		key= KeyPad_getPressedKey();
     c88:	0e 94 b8 12 	call	0x2570	; 0x2570 <KeyPad_getPressedKey>
     c8c:	80 93 72 01 	sts	0x0172, r24
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a8 e4       	ldi	r26, 0x48	; 72
     c96:	b2 e4       	ldi	r27, 0x42	; 66
     c98:	8b 87       	std	Y+11, r24	; 0x0b
     c9a:	9c 87       	std	Y+12, r25	; 0x0c
     c9c:	ad 87       	std	Y+13, r26	; 0x0d
     c9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	4a ef       	ldi	r20, 0xFA	; 250
     cae:	54 e4       	ldi	r21, 0x44	; 68
     cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	8f 83       	std	Y+7, r24	; 0x07
     cba:	98 87       	std	Y+8, r25	; 0x08
     cbc:	a9 87       	std	Y+9, r26	; 0x09
     cbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cc0:	6f 81       	ldd	r22, Y+7	; 0x07
     cc2:	78 85       	ldd	r23, Y+8	; 0x08
     cc4:	89 85       	ldd	r24, Y+9	; 0x09
     cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e8       	ldi	r20, 0x80	; 128
     cce:	5f e3       	ldi	r21, 0x3F	; 63
     cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd4:	88 23       	and	r24, r24
     cd6:	2c f4       	brge	.+10     	; 0xce2 <setPassword+0x19c>
		__ticks = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9e 83       	std	Y+6, r25	; 0x06
     cde:	8d 83       	std	Y+5, r24	; 0x05
     ce0:	3f c0       	rjmp	.+126    	; 0xd60 <setPassword+0x21a>
	else if (__tmp > 65535)
     ce2:	6f 81       	ldd	r22, Y+7	; 0x07
     ce4:	78 85       	ldd	r23, Y+8	; 0x08
     ce6:	89 85       	ldd	r24, Y+9	; 0x09
     ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	3f ef       	ldi	r19, 0xFF	; 255
     cee:	4f e7       	ldi	r20, 0x7F	; 127
     cf0:	57 e4       	ldi	r21, 0x47	; 71
     cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf6:	18 16       	cp	r1, r24
     cf8:	4c f5       	brge	.+82     	; 0xd4c <setPassword+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     d00:	9e 85       	ldd	r25, Y+14	; 0x0e
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e2       	ldi	r20, 0x20	; 32
     d08:	51 e4       	ldi	r21, 0x41	; 65
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	bc 01       	movw	r22, r24
     d14:	cd 01       	movw	r24, r26
     d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	9e 83       	std	Y+6, r25	; 0x06
     d20:	8d 83       	std	Y+5, r24	; 0x05
     d22:	0f c0       	rjmp	.+30     	; 0xd42 <setPassword+0x1fc>
     d24:	88 ec       	ldi	r24, 0xC8	; 200
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9c 83       	std	Y+4, r25	; 0x04
     d2a:	8b 83       	std	Y+3, r24	; 0x03
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <setPassword+0x1ea>
     d34:	9c 83       	std	Y+4, r25	; 0x04
     d36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	69 f7       	brne	.-38     	; 0xd24 <setPassword+0x1de>
     d4a:	14 c0       	rjmp	.+40     	; 0xd74 <setPassword+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4c:	6f 81       	ldd	r22, Y+7	; 0x07
     d4e:	78 85       	ldd	r23, Y+8	; 0x08
     d50:	89 85       	ldd	r24, Y+9	; 0x09
     d52:	9a 85       	ldd	r25, Y+10	; 0x0a
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <setPassword+0x226>
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		LCD_displayCharacter('*');
     d74:	8a e2       	ldi	r24, 0x2A	; 42
     d76:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayCharacter>
		g_enteredPass[i] = key;
     d7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	20 91 72 01 	lds	r18, 0x0172
     d84:	fc 01       	movw	r30, r24
     d86:	ed 58       	subi	r30, 0x8D	; 141
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	20 83       	st	Z, r18
		i++;
     d8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	8d 8f       	std	Y+29, r24	; 0x1d
		g_passLength++;
     d92:	80 91 a3 01 	lds	r24, 0x01A3
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	80 93 a3 01 	sts	0x01A3, r24
	if(key>='0' && key <= '9')
	{
		LCD_displayCharacter('*');
		g_enteredPass[0] = key;
	}
	while (key>='0' && key <= '9')
     d9c:	80 91 72 01 	lds	r24, 0x0172
     da0:	80 33       	cpi	r24, 0x30	; 48
     da2:	28 f0       	brcs	.+10     	; 0xdae <setPassword+0x268>
     da4:	80 91 72 01 	lds	r24, 0x0172
     da8:	8a 33       	cpi	r24, 0x3A	; 58
     daa:	08 f4       	brcc	.+2      	; 0xdae <setPassword+0x268>
     dac:	6d cf       	rjmp	.-294    	; 0xc88 <setPassword+0x142>
		LCD_displayCharacter('*');
		g_enteredPass[i] = key;
		i++;
		g_passLength++;
	}
	if(key == '=')
     dae:	80 91 72 01 	lds	r24, 0x0172
     db2:	8d 33       	cpi	r24, 0x3D	; 61
     db4:	21 f4       	brne	.+8      	; 0xdbe <setPassword+0x278>
	{
		LCD_clearScreen();
     db6:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
		confirmSetPassword();
     dba:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <confirmSetPassword>
	}
}
     dbe:	6d 96       	adiw	r28, 0x1d	; 29
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <confirmSetPassword>:
 * success, and allows user to retry for 2 more times in case of failure.
 *
 *******************************************************************************/

void confirmSetPassword(void)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	ac 97       	sbiw	r28, 0x2c	; 44
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
	uint8 i,j;
	i=1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	8c a7       	std	Y+44, r24	; 0x2c
	g_pass2Length=1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 a4 01 	sts	0x01A4, r24

	LCD_goToRowColumn(0,0);
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
	LCD_displayString("Re-Enter Pass");
     df6:	8f e6       	ldi	r24, 0x6F	; 111
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
	LCD_goToRowColumn(1,0);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>

	key=KeyPad_getPressedKey();
     e06:	0e 94 b8 12 	call	0x2570	; 0x2570 <KeyPad_getPressedKey>
     e0a:	80 93 72 01 	sts	0x0172, r24
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	a8 e4       	ldi	r26, 0x48	; 72
     e14:	b2 e4       	ldi	r27, 0x42	; 66
     e16:	8f a3       	std	Y+39, r24	; 0x27
     e18:	98 a7       	std	Y+40, r25	; 0x28
     e1a:	a9 a7       	std	Y+41, r26	; 0x29
     e1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1e:	6f a1       	ldd	r22, Y+39	; 0x27
     e20:	78 a5       	ldd	r23, Y+40	; 0x28
     e22:	89 a5       	ldd	r24, Y+41	; 0x29
     e24:	9a a5       	ldd	r25, Y+42	; 0x2a
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	4a ef       	ldi	r20, 0xFA	; 250
     e2c:	54 e4       	ldi	r21, 0x44	; 68
     e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	8b a3       	std	Y+35, r24	; 0x23
     e38:	9c a3       	std	Y+36, r25	; 0x24
     e3a:	ad a3       	std	Y+37, r26	; 0x25
     e3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e3e:	6b a1       	ldd	r22, Y+35	; 0x23
     e40:	7c a1       	ldd	r23, Y+36	; 0x24
     e42:	8d a1       	ldd	r24, Y+37	; 0x25
     e44:	9e a1       	ldd	r25, Y+38	; 0x26
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e8       	ldi	r20, 0x80	; 128
     e4c:	5f e3       	ldi	r21, 0x3F	; 63
     e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e52:	88 23       	and	r24, r24
     e54:	2c f4       	brge	.+10     	; 0xe60 <confirmSetPassword+0x90>
		__ticks = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9a a3       	std	Y+34, r25	; 0x22
     e5c:	89 a3       	std	Y+33, r24	; 0x21
     e5e:	3f c0       	rjmp	.+126    	; 0xede <confirmSetPassword+0x10e>
	else if (__tmp > 65535)
     e60:	6b a1       	ldd	r22, Y+35	; 0x23
     e62:	7c a1       	ldd	r23, Y+36	; 0x24
     e64:	8d a1       	ldd	r24, Y+37	; 0x25
     e66:	9e a1       	ldd	r25, Y+38	; 0x26
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	3f ef       	ldi	r19, 0xFF	; 255
     e6c:	4f e7       	ldi	r20, 0x7F	; 127
     e6e:	57 e4       	ldi	r21, 0x47	; 71
     e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e74:	18 16       	cp	r1, r24
     e76:	4c f5       	brge	.+82     	; 0xeca <confirmSetPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e78:	6f a1       	ldd	r22, Y+39	; 0x27
     e7a:	78 a5       	ldd	r23, Y+40	; 0x28
     e7c:	89 a5       	ldd	r24, Y+41	; 0x29
     e7e:	9a a5       	ldd	r25, Y+42	; 0x2a
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e2       	ldi	r20, 0x20	; 32
     e86:	51 e4       	ldi	r21, 0x41	; 65
     e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	bc 01       	movw	r22, r24
     e92:	cd 01       	movw	r24, r26
     e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	9a a3       	std	Y+34, r25	; 0x22
     e9e:	89 a3       	std	Y+33, r24	; 0x21
     ea0:	0f c0       	rjmp	.+30     	; 0xec0 <confirmSetPassword+0xf0>
     ea2:	88 ec       	ldi	r24, 0xC8	; 200
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	98 a3       	std	Y+32, r25	; 0x20
     ea8:	8f 8f       	std	Y+31, r24	; 0x1f
     eaa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eac:	98 a1       	ldd	r25, Y+32	; 0x20
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <confirmSetPassword+0xde>
     eb2:	98 a3       	std	Y+32, r25	; 0x20
     eb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb6:	89 a1       	ldd	r24, Y+33	; 0x21
     eb8:	9a a1       	ldd	r25, Y+34	; 0x22
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	9a a3       	std	Y+34, r25	; 0x22
     ebe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec0:	89 a1       	ldd	r24, Y+33	; 0x21
     ec2:	9a a1       	ldd	r25, Y+34	; 0x22
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	69 f7       	brne	.-38     	; 0xea2 <confirmSetPassword+0xd2>
     ec8:	14 c0       	rjmp	.+40     	; 0xef2 <confirmSetPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eca:	6b a1       	ldd	r22, Y+35	; 0x23
     ecc:	7c a1       	ldd	r23, Y+36	; 0x24
     ece:	8d a1       	ldd	r24, Y+37	; 0x25
     ed0:	9e a1       	ldd	r25, Y+38	; 0x26
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9a a3       	std	Y+34, r25	; 0x22
     edc:	89 a3       	std	Y+33, r24	; 0x21
     ede:	89 a1       	ldd	r24, Y+33	; 0x21
     ee0:	9a a1       	ldd	r25, Y+34	; 0x22
     ee2:	9e 8f       	std	Y+30, r25	; 0x1e
     ee4:	8d 8f       	std	Y+29, r24	; 0x1d
     ee6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ee8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <confirmSetPassword+0x11a>
     eee:	9e 8f       	std	Y+30, r25	; 0x1e
     ef0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	if(key>='0' && key <= '9')
     ef2:	80 91 72 01 	lds	r24, 0x0172
     ef6:	80 33       	cpi	r24, 0x30	; 48
     ef8:	08 f4       	brcc	.+2      	; 0xefc <confirmSetPassword+0x12c>
     efa:	97 c0       	rjmp	.+302    	; 0x102a <confirmSetPassword+0x25a>
     efc:	80 91 72 01 	lds	r24, 0x0172
     f00:	8a 33       	cpi	r24, 0x3A	; 58
     f02:	08 f0       	brcs	.+2      	; 0xf06 <confirmSetPassword+0x136>
     f04:	92 c0       	rjmp	.+292    	; 0x102a <confirmSetPassword+0x25a>
	{
		LCD_displayCharacter('*');
     f06:	8a e2       	ldi	r24, 0x2A	; 42
     f08:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayCharacter>
		g_reEnteredPass[0] = key;
     f0c:	80 91 72 01 	lds	r24, 0x0172
     f10:	80 93 83 01 	sts	0x0183, r24
     f14:	8a c0       	rjmp	.+276    	; 0x102a <confirmSetPassword+0x25a>
	}
	while (key>='0' && key <= '9')
	{
		key= KeyPad_getPressedKey();
     f16:	0e 94 b8 12 	call	0x2570	; 0x2570 <KeyPad_getPressedKey>
     f1a:	80 93 72 01 	sts	0x0172, r24
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a8 e4       	ldi	r26, 0x48	; 72
     f24:	b2 e4       	ldi	r27, 0x42	; 66
     f26:	89 8f       	std	Y+25, r24	; 0x19
     f28:	9a 8f       	std	Y+26, r25	; 0x1a
     f2a:	ab 8f       	std	Y+27, r26	; 0x1b
     f2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2e:	69 8d       	ldd	r22, Y+25	; 0x19
     f30:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f34:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	4a ef       	ldi	r20, 0xFA	; 250
     f3c:	54 e4       	ldi	r21, 0x44	; 68
     f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	8d 8b       	std	Y+21, r24	; 0x15
     f48:	9e 8b       	std	Y+22, r25	; 0x16
     f4a:	af 8b       	std	Y+23, r26	; 0x17
     f4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f4e:	6d 89       	ldd	r22, Y+21	; 0x15
     f50:	7e 89       	ldd	r23, Y+22	; 0x16
     f52:	8f 89       	ldd	r24, Y+23	; 0x17
     f54:	98 8d       	ldd	r25, Y+24	; 0x18
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e8       	ldi	r20, 0x80	; 128
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f62:	88 23       	and	r24, r24
     f64:	2c f4       	brge	.+10     	; 0xf70 <confirmSetPassword+0x1a0>
		__ticks = 1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 8b       	std	Y+20, r25	; 0x14
     f6c:	8b 8b       	std	Y+19, r24	; 0x13
     f6e:	3f c0       	rjmp	.+126    	; 0xfee <confirmSetPassword+0x21e>
	else if (__tmp > 65535)
     f70:	6d 89       	ldd	r22, Y+21	; 0x15
     f72:	7e 89       	ldd	r23, Y+22	; 0x16
     f74:	8f 89       	ldd	r24, Y+23	; 0x17
     f76:	98 8d       	ldd	r25, Y+24	; 0x18
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	3f ef       	ldi	r19, 0xFF	; 255
     f7c:	4f e7       	ldi	r20, 0x7F	; 127
     f7e:	57 e4       	ldi	r21, 0x47	; 71
     f80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f84:	18 16       	cp	r1, r24
     f86:	4c f5       	brge	.+82     	; 0xfda <confirmSetPassword+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f88:	69 8d       	ldd	r22, Y+25	; 0x19
     f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e2       	ldi	r20, 0x20	; 32
     f96:	51 e4       	ldi	r21, 0x41	; 65
     f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	bc 01       	movw	r22, r24
     fa2:	cd 01       	movw	r24, r26
     fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	9c 8b       	std	Y+20, r25	; 0x14
     fae:	8b 8b       	std	Y+19, r24	; 0x13
     fb0:	0f c0       	rjmp	.+30     	; 0xfd0 <confirmSetPassword+0x200>
     fb2:	88 ec       	ldi	r24, 0xC8	; 200
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	9a 8b       	std	Y+18, r25	; 0x12
     fb8:	89 8b       	std	Y+17, r24	; 0x11
     fba:	89 89       	ldd	r24, Y+17	; 0x11
     fbc:	9a 89       	ldd	r25, Y+18	; 0x12
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <confirmSetPassword+0x1ee>
     fc2:	9a 8b       	std	Y+18, r25	; 0x12
     fc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc6:	8b 89       	ldd	r24, Y+19	; 0x13
     fc8:	9c 89       	ldd	r25, Y+20	; 0x14
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	9c 8b       	std	Y+20, r25	; 0x14
     fce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd0:	8b 89       	ldd	r24, Y+19	; 0x13
     fd2:	9c 89       	ldd	r25, Y+20	; 0x14
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	69 f7       	brne	.-38     	; 0xfb2 <confirmSetPassword+0x1e2>
     fd8:	14 c0       	rjmp	.+40     	; 0x1002 <confirmSetPassword+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	9c 8b       	std	Y+20, r25	; 0x14
     fec:	8b 8b       	std	Y+19, r24	; 0x13
     fee:	8b 89       	ldd	r24, Y+19	; 0x13
     ff0:	9c 89       	ldd	r25, Y+20	; 0x14
     ff2:	98 8b       	std	Y+16, r25	; 0x10
     ff4:	8f 87       	std	Y+15, r24	; 0x0f
     ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff8:	98 89       	ldd	r25, Y+16	; 0x10
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	f1 f7       	brne	.-4      	; 0xffa <confirmSetPassword+0x22a>
     ffe:	98 8b       	std	Y+16, r25	; 0x10
    1000:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		LCD_displayCharacter('*');
    1002:	8a e2       	ldi	r24, 0x2A	; 42
    1004:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayCharacter>
		g_reEnteredPass[i] = key;
    1008:	8c a5       	ldd	r24, Y+44	; 0x2c
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	20 91 72 01 	lds	r18, 0x0172
    1012:	fc 01       	movw	r30, r24
    1014:	ed 57       	subi	r30, 0x7D	; 125
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	20 83       	st	Z, r18
		i++;
    101a:	8c a5       	ldd	r24, Y+44	; 0x2c
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	8c a7       	std	Y+44, r24	; 0x2c
		g_pass2Length++;
    1020:	80 91 a4 01 	lds	r24, 0x01A4
    1024:	8f 5f       	subi	r24, 0xFF	; 255
    1026:	80 93 a4 01 	sts	0x01A4, r24
	if(key>='0' && key <= '9')
	{
		LCD_displayCharacter('*');
		g_reEnteredPass[0] = key;
	}
	while (key>='0' && key <= '9')
    102a:	80 91 72 01 	lds	r24, 0x0172
    102e:	80 33       	cpi	r24, 0x30	; 48
    1030:	28 f0       	brcs	.+10     	; 0x103c <confirmSetPassword+0x26c>
    1032:	80 91 72 01 	lds	r24, 0x0172
    1036:	8a 33       	cpi	r24, 0x3A	; 58
    1038:	08 f4       	brcc	.+2      	; 0x103c <confirmSetPassword+0x26c>
    103a:	6d cf       	rjmp	.-294    	; 0xf16 <confirmSetPassword+0x146>
		i++;
		g_pass2Length++;
	}
	/*When user presses "=" the password is compared against the one entered last before*/

	if (key == '=')
    103c:	80 91 72 01 	lds	r24, 0x0172
    1040:	8d 33       	cpi	r24, 0x3D	; 61
    1042:	09 f0       	breq	.+2      	; 0x1046 <confirmSetPassword+0x276>
    1044:	c2 c0       	rjmp	.+388    	; 0x11ca <confirmSetPassword+0x3fa>
	{
		if(verifyPass(g_enteredPass, g_reEnteredPass, g_pass2Length)==SUCCESS)
    1046:	40 91 a4 01 	lds	r20, 0x01A4
    104a:	83 e7       	ldi	r24, 0x73	; 115
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	23 e8       	ldi	r18, 0x83	; 131
    1050:	31 e0       	ldi	r19, 0x01	; 1
    1052:	b9 01       	movw	r22, r18
    1054:	0e 94 ee 08 	call	0x11dc	; 0x11dc <verifyPass>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	c9 f5       	brne	.+114    	; 0x10ce <confirmSetPassword+0x2fe>
		{
			j=0;
    105c:	1b a6       	std	Y+43, r1	; 0x2b
			LCD_clearScreen();
    105e:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
			LCD_goToRowColumn(0,0);
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
			LCD_displayString("New Pass Set");
    106a:	8d e7       	ldi	r24, 0x7D	; 125
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
    1072:	11 c0       	rjmp	.+34     	; 0x1096 <confirmSetPassword+0x2c6>

			while(g_reEnteredPass[j]!= '\0')
			{
				g_savedPass[j] = g_reEnteredPass[j]; /*Stores the new Password*/
    1074:	8b a5       	ldd	r24, Y+43	; 0x2b
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	8b a5       	ldd	r24, Y+43	; 0x2b
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	fc 01       	movw	r30, r24
    1082:	ed 57       	subi	r30, 0x7D	; 125
    1084:	fe 4f       	sbci	r31, 0xFE	; 254
    1086:	80 81       	ld	r24, Z
    1088:	f9 01       	movw	r30, r18
    108a:	ed 56       	subi	r30, 0x6D	; 109
    108c:	fe 4f       	sbci	r31, 0xFE	; 254
    108e:	80 83       	st	Z, r24
				j++;
    1090:	8b a5       	ldd	r24, Y+43	; 0x2b
    1092:	8f 5f       	subi	r24, 0xFF	; 255
    1094:	8b a7       	std	Y+43, r24	; 0x2b
			j=0;
			LCD_clearScreen();
			LCD_goToRowColumn(0,0);
			LCD_displayString("New Pass Set");

			while(g_reEnteredPass[j]!= '\0')
    1096:	8b a5       	ldd	r24, Y+43	; 0x2b
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	fc 01       	movw	r30, r24
    109e:	ed 57       	subi	r30, 0x7D	; 125
    10a0:	fe 4f       	sbci	r31, 0xFE	; 254
    10a2:	80 81       	ld	r24, Z
    10a4:	88 23       	and	r24, r24
    10a6:	31 f7       	brne	.-52     	; 0x1074 <confirmSetPassword+0x2a4>
			{
				g_savedPass[j] = g_reEnteredPass[j]; /*Stores the new Password*/
				j++;
			}

			g_reEnteredPass[i] = '#'; /*add the "#" to be able to send string through UART*/
    10a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	fc 01       	movw	r30, r24
    10b0:	ed 57       	subi	r30, 0x7D	; 125
    10b2:	fe 4f       	sbci	r31, 0xFE	; 254
    10b4:	83 e2       	ldi	r24, 0x23	; 35
    10b6:	80 83       	st	Z, r24
			UART_sendString(g_reEnteredPass); /*Sends the password to MC2 to be stored in EEPROM*/
    10b8:	83 e8       	ldi	r24, 0x83	; 131
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	0e 94 e5 19 	call	0x33ca	; 0x33ca <UART_sendString>
			UART_sendByte(g_pass2Length); /*Sends the pass length to MC2 for proper storing in EEPROM*/
    10c0:	80 91 a4 01 	lds	r24, 0x01A4
    10c4:	0e 94 bf 19 	call	0x337e	; 0x337e <UART_sendByte>
			Step2(); /*Proceed to step 2*/
    10c8:	0e 94 29 09 	call	0x1252	; 0x1252 <Step2>
    10cc:	7e c0       	rjmp	.+252    	; 0x11ca <confirmSetPassword+0x3fa>
		}
		else
		{
			LCD_clearScreen();
    10ce:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
			LCD_goToRowColumn(0,0);
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
			LCD_displayString("Fail");
    10da:	8a e8       	ldi	r24, 0x8A	; 138
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	aa ef       	ldi	r26, 0xFA	; 250
    10e8:	b3 e4       	ldi	r27, 0x43	; 67
    10ea:	8b 87       	std	Y+11, r24	; 0x0b
    10ec:	9c 87       	std	Y+12, r25	; 0x0c
    10ee:	ad 87       	std	Y+13, r26	; 0x0d
    10f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4a ef       	ldi	r20, 0xFA	; 250
    1100:	54 e4       	ldi	r21, 0x44	; 68
    1102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	8f 83       	std	Y+7, r24	; 0x07
    110c:	98 87       	std	Y+8, r25	; 0x08
    110e:	a9 87       	std	Y+9, r26	; 0x09
    1110:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1112:	6f 81       	ldd	r22, Y+7	; 0x07
    1114:	78 85       	ldd	r23, Y+8	; 0x08
    1116:	89 85       	ldd	r24, Y+9	; 0x09
    1118:	9a 85       	ldd	r25, Y+10	; 0x0a
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1126:	88 23       	and	r24, r24
    1128:	2c f4       	brge	.+10     	; 0x1134 <confirmSetPassword+0x364>
		__ticks = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9e 83       	std	Y+6, r25	; 0x06
    1130:	8d 83       	std	Y+5, r24	; 0x05
    1132:	3f c0       	rjmp	.+126    	; 0x11b2 <confirmSetPassword+0x3e2>
	else if (__tmp > 65535)
    1134:	6f 81       	ldd	r22, Y+7	; 0x07
    1136:	78 85       	ldd	r23, Y+8	; 0x08
    1138:	89 85       	ldd	r24, Y+9	; 0x09
    113a:	9a 85       	ldd	r25, Y+10	; 0x0a
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	57 e4       	ldi	r21, 0x47	; 71
    1144:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1148:	18 16       	cp	r1, r24
    114a:	4c f5       	brge	.+82     	; 0x119e <confirmSetPassword+0x3ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114c:	6b 85       	ldd	r22, Y+11	; 0x0b
    114e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1150:	8d 85       	ldd	r24, Y+13	; 0x0d
    1152:	9e 85       	ldd	r25, Y+14	; 0x0e
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	9e 83       	std	Y+6, r25	; 0x06
    1172:	8d 83       	std	Y+5, r24	; 0x05
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <confirmSetPassword+0x3c4>
    1176:	88 ec       	ldi	r24, 0xC8	; 200
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <confirmSetPassword+0x3b2>
    1186:	9c 83       	std	Y+4, r25	; 0x04
    1188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	69 f7       	brne	.-38     	; 0x1176 <confirmSetPassword+0x3a6>
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <confirmSetPassword+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119e:	6f 81       	ldd	r22, Y+7	; 0x07
    11a0:	78 85       	ldd	r23, Y+8	; 0x08
    11a2:	89 85       	ldd	r24, Y+9	; 0x09
    11a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9e 83       	std	Y+6, r25	; 0x06
    11b0:	8d 83       	std	Y+5, r24	; 0x05
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	9e 81       	ldd	r25, Y+6	; 0x06
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <confirmSetPassword+0x3ee>
    11c2:	9a 83       	std	Y+2, r25	; 0x02
    11c4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			setPassword();  /*Retry entering password in case of Failure*/
    11c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPassword>
		}
	}
}
    11ca:	ac 96       	adiw	r28, 0x2c	; 44
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <verifyPass>:
 * 
 * 3-uint8 a_passLength: the length of the seconds entered password.
 *
 *******************************************************************************/
char verifyPass(char *a_pass1, char *a_pass2, uint8 a_passLength)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	27 97       	sbiw	r28, 0x07	; 7
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	9b 83       	std	Y+3, r25	; 0x03
    11f2:	8a 83       	std	Y+2, r24	; 0x02
    11f4:	7d 83       	std	Y+5, r23	; 0x05
    11f6:	6c 83       	std	Y+4, r22	; 0x04
    11f8:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i=0;
    11fa:	19 82       	std	Y+1, r1	; 0x01
    11fc:	1a c0       	rjmp	.+52     	; 0x1232 <verifyPass+0x56>
	while(i < a_passLength)
	{
		if(a_pass1[i] == a_pass2[i])
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	fc 01       	movw	r30, r24
    120a:	e2 0f       	add	r30, r18
    120c:	f3 1f       	adc	r31, r19
    120e:	40 81       	ld	r20, Z
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	9d 81       	ldd	r25, Y+5	; 0x05
    121a:	fc 01       	movw	r30, r24
    121c:	e2 0f       	add	r30, r18
    121e:	f3 1f       	adc	r31, r19
    1220:	80 81       	ld	r24, Z
    1222:	48 17       	cp	r20, r24
    1224:	21 f4       	brne	.+8      	; 0x122e <verifyPass+0x52>
		{
			i++;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <verifyPass+0x56>
		}
		else
		{
			return FAIL;
    122e:	1f 82       	std	Y+7, r1	; 0x07
    1230:	06 c0       	rjmp	.+12     	; 0x123e <verifyPass+0x62>
 *
 *******************************************************************************/
char verifyPass(char *a_pass1, char *a_pass2, uint8 a_passLength)
{
	uint8 i=0;
	while(i < a_passLength)
    1232:	99 81       	ldd	r25, Y+1	; 0x01
    1234:	8e 81       	ldd	r24, Y+6	; 0x06
    1236:	98 17       	cp	r25, r24
    1238:	10 f3       	brcs	.-60     	; 0x11fe <verifyPass+0x22>
		{
			return FAIL;
		}

	}
	return SUCCESS;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	8f 83       	std	Y+7, r24	; 0x07
    123e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1240:	27 96       	adiw	r28, 0x07	; 7
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <Step2>:
 * Arguments: None
 * 
 *******************************************************************************/

void Step2(void)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	2e 97       	sbiw	r28, 0x0e	; 14
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1266:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
	LCD_goToRowColumn(0,0);
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
	LCD_displayString("* : Open Door");
    1272:	8f e8       	ldi	r24, 0x8F	; 143
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
	LCD_displayString("+ : Change Pass");
    1282:	8d e9       	ldi	r24, 0x9D	; 157
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>

	key = KeyPad_getPressedKey();
    128a:	0e 94 b8 12 	call	0x2570	; 0x2570 <KeyPad_getPressedKey>
    128e:	80 93 72 01 	sts	0x0172, r24
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a8 e4       	ldi	r26, 0x48	; 72
    1298:	b2 e4       	ldi	r27, 0x42	; 66
    129a:	8b 87       	std	Y+11, r24	; 0x0b
    129c:	9c 87       	std	Y+12, r25	; 0x0c
    129e:	ad 87       	std	Y+13, r26	; 0x0d
    12a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4a ef       	ldi	r20, 0xFA	; 250
    12b0:	54 e4       	ldi	r21, 0x44	; 68
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	8f 83       	std	Y+7, r24	; 0x07
    12bc:	98 87       	std	Y+8, r25	; 0x08
    12be:	a9 87       	std	Y+9, r26	; 0x09
    12c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c2:	6f 81       	ldd	r22, Y+7	; 0x07
    12c4:	78 85       	ldd	r23, Y+8	; 0x08
    12c6:	89 85       	ldd	r24, Y+9	; 0x09
    12c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e8       	ldi	r20, 0x80	; 128
    12d0:	5f e3       	ldi	r21, 0x3F	; 63
    12d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d6:	88 23       	and	r24, r24
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <Step2+0x92>
		__ticks = 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	3f c0       	rjmp	.+126    	; 0x1362 <Step2+0x110>
	else if (__tmp > 65535)
    12e4:	6f 81       	ldd	r22, Y+7	; 0x07
    12e6:	78 85       	ldd	r23, Y+8	; 0x08
    12e8:	89 85       	ldd	r24, Y+9	; 0x09
    12ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	3f ef       	ldi	r19, 0xFF	; 255
    12f0:	4f e7       	ldi	r20, 0x7F	; 127
    12f2:	57 e4       	ldi	r21, 0x47	; 71
    12f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f8:	18 16       	cp	r1, r24
    12fa:	4c f5       	brge	.+82     	; 0x134e <Step2+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1300:	8d 85       	ldd	r24, Y+13	; 0x0d
    1302:	9e 85       	ldd	r25, Y+14	; 0x0e
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e2       	ldi	r20, 0x20	; 32
    130a:	51 e4       	ldi	r21, 0x41	; 65
    130c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	bc 01       	movw	r22, r24
    1316:	cd 01       	movw	r24, r26
    1318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	0f c0       	rjmp	.+30     	; 0x1344 <Step2+0xf2>
    1326:	88 ec       	ldi	r24, 0xC8	; 200
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <Step2+0xe0>
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	69 f7       	brne	.-38     	; 0x1326 <Step2+0xd4>
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <Step2+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134e:	6f 81       	ldd	r22, Y+7	; 0x07
    1350:	78 85       	ldd	r23, Y+8	; 0x08
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9e 83       	std	Y+6, r25	; 0x06
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <Step2+0x11c>
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	if(key == '*')
    1376:	80 91 72 01 	lds	r24, 0x0172
    137a:	8a 32       	cpi	r24, 0x2A	; 42
    137c:	19 f4       	brne	.+6      	; 0x1384 <Step2+0x132>
	{
		openDoor();
    137e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <openDoor>
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <Step2+0x13e>
	}
	else if (key == '+')
    1384:	80 91 72 01 	lds	r24, 0x0172
    1388:	8b 32       	cpi	r24, 0x2B	; 43
    138a:	11 f4       	brne	.+4      	; 0x1390 <Step2+0x13e>
	{
		changePass();
    138c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <changePass>
	}
}
    1390:	2e 96       	adiw	r28, 0x0e	; 14
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <openDoor>:
 * Arguments: None
 *
 *******************************************************************************/

void openDoor(void)
{
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	c3 58       	subi	r28, 0x83	; 131
    13b0:	d0 40       	sbci	r29, 0x00	; 0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 1, trialCount = 0, passTrialLength;
    13bc:	fe 01       	movw	r30, r28
    13be:	ed 58       	subi	r30, 0x8D	; 141
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	80 83       	st	Z, r24
    13c6:	fe 01       	movw	r30, r28
    13c8:	ee 58       	subi	r30, 0x8E	; 142
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	10 82       	st	Z, r1
    13ce:	29 c5       	rjmp	.+2642   	; 0x1e22 <openDoor+0xa80>
	char passTrial[MAXPASSLENGTH];

	while(trialCount < MAX_ALLOWED_TRIALS)
	{
		LCD_clearScreen();
    13d0:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
		LCD_goToRowColumn(0,0);
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
		LCD_displayString("Enter Password");
    13dc:	8d ea       	ldi	r24, 0xAD	; 173
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>

		key=KeyPad_getPressedKey();
    13ec:	0e 94 b8 12 	call	0x2570	; 0x2570 <KeyPad_getPressedKey>
    13f0:	80 93 72 01 	sts	0x0172, r24
    13f4:	fe 01       	movw	r30, r28
    13f6:	e3 59       	subi	r30, 0x93	; 147
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a8 e4       	ldi	r26, 0x48	; 72
    1400:	b2 e4       	ldi	r27, 0x42	; 66
    1402:	80 83       	st	Z, r24
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	a2 83       	std	Z+2, r26	; 0x02
    1408:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	8e 01       	movw	r16, r28
    140c:	07 59       	subi	r16, 0x97	; 151
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	fe 01       	movw	r30, r28
    1412:	e3 59       	subi	r30, 0x93	; 147
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a ef       	ldi	r20, 0xFA	; 250
    1424:	54 e4       	ldi	r21, 0x44	; 68
    1426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	f8 01       	movw	r30, r16
    1430:	80 83       	st	Z, r24
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	a2 83       	std	Z+2, r26	; 0x02
    1436:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1438:	fe 01       	movw	r30, r28
    143a:	e7 59       	subi	r30, 0x97	; 151
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e8       	ldi	r20, 0x80	; 128
    144c:	5f e3       	ldi	r21, 0x3F	; 63
    144e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1452:	88 23       	and	r24, r24
    1454:	44 f4       	brge	.+16     	; 0x1466 <openDoor+0xc4>
		__ticks = 1;
    1456:	fe 01       	movw	r30, r28
    1458:	e9 59       	subi	r30, 0x99	; 153
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	80 83       	st	Z, r24
    1464:	64 c0       	rjmp	.+200    	; 0x152e <openDoor+0x18c>
	else if (__tmp > 65535)
    1466:	fe 01       	movw	r30, r28
    1468:	e7 59       	subi	r30, 0x97	; 151
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	4f e7       	ldi	r20, 0x7F	; 127
    147a:	57 e4       	ldi	r21, 0x47	; 71
    147c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1480:	18 16       	cp	r1, r24
    1482:	0c f0       	brlt	.+2      	; 0x1486 <openDoor+0xe4>
    1484:	43 c0       	rjmp	.+134    	; 0x150c <openDoor+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	fe 01       	movw	r30, r28
    1488:	e3 59       	subi	r30, 0x93	; 147
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8e 01       	movw	r16, r28
    14a6:	09 59       	subi	r16, 0x99	; 153
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	f8 01       	movw	r30, r16
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	80 83       	st	Z, r24
    14bc:	1f c0       	rjmp	.+62     	; 0x14fc <openDoor+0x15a>
    14be:	fe 01       	movw	r30, r28
    14c0:	eb 59       	subi	r30, 0x9B	; 155
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	88 ec       	ldi	r24, 0xC8	; 200
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	80 83       	st	Z, r24
    14cc:	fe 01       	movw	r30, r28
    14ce:	eb 59       	subi	r30, 0x9B	; 155
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <openDoor+0x134>
    14da:	fe 01       	movw	r30, r28
    14dc:	eb 59       	subi	r30, 0x9B	; 155
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e4:	de 01       	movw	r26, r28
    14e6:	a9 59       	subi	r26, 0x99	; 153
    14e8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ea:	fe 01       	movw	r30, r28
    14ec:	e9 59       	subi	r30, 0x99	; 153
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	80 81       	ld	r24, Z
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	11 96       	adiw	r26, 0x01	; 1
    14f8:	9c 93       	st	X, r25
    14fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	fe 01       	movw	r30, r28
    14fe:	e9 59       	subi	r30, 0x99	; 153
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	d1 f6       	brne	.-76     	; 0x14be <openDoor+0x11c>
    150a:	28 c0       	rjmp	.+80     	; 0x155c <openDoor+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150c:	8e 01       	movw	r16, r28
    150e:	09 59       	subi	r16, 0x99	; 153
    1510:	1f 4f       	sbci	r17, 0xFF	; 255
    1512:	fe 01       	movw	r30, r28
    1514:	e7 59       	subi	r30, 0x97	; 151
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	60 81       	ld	r22, Z
    151a:	71 81       	ldd	r23, Z+1	; 0x01
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	f8 01       	movw	r30, r16
    152a:	91 83       	std	Z+1, r25	; 0x01
    152c:	80 83       	st	Z, r24
    152e:	de 01       	movw	r26, r28
    1530:	ad 59       	subi	r26, 0x9D	; 157
    1532:	bf 4f       	sbci	r27, 0xFF	; 255
    1534:	fe 01       	movw	r30, r28
    1536:	e9 59       	subi	r30, 0x99	; 153
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	11 96       	adiw	r26, 0x01	; 1
    1540:	9c 93       	st	X, r25
    1542:	8e 93       	st	-X, r24
    1544:	fe 01       	movw	r30, r28
    1546:	ed 59       	subi	r30, 0x9D	; 157
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <openDoor+0x1ac>
    1552:	fe 01       	movw	r30, r28
    1554:	ed 59       	subi	r30, 0x9D	; 157
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	80 83       	st	Z, r24
		_delay_ms(50);
		if(key>='0' && key <= '9')
    155c:	80 91 72 01 	lds	r24, 0x0172
    1560:	80 33       	cpi	r24, 0x30	; 48
    1562:	08 f4       	brcc	.+2      	; 0x1566 <openDoor+0x1c4>
    1564:	ea c0       	rjmp	.+468    	; 0x173a <openDoor+0x398>
    1566:	80 91 72 01 	lds	r24, 0x0172
    156a:	8a 33       	cpi	r24, 0x3A	; 58
    156c:	08 f0       	brcs	.+2      	; 0x1570 <openDoor+0x1ce>
    156e:	e5 c0       	rjmp	.+458    	; 0x173a <openDoor+0x398>
		{
			LCD_displayCharacter('*');
    1570:	8a e2       	ldi	r24, 0x2A	; 42
    1572:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayCharacter>
			passTrial[0] = key;
    1576:	80 91 72 01 	lds	r24, 0x0172
    157a:	fe 01       	movw	r30, r28
    157c:	ec 58       	subi	r30, 0x8C	; 140
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	80 83       	st	Z, r24
    1582:	db c0       	rjmp	.+438    	; 0x173a <openDoor+0x398>
		}
		while (key>='0' && key <= '9')
		{
			key= KeyPad_getPressedKey();
    1584:	0e 94 b8 12 	call	0x2570	; 0x2570 <KeyPad_getPressedKey>
    1588:	80 93 72 01 	sts	0x0172, r24
    158c:	fe 01       	movw	r30, r28
    158e:	e1 5a       	subi	r30, 0xA1	; 161
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a8 e4       	ldi	r26, 0x48	; 72
    1598:	b2 e4       	ldi	r27, 0x42	; 66
    159a:	80 83       	st	Z, r24
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	a2 83       	std	Z+2, r26	; 0x02
    15a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a2:	8e 01       	movw	r16, r28
    15a4:	05 5a       	subi	r16, 0xA5	; 165
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	fe 01       	movw	r30, r28
    15aa:	e1 5a       	subi	r30, 0xA1	; 161
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	60 81       	ld	r22, Z
    15b0:	71 81       	ldd	r23, Z+1	; 0x01
    15b2:	82 81       	ldd	r24, Z+2	; 0x02
    15b4:	93 81       	ldd	r25, Z+3	; 0x03
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	4a ef       	ldi	r20, 0xFA	; 250
    15bc:	54 e4       	ldi	r21, 0x44	; 68
    15be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	f8 01       	movw	r30, r16
    15c8:	80 83       	st	Z, r24
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	a2 83       	std	Z+2, r26	; 0x02
    15ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d0:	fe 01       	movw	r30, r28
    15d2:	e5 5a       	subi	r30, 0xA5	; 165
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	44 f4       	brge	.+16     	; 0x15fe <openDoor+0x25c>
		__ticks = 1;
    15ee:	fe 01       	movw	r30, r28
    15f0:	e7 5a       	subi	r30, 0xA7	; 167
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
    15fc:	64 c0       	rjmp	.+200    	; 0x16c6 <openDoor+0x324>
	else if (__tmp > 65535)
    15fe:	fe 01       	movw	r30, r28
    1600:	e5 5a       	subi	r30, 0xA5	; 165
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	60 81       	ld	r22, Z
    1606:	71 81       	ldd	r23, Z+1	; 0x01
    1608:	82 81       	ldd	r24, Z+2	; 0x02
    160a:	93 81       	ldd	r25, Z+3	; 0x03
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	57 e4       	ldi	r21, 0x47	; 71
    1614:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1618:	18 16       	cp	r1, r24
    161a:	0c f0       	brlt	.+2      	; 0x161e <openDoor+0x27c>
    161c:	43 c0       	rjmp	.+134    	; 0x16a4 <openDoor+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161e:	fe 01       	movw	r30, r28
    1620:	e1 5a       	subi	r30, 0xA1	; 161
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	60 81       	ld	r22, Z
    1626:	71 81       	ldd	r23, Z+1	; 0x01
    1628:	82 81       	ldd	r24, Z+2	; 0x02
    162a:	93 81       	ldd	r25, Z+3	; 0x03
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e2       	ldi	r20, 0x20	; 32
    1632:	51 e4       	ldi	r21, 0x41	; 65
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	8e 01       	movw	r16, r28
    163e:	07 5a       	subi	r16, 0xA7	; 167
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	f8 01       	movw	r30, r16
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	1f c0       	rjmp	.+62     	; 0x1694 <openDoor+0x2f2>
    1656:	fe 01       	movw	r30, r28
    1658:	e9 5a       	subi	r30, 0xA9	; 169
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	88 ec       	ldi	r24, 0xC8	; 200
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	80 83       	st	Z, r24
    1664:	fe 01       	movw	r30, r28
    1666:	e9 5a       	subi	r30, 0xA9	; 169
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <openDoor+0x2cc>
    1672:	fe 01       	movw	r30, r28
    1674:	e9 5a       	subi	r30, 0xA9	; 169
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167c:	de 01       	movw	r26, r28
    167e:	a7 5a       	subi	r26, 0xA7	; 167
    1680:	bf 4f       	sbci	r27, 0xFF	; 255
    1682:	fe 01       	movw	r30, r28
    1684:	e7 5a       	subi	r30, 0xA7	; 167
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	11 96       	adiw	r26, 0x01	; 1
    1690:	9c 93       	st	X, r25
    1692:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1694:	fe 01       	movw	r30, r28
    1696:	e7 5a       	subi	r30, 0xA7	; 167
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	80 81       	ld	r24, Z
    169c:	91 81       	ldd	r25, Z+1	; 0x01
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	d1 f6       	brne	.-76     	; 0x1656 <openDoor+0x2b4>
    16a2:	27 c0       	rjmp	.+78     	; 0x16f2 <openDoor+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a4:	8e 01       	movw	r16, r28
    16a6:	07 5a       	subi	r16, 0xA7	; 167
    16a8:	1f 4f       	sbci	r17, 0xFF	; 255
    16aa:	fe 01       	movw	r30, r28
    16ac:	e5 5a       	subi	r30, 0xA5	; 165
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	f8 01       	movw	r30, r16
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	80 83       	st	Z, r24
    16c6:	de 01       	movw	r26, r28
    16c8:	ab 5a       	subi	r26, 0xAB	; 171
    16ca:	bf 4f       	sbci	r27, 0xFF	; 255
    16cc:	fe 01       	movw	r30, r28
    16ce:	e7 5a       	subi	r30, 0xA7	; 167
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	8d 93       	st	X+, r24
    16d8:	9c 93       	st	X, r25
    16da:	fe 01       	movw	r30, r28
    16dc:	eb 5a       	subi	r30, 0xAB	; 171
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <openDoor+0x342>
    16e8:	fe 01       	movw	r30, r28
    16ea:	eb 5a       	subi	r30, 0xAB	; 171
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	80 83       	st	Z, r24
			_delay_ms(50);
			LCD_displayCharacter('*');
    16f2:	8a e2       	ldi	r24, 0x2A	; 42
    16f4:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayCharacter>
			passTrial[i] = key;
    16f8:	fe 01       	movw	r30, r28
    16fa:	ed 58       	subi	r30, 0x8D	; 141
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 81       	ld	r24, Z
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 91 72 01 	lds	r20, 0x0172
    1708:	ce 01       	movw	r24, r28
    170a:	8c 58       	subi	r24, 0x8C	; 140
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	fc 01       	movw	r30, r24
    1710:	e2 0f       	add	r30, r18
    1712:	f3 1f       	adc	r31, r19
    1714:	40 83       	st	Z, r20
			i++;
    1716:	de 01       	movw	r26, r28
    1718:	ad 58       	subi	r26, 0x8D	; 141
    171a:	bf 4f       	sbci	r27, 0xFF	; 255
    171c:	fe 01       	movw	r30, r28
    171e:	ed 58       	subi	r30, 0x8D	; 141
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	8f 5f       	subi	r24, 0xFF	; 255
    1726:	8c 93       	st	X, r24
			passTrialLength++;
    1728:	de 01       	movw	r26, r28
    172a:	af 58       	subi	r26, 0x8F	; 143
    172c:	bf 4f       	sbci	r27, 0xFF	; 255
    172e:	fe 01       	movw	r30, r28
    1730:	ef 58       	subi	r30, 0x8F	; 143
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 81       	ld	r24, Z
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	8c 93       	st	X, r24
		if(key>='0' && key <= '9')
		{
			LCD_displayCharacter('*');
			passTrial[0] = key;
		}
		while (key>='0' && key <= '9')
    173a:	80 91 72 01 	lds	r24, 0x0172
    173e:	80 33       	cpi	r24, 0x30	; 48
    1740:	28 f0       	brcs	.+10     	; 0x174c <openDoor+0x3aa>
    1742:	80 91 72 01 	lds	r24, 0x0172
    1746:	8a 33       	cpi	r24, 0x3A	; 58
    1748:	08 f4       	brcc	.+2      	; 0x174c <openDoor+0x3aa>
    174a:	1c cf       	rjmp	.-456    	; 0x1584 <openDoor+0x1e2>
			passTrial[i] = key;
			i++;
			passTrialLength++;
		}

		if (key == '=')
    174c:	80 91 72 01 	lds	r24, 0x0172
    1750:	8d 33       	cpi	r24, 0x3D	; 61
    1752:	09 f0       	breq	.+2      	; 0x1756 <openDoor+0x3b4>
    1754:	66 c3       	rjmp	.+1740   	; 0x1e22 <openDoor+0xa80>
		{
			if (verifyPass(g_savedPass,passTrial, passTrialLength) == SUCCESS)
    1756:	83 e9       	ldi	r24, 0x93	; 147
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	9e 01       	movw	r18, r28
    175c:	2c 58       	subi	r18, 0x8C	; 140
    175e:	3f 4f       	sbci	r19, 0xFF	; 255
    1760:	fe 01       	movw	r30, r28
    1762:	ef 58       	subi	r30, 0x8F	; 143
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	b9 01       	movw	r22, r18
    1768:	40 81       	ld	r20, Z
    176a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <verifyPass>
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	09 f0       	breq	.+2      	; 0x1774 <openDoor+0x3d2>
    1772:	d2 c2       	rjmp	.+1444   	; 0x1d18 <openDoor+0x976>
			{
				trialCount=0;
    1774:	fe 01       	movw	r30, r28
    1776:	ee 58       	subi	r30, 0x8E	; 142
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	10 82       	st	Z, r1
				rotateMotorCW(15); /*Rotates the motor clock-wise for 15 seconds to open door*/
    177c:	8f e0       	ldi	r24, 0x0F	; 15
    177e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <rotateMotorCW>
				LCD_clearScreen();
    1782:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
				LCD_displayString("Opening Door...");
    1786:	8c eb       	ldi	r24, 0xBC	; 188
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
    178e:	fe 01       	movw	r30, r28
    1790:	ef 5a       	subi	r30, 0xAF	; 175
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e8       	ldi	r25, 0x80	; 128
    1798:	ab eb       	ldi	r26, 0xBB	; 187
    179a:	b4 e4       	ldi	r27, 0x44	; 68
    179c:	80 83       	st	Z, r24
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	a2 83       	std	Z+2, r26	; 0x02
    17a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a4:	8e 01       	movw	r16, r28
    17a6:	03 5b       	subi	r16, 0xB3	; 179
    17a8:	1f 4f       	sbci	r17, 0xFF	; 255
    17aa:	fe 01       	movw	r30, r28
    17ac:	ef 5a       	subi	r30, 0xAF	; 175
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	82 81       	ldd	r24, Z+2	; 0x02
    17b6:	93 81       	ldd	r25, Z+3	; 0x03
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	4a ef       	ldi	r20, 0xFA	; 250
    17be:	54 e4       	ldi	r21, 0x44	; 68
    17c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	f8 01       	movw	r30, r16
    17ca:	80 83       	st	Z, r24
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	a2 83       	std	Z+2, r26	; 0x02
    17d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d2:	fe 01       	movw	r30, r28
    17d4:	e3 5b       	subi	r30, 0xB3	; 179
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	44 f4       	brge	.+16     	; 0x1800 <openDoor+0x45e>
		__ticks = 1;
    17f0:	fe 01       	movw	r30, r28
    17f2:	e5 5b       	subi	r30, 0xB5	; 181
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	80 83       	st	Z, r24
    17fe:	64 c0       	rjmp	.+200    	; 0x18c8 <openDoor+0x526>
	else if (__tmp > 65535)
    1800:	fe 01       	movw	r30, r28
    1802:	e3 5b       	subi	r30, 0xB3	; 179
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	57 e4       	ldi	r21, 0x47	; 71
    1816:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	0c f0       	brlt	.+2      	; 0x1820 <openDoor+0x47e>
    181e:	43 c0       	rjmp	.+134    	; 0x18a6 <openDoor+0x504>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1820:	fe 01       	movw	r30, r28
    1822:	ef 5a       	subi	r30, 0xAF	; 175
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	60 81       	ld	r22, Z
    1828:	71 81       	ldd	r23, Z+1	; 0x01
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	93 81       	ldd	r25, Z+3	; 0x03
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e2       	ldi	r20, 0x20	; 32
    1834:	51 e4       	ldi	r21, 0x41	; 65
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	8e 01       	movw	r16, r28
    1840:	05 5b       	subi	r16, 0xB5	; 181
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	f8 01       	movw	r30, r16
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
    1856:	1f c0       	rjmp	.+62     	; 0x1896 <openDoor+0x4f4>
    1858:	fe 01       	movw	r30, r28
    185a:	e7 5b       	subi	r30, 0xB7	; 183
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	88 ec       	ldi	r24, 0xC8	; 200
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
    1866:	fe 01       	movw	r30, r28
    1868:	e7 5b       	subi	r30, 0xB7	; 183
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	91 81       	ldd	r25, Z+1	; 0x01
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <openDoor+0x4ce>
    1874:	fe 01       	movw	r30, r28
    1876:	e7 5b       	subi	r30, 0xB7	; 183
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187e:	de 01       	movw	r26, r28
    1880:	a5 5b       	subi	r26, 0xB5	; 181
    1882:	bf 4f       	sbci	r27, 0xFF	; 255
    1884:	fe 01       	movw	r30, r28
    1886:	e5 5b       	subi	r30, 0xB5	; 181
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	11 96       	adiw	r26, 0x01	; 1
    1892:	9c 93       	st	X, r25
    1894:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1896:	fe 01       	movw	r30, r28
    1898:	e5 5b       	subi	r30, 0xB5	; 181
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	d1 f6       	brne	.-76     	; 0x1858 <openDoor+0x4b6>
    18a4:	27 c0       	rjmp	.+78     	; 0x18f4 <openDoor+0x552>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a6:	8e 01       	movw	r16, r28
    18a8:	05 5b       	subi	r16, 0xB5	; 181
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	fe 01       	movw	r30, r28
    18ae:	e3 5b       	subi	r30, 0xB3	; 179
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	f8 01       	movw	r30, r16
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	de 01       	movw	r26, r28
    18ca:	a9 5b       	subi	r26, 0xB9	; 185
    18cc:	bf 4f       	sbci	r27, 0xFF	; 255
    18ce:	fe 01       	movw	r30, r28
    18d0:	e5 5b       	subi	r30, 0xB5	; 181
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 81       	ld	r24, Z
    18d6:	91 81       	ldd	r25, Z+1	; 0x01
    18d8:	8d 93       	st	X+, r24
    18da:	9c 93       	st	X, r25
    18dc:	fe 01       	movw	r30, r28
    18de:	e9 5b       	subi	r30, 0xB9	; 185
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <openDoor+0x544>
    18ea:	fe 01       	movw	r30, r28
    18ec:	e9 5b       	subi	r30, 0xB9	; 185
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
				_delay_ms(1500);
				LCD_clearScreen();
    18f4:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
				LCD_displayString("Door is now Open");
    18f8:	8c ec       	ldi	r24, 0xCC	; 204
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
    1900:	fe 01       	movw	r30, r28
    1902:	ed 5b       	subi	r30, 0xBD	; 189
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	aa ef       	ldi	r26, 0xFA	; 250
    190c:	b3 e4       	ldi	r27, 0x43	; 67
    190e:	80 83       	st	Z, r24
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	a2 83       	std	Z+2, r26	; 0x02
    1914:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	8e 01       	movw	r16, r28
    1918:	01 5c       	subi	r16, 0xC1	; 193
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	fe 01       	movw	r30, r28
    191e:	ed 5b       	subi	r30, 0xBD	; 189
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a ef       	ldi	r20, 0xFA	; 250
    1930:	54 e4       	ldi	r21, 0x44	; 68
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	f8 01       	movw	r30, r16
    193c:	80 83       	st	Z, r24
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	a2 83       	std	Z+2, r26	; 0x02
    1942:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1944:	fe 01       	movw	r30, r28
    1946:	ff 96       	adiw	r30, 0x3f	; 63
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e8       	ldi	r20, 0x80	; 128
    1956:	5f e3       	ldi	r21, 0x3F	; 63
    1958:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195c:	88 23       	and	r24, r24
    195e:	2c f4       	brge	.+10     	; 0x196a <openDoor+0x5c8>
		__ticks = 1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9e af       	std	Y+62, r25	; 0x3e
    1966:	8d af       	std	Y+61, r24	; 0x3d
    1968:	46 c0       	rjmp	.+140    	; 0x19f6 <openDoor+0x654>
	else if (__tmp > 65535)
    196a:	fe 01       	movw	r30, r28
    196c:	ff 96       	adiw	r30, 0x3f	; 63
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	3f ef       	ldi	r19, 0xFF	; 255
    197a:	4f e7       	ldi	r20, 0x7F	; 127
    197c:	57 e4       	ldi	r21, 0x47	; 71
    197e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1982:	18 16       	cp	r1, r24
    1984:	64 f5       	brge	.+88     	; 0x19de <openDoor+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1986:	fe 01       	movw	r30, r28
    1988:	ed 5b       	subi	r30, 0xBD	; 189
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	60 81       	ld	r22, Z
    198e:	71 81       	ldd	r23, Z+1	; 0x01
    1990:	82 81       	ldd	r24, Z+2	; 0x02
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e2       	ldi	r20, 0x20	; 32
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9e af       	std	Y+62, r25	; 0x3e
    19b2:	8d af       	std	Y+61, r24	; 0x3d
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <openDoor+0x632>
    19b6:	88 ec       	ldi	r24, 0xC8	; 200
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9c af       	std	Y+60, r25	; 0x3c
    19bc:	8b af       	std	Y+59, r24	; 0x3b
    19be:	8b ad       	ldd	r24, Y+59	; 0x3b
    19c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <openDoor+0x620>
    19c6:	9c af       	std	Y+60, r25	; 0x3c
    19c8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    19cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	9e af       	std	Y+62, r25	; 0x3e
    19d2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    19d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	69 f7       	brne	.-38     	; 0x19b6 <openDoor+0x614>
    19dc:	16 c0       	rjmp	.+44     	; 0x1a0a <openDoor+0x668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	fe 01       	movw	r30, r28
    19e0:	ff 96       	adiw	r30, 0x3f	; 63
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e af       	std	Y+62, r25	; 0x3e
    19f4:	8d af       	std	Y+61, r24	; 0x3d
    19f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19fa:	9a af       	std	Y+58, r25	; 0x3a
    19fc:	89 af       	std	Y+57, r24	; 0x39
    19fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1a00:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <openDoor+0x660>
    1a06:	9a af       	std	Y+58, r25	; 0x3a
    1a08:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				LCD_clearScreen();
    1a0a:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>

				LCD_displayString("*: Lock Door");
    1a0e:	8d ed       	ldi	r24, 0xDD	; 221
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
				LCD_goToRowColumn(1,0);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
				LCD_displayString("+: Change Pass");
    1a1e:	8a ee       	ldi	r24, 0xEA	; 234
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>

				key=KeyPad_getPressedKey();
    1a26:	0e 94 b8 12 	call	0x2570	; 0x2570 <KeyPad_getPressedKey>
    1a2a:	80 93 72 01 	sts	0x0172, r24
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a8 e4       	ldi	r26, 0x48	; 72
    1a34:	b2 e4       	ldi	r27, 0x42	; 66
    1a36:	8d ab       	std	Y+53, r24	; 0x35
    1a38:	9e ab       	std	Y+54, r25	; 0x36
    1a3a:	af ab       	std	Y+55, r26	; 0x37
    1a3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a40:	7e a9       	ldd	r23, Y+54	; 0x36
    1a42:	8f a9       	ldd	r24, Y+55	; 0x37
    1a44:	98 ad       	ldd	r25, Y+56	; 0x38
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a ef       	ldi	r20, 0xFA	; 250
    1a4c:	54 e4       	ldi	r21, 0x44	; 68
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	89 ab       	std	Y+49, r24	; 0x31
    1a58:	9a ab       	std	Y+50, r25	; 0x32
    1a5a:	ab ab       	std	Y+51, r26	; 0x33
    1a5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a60:	7a a9       	ldd	r23, Y+50	; 0x32
    1a62:	8b a9       	ldd	r24, Y+51	; 0x33
    1a64:	9c a9       	ldd	r25, Y+52	; 0x34
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <openDoor+0x6de>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	98 ab       	std	Y+48, r25	; 0x30
    1a7c:	8f a7       	std	Y+47, r24	; 0x2f
    1a7e:	3f c0       	rjmp	.+126    	; 0x1afe <openDoor+0x75c>
	else if (__tmp > 65535)
    1a80:	69 a9       	ldd	r22, Y+49	; 0x31
    1a82:	7a a9       	ldd	r23, Y+50	; 0x32
    1a84:	8b a9       	ldd	r24, Y+51	; 0x33
    1a86:	9c a9       	ldd	r25, Y+52	; 0x34
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	4c f5       	brge	.+82     	; 0x1aea <openDoor+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	6d a9       	ldd	r22, Y+53	; 0x35
    1a9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	98 ab       	std	Y+48, r25	; 0x30
    1abe:	8f a7       	std	Y+47, r24	; 0x2f
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <openDoor+0x73e>
    1ac2:	88 ec       	ldi	r24, 0xC8	; 200
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9e a7       	std	Y+46, r25	; 0x2e
    1ac8:	8d a7       	std	Y+45, r24	; 0x2d
    1aca:	8d a5       	ldd	r24, Y+45	; 0x2d
    1acc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <openDoor+0x72c>
    1ad2:	9e a7       	std	Y+46, r25	; 0x2e
    1ad4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ad8:	98 a9       	ldd	r25, Y+48	; 0x30
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	98 ab       	std	Y+48, r25	; 0x30
    1ade:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <openDoor+0x720>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <openDoor+0x770>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	69 a9       	ldd	r22, Y+49	; 0x31
    1aec:	7a a9       	ldd	r23, Y+50	; 0x32
    1aee:	8b a9       	ldd	r24, Y+51	; 0x33
    1af0:	9c a9       	ldd	r25, Y+52	; 0x34
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	98 ab       	std	Y+48, r25	; 0x30
    1afc:	8f a7       	std	Y+47, r24	; 0x2f
    1afe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b00:	98 a9       	ldd	r25, Y+48	; 0x30
    1b02:	9c a7       	std	Y+44, r25	; 0x2c
    1b04:	8b a7       	std	Y+43, r24	; 0x2b
    1b06:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b08:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <openDoor+0x768>
    1b0e:	9c a7       	std	Y+44, r25	; 0x2c
    1b10:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(50);

				if(key == '*')
    1b12:	80 91 72 01 	lds	r24, 0x0172
    1b16:	8a 32       	cpi	r24, 0x2A	; 42
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <openDoor+0x77a>
    1b1a:	f6 c0       	rjmp	.+492    	; 0x1d08 <openDoor+0x966>
				{
					rotateMotorCCW(15);
    1b1c:	8f e0       	ldi	r24, 0x0F	; 15
    1b1e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <rotateMotorCCW>
					LCD_clearScreen();
    1b22:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
					LCD_displayString("Locking Door...");
    1b26:	89 ef       	ldi	r24, 0xF9	; 249
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e8       	ldi	r25, 0x80	; 128
    1b32:	ab eb       	ldi	r26, 0xBB	; 187
    1b34:	b4 e4       	ldi	r27, 0x44	; 68
    1b36:	8f a3       	std	Y+39, r24	; 0x27
    1b38:	98 a7       	std	Y+40, r25	; 0x28
    1b3a:	a9 a7       	std	Y+41, r26	; 0x29
    1b3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b40:	78 a5       	ldd	r23, Y+40	; 0x28
    1b42:	89 a5       	ldd	r24, Y+41	; 0x29
    1b44:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	4a ef       	ldi	r20, 0xFA	; 250
    1b4c:	54 e4       	ldi	r21, 0x44	; 68
    1b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	8b a3       	std	Y+35, r24	; 0x23
    1b58:	9c a3       	std	Y+36, r25	; 0x24
    1b5a:	ad a3       	std	Y+37, r26	; 0x25
    1b5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b60:	7c a1       	ldd	r23, Y+36	; 0x24
    1b62:	8d a1       	ldd	r24, Y+37	; 0x25
    1b64:	9e a1       	ldd	r25, Y+38	; 0x26
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e8       	ldi	r20, 0x80	; 128
    1b6c:	5f e3       	ldi	r21, 0x3F	; 63
    1b6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b72:	88 23       	and	r24, r24
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <openDoor+0x7de>
		__ticks = 1;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9a a3       	std	Y+34, r25	; 0x22
    1b7c:	89 a3       	std	Y+33, r24	; 0x21
    1b7e:	3f c0       	rjmp	.+126    	; 0x1bfe <openDoor+0x85c>
	else if (__tmp > 65535)
    1b80:	6b a1       	ldd	r22, Y+35	; 0x23
    1b82:	7c a1       	ldd	r23, Y+36	; 0x24
    1b84:	8d a1       	ldd	r24, Y+37	; 0x25
    1b86:	9e a1       	ldd	r25, Y+38	; 0x26
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	3f ef       	ldi	r19, 0xFF	; 255
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	57 e4       	ldi	r21, 0x47	; 71
    1b90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	4c f5       	brge	.+82     	; 0x1bea <openDoor+0x848>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b98:	6f a1       	ldd	r22, Y+39	; 0x27
    1b9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e2       	ldi	r20, 0x20	; 32
    1ba6:	51 e4       	ldi	r21, 0x41	; 65
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9a a3       	std	Y+34, r25	; 0x22
    1bbe:	89 a3       	std	Y+33, r24	; 0x21
    1bc0:	0f c0       	rjmp	.+30     	; 0x1be0 <openDoor+0x83e>
    1bc2:	88 ec       	ldi	r24, 0xC8	; 200
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	98 a3       	std	Y+32, r25	; 0x20
    1bc8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bcc:	98 a1       	ldd	r25, Y+32	; 0x20
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <openDoor+0x82c>
    1bd2:	98 a3       	std	Y+32, r25	; 0x20
    1bd4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	9a a3       	std	Y+34, r25	; 0x22
    1bde:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be0:	89 a1       	ldd	r24, Y+33	; 0x21
    1be2:	9a a1       	ldd	r25, Y+34	; 0x22
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	69 f7       	brne	.-38     	; 0x1bc2 <openDoor+0x820>
    1be8:	14 c0       	rjmp	.+40     	; 0x1c12 <openDoor+0x870>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bea:	6b a1       	ldd	r22, Y+35	; 0x23
    1bec:	7c a1       	ldd	r23, Y+36	; 0x24
    1bee:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9a a3       	std	Y+34, r25	; 0x22
    1bfc:	89 a3       	std	Y+33, r24	; 0x21
    1bfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1c00:	9a a1       	ldd	r25, Y+34	; 0x22
    1c02:	9e 8f       	std	Y+30, r25	; 0x1e
    1c04:	8d 8f       	std	Y+29, r24	; 0x1d
    1c06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <openDoor+0x868>
    1c0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c10:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1500);
					LCD_clearScreen();
    1c12:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
					LCD_displayString("Door Locked!");
    1c16:	89 e0       	ldi	r24, 0x09	; 9
    1c18:	91 e0       	ldi	r25, 0x01	; 1
    1c1a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	aa ef       	ldi	r26, 0xFA	; 250
    1c24:	b3 e4       	ldi	r27, 0x43	; 67
    1c26:	89 8f       	std	Y+25, r24	; 0x19
    1c28:	9a 8f       	std	Y+26, r25	; 0x1a
    1c2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4a ef       	ldi	r20, 0xFA	; 250
    1c3c:	54 e4       	ldi	r21, 0x44	; 68
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	8d 8b       	std	Y+21, r24	; 0x15
    1c48:	9e 8b       	std	Y+22, r25	; 0x16
    1c4a:	af 8b       	std	Y+23, r26	; 0x17
    1c4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c50:	7e 89       	ldd	r23, Y+22	; 0x16
    1c52:	8f 89       	ldd	r24, Y+23	; 0x17
    1c54:	98 8d       	ldd	r25, Y+24	; 0x18
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e8       	ldi	r20, 0x80	; 128
    1c5c:	5f e3       	ldi	r21, 0x3F	; 63
    1c5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c62:	88 23       	and	r24, r24
    1c64:	2c f4       	brge	.+10     	; 0x1c70 <openDoor+0x8ce>
		__ticks = 1;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9c 8b       	std	Y+20, r25	; 0x14
    1c6c:	8b 8b       	std	Y+19, r24	; 0x13
    1c6e:	3f c0       	rjmp	.+126    	; 0x1cee <openDoor+0x94c>
	else if (__tmp > 65535)
    1c70:	6d 89       	ldd	r22, Y+21	; 0x15
    1c72:	7e 89       	ldd	r23, Y+22	; 0x16
    1c74:	8f 89       	ldd	r24, Y+23	; 0x17
    1c76:	98 8d       	ldd	r25, Y+24	; 0x18
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	4f e7       	ldi	r20, 0x7F	; 127
    1c7e:	57 e4       	ldi	r21, 0x47	; 71
    1c80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c84:	18 16       	cp	r1, r24
    1c86:	4c f5       	brge	.+82     	; 0x1cda <openDoor+0x938>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c88:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e2       	ldi	r20, 0x20	; 32
    1c96:	51 e4       	ldi	r21, 0x41	; 65
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9c 8b       	std	Y+20, r25	; 0x14
    1cae:	8b 8b       	std	Y+19, r24	; 0x13
    1cb0:	0f c0       	rjmp	.+30     	; 0x1cd0 <openDoor+0x92e>
    1cb2:	88 ec       	ldi	r24, 0xC8	; 200
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9a 8b       	std	Y+18, r25	; 0x12
    1cb8:	89 8b       	std	Y+17, r24	; 0x11
    1cba:	89 89       	ldd	r24, Y+17	; 0x11
    1cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <openDoor+0x91c>
    1cc2:	9a 8b       	std	Y+18, r25	; 0x12
    1cc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	9c 8b       	std	Y+20, r25	; 0x14
    1cce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	69 f7       	brne	.-38     	; 0x1cb2 <openDoor+0x910>
    1cd8:	14 c0       	rjmp	.+40     	; 0x1d02 <openDoor+0x960>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cda:	6d 89       	ldd	r22, Y+21	; 0x15
    1cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cde:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	9c 8b       	std	Y+20, r25	; 0x14
    1cec:	8b 8b       	std	Y+19, r24	; 0x13
    1cee:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf2:	98 8b       	std	Y+16, r25	; 0x10
    1cf4:	8f 87       	std	Y+15, r24	; 0x0f
    1cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf8:	98 89       	ldd	r25, Y+16	; 0x10
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <openDoor+0x958>
    1cfe:	98 8b       	std	Y+16, r25	; 0x10
    1d00:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					Step2();
    1d02:	0e 94 29 09 	call	0x1252	; 0x1252 <Step2>
    1d06:	8d c0       	rjmp	.+282    	; 0x1e22 <openDoor+0xa80>
				}
				else if(key == '+')
    1d08:	80 91 72 01 	lds	r24, 0x0172
    1d0c:	8b 32       	cpi	r24, 0x2B	; 43
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <openDoor+0x970>
    1d10:	88 c0       	rjmp	.+272    	; 0x1e22 <openDoor+0xa80>
				{
					changePass(); /*User proceeds to change password*/
    1d12:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <changePass>
    1d16:	85 c0       	rjmp	.+266    	; 0x1e22 <openDoor+0xa80>
				}
			}
			else
			{
				LCD_clearScreen();
    1d18:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
				LCD_goToRowColumn(0,0);
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
				LCD_displayString("PW Incorrect!");
    1d24:	86 e1       	ldi	r24, 0x16	; 22
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a8 ec       	ldi	r26, 0xC8	; 200
    1d32:	b2 e4       	ldi	r27, 0x42	; 66
    1d34:	8b 87       	std	Y+11, r24	; 0x0b
    1d36:	9c 87       	std	Y+12, r25	; 0x0c
    1d38:	ad 87       	std	Y+13, r26	; 0x0d
    1d3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a ef       	ldi	r20, 0xFA	; 250
    1d4a:	54 e4       	ldi	r21, 0x44	; 68
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8f 83       	std	Y+7, r24	; 0x07
    1d56:	98 87       	std	Y+8, r25	; 0x08
    1d58:	a9 87       	std	Y+9, r26	; 0x09
    1d5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5e:	78 85       	ldd	r23, Y+8	; 0x08
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <openDoor+0x9dc>
		__ticks = 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <openDoor+0xa5a>
	else if (__tmp > 65535)
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	57 e4       	ldi	r21, 0x47	; 71
    1d8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d92:	18 16       	cp	r1, r24
    1d94:	4c f5       	brge	.+82     	; 0x1de8 <openDoor+0xa46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <openDoor+0xa3c>
    1dc0:	88 ec       	ldi	r24, 0xC8	; 200
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <openDoor+0xa2a>
    1dd0:	9c 83       	std	Y+4, r25	; 0x04
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	69 f7       	brne	.-38     	; 0x1dc0 <openDoor+0xa1e>
    1de6:	14 c0       	rjmp	.+40     	; 0x1e10 <openDoor+0xa6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dea:	78 85       	ldd	r23, Y+8	; 0x08
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <openDoor+0xa66>
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(100);
				trialCount++;
    1e10:	de 01       	movw	r26, r28
    1e12:	ae 58       	subi	r26, 0x8E	; 142
    1e14:	bf 4f       	sbci	r27, 0xFF	; 255
    1e16:	fe 01       	movw	r30, r28
    1e18:	ee 58       	subi	r30, 0x8E	; 142
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8f 5f       	subi	r24, 0xFF	; 255
    1e20:	8c 93       	st	X, r24
void openDoor(void)
{
	uint8 i = 1, trialCount = 0, passTrialLength;
	char passTrial[MAXPASSLENGTH];

	while(trialCount < MAX_ALLOWED_TRIALS)
    1e22:	fe 01       	movw	r30, r28
    1e24:	ee 58       	subi	r30, 0x8E	; 142
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	83 30       	cpi	r24, 0x03	; 3
    1e2c:	08 f4       	brcc	.+2      	; 0x1e30 <openDoor+0xa8e>
    1e2e:	d0 ca       	rjmp	.-2656   	; 0x13d0 <openDoor+0x2e>
				_delay_ms(100);
				trialCount++;
			}
		}
	}
	buzzerON(60);
    1e30:	8c e3       	ldi	r24, 0x3C	; 60
    1e32:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <buzzerON>
}
    1e36:	cd 57       	subi	r28, 0x7D	; 125
    1e38:	df 4f       	sbci	r29, 0xFF	; 255
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	08 95       	ret

00001e4e <rotateMotorCW>:
 * Arguments:
 * uint8 seconds: is the number of seconds the motor will rotate.
 *
 *******************************************************************************/
void rotateMotorCW(uint8 a_seconds)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	0f 92       	push	r0
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	89 83       	std	Y+1, r24	; 0x01
	Timer1_setCallBack(stopMotor);
    1e5a:	8d e6       	ldi	r24, 0x6D	; 109
    1e5c:	9f e0       	ldi	r25, 0x0F	; 15
    1e5e:	0e 94 46 19 	call	0x328c	; 0x328c <Timer1_setCallBack>
	timerONSeconds(a_seconds); /*turns on the timer for amount of seconds input*/
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	0e 94 58 19 	call	0x32b0	; 0x32b0 <timerONSeconds>
	DDRD = (1 << PD2) | (1 << PD3);
    1e68:	e1 e3       	ldi	r30, 0x31	; 49
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	8c e0       	ldi	r24, 0x0C	; 12
    1e6e:	80 83       	st	Z, r24
	SET_BIT(PORTD, PD2);
    1e70:	a2 e3       	ldi	r26, 0x32	; 50
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e2 e3       	ldi	r30, 0x32	; 50
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	84 60       	ori	r24, 0x04	; 4
    1e7c:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,PD3);
    1e7e:	a2 e3       	ldi	r26, 0x32	; 50
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e2 e3       	ldi	r30, 0x32	; 50
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	87 7f       	andi	r24, 0xF7	; 247
    1e8a:	8c 93       	st	X, r24
}
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <rotateMotorCCW>:
 * uint8 seconds: is the number of seconds the motor will rotate.
 *
 *******************************************************************************/

void rotateMotorCCW(uint8 a_seconds)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	0f 92       	push	r0
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	89 83       	std	Y+1, r24	; 0x01
	Timer1_setCallBack(stopMotor);
    1ea0:	8d e6       	ldi	r24, 0x6D	; 109
    1ea2:	9f e0       	ldi	r25, 0x0F	; 15
    1ea4:	0e 94 46 19 	call	0x328c	; 0x328c <Timer1_setCallBack>
	timerONSeconds(a_seconds);
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	0e 94 58 19 	call	0x32b0	; 0x32b0 <timerONSeconds>
	DDRD = (1 << PD2) | (1 << PD3);
    1eae:	e1 e3       	ldi	r30, 0x31	; 49
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	8c e0       	ldi	r24, 0x0C	; 12
    1eb4:	80 83       	st	Z, r24
	SET_BIT(PORTD, PD3);
    1eb6:	a2 e3       	ldi	r26, 0x32	; 50
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e2 e3       	ldi	r30, 0x32	; 50
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	88 60       	ori	r24, 0x08	; 8
    1ec2:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,PD2);
    1ec4:	a2 e3       	ldi	r26, 0x32	; 50
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e2 e3       	ldi	r30, 0x32	; 50
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	8b 7f       	andi	r24, 0xFB	; 251
    1ed0:	8c 93       	st	X, r24
}
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <stopMotor>:
 *
 *******************************************************************************/


void stopMotor(void)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(PORTD,PD2);
    1ee2:	a2 e3       	ldi	r26, 0x32	; 50
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e2 e3       	ldi	r30, 0x32	; 50
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	8b 7f       	andi	r24, 0xFB	; 251
    1eee:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,PD3);
    1ef0:	a2 e3       	ldi	r26, 0x32	; 50
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e2 e3       	ldi	r30, 0x32	; 50
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	87 7f       	andi	r24, 0xF7	; 247
    1efc:	8c 93       	st	X, r24
}
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <changePass>:
 * Arguments: None
 *
 *******************************************************************************/

void changePass(void)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	af 97       	sbiw	r28, 0x2f	; 47
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
	char  passTrial[16], passTrialLength, trialCount=0;
    1f18:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 i=1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f1e:	4b c1       	rjmp	.+662    	; 0x21b6 <changePass+0x2b2>
	while(trialCount < MAX_ALLOWED_TRIALS)
	{
		LCD_clearScreen();
    1f20:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
		LCD_goToRowColumn(0,0);
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
		LCD_displayString("Enter Old PW");
    1f2c:	84 e2       	ldi	r24, 0x24	; 36
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>

		/*get input from user to compare against stored password*/

		key= KeyPad_getPressedKey();
    1f3c:	0e 94 b8 12 	call	0x2570	; 0x2570 <KeyPad_getPressedKey>
    1f40:	80 93 72 01 	sts	0x0172, r24
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a8 e4       	ldi	r26, 0x48	; 72
    1f4a:	b2 e4       	ldi	r27, 0x42	; 66
    1f4c:	89 8f       	std	Y+25, r24	; 0x19
    1f4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f50:	ab 8f       	std	Y+27, r26	; 0x1b
    1f52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	69 8d       	ldd	r22, Y+25	; 0x19
    1f56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a ef       	ldi	r20, 0xFA	; 250
    1f62:	54 e4       	ldi	r21, 0x44	; 68
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	8d 8b       	std	Y+21, r24	; 0x15
    1f6e:	9e 8b       	std	Y+22, r25	; 0x16
    1f70:	af 8b       	std	Y+23, r26	; 0x17
    1f72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f74:	6d 89       	ldd	r22, Y+21	; 0x15
    1f76:	7e 89       	ldd	r23, Y+22	; 0x16
    1f78:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <changePass+0x92>
		__ticks = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9c 8b       	std	Y+20, r25	; 0x14
    1f92:	8b 8b       	std	Y+19, r24	; 0x13
    1f94:	3f c0       	rjmp	.+126    	; 0x2014 <changePass+0x110>
	else if (__tmp > 65535)
    1f96:	6d 89       	ldd	r22, Y+21	; 0x15
    1f98:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	4c f5       	brge	.+82     	; 0x2000 <changePass+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fae:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9c 8b       	std	Y+20, r25	; 0x14
    1fd4:	8b 8b       	std	Y+19, r24	; 0x13
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <changePass+0xf2>
    1fd8:	88 ec       	ldi	r24, 0xC8	; 200
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9a 8b       	std	Y+18, r25	; 0x12
    1fde:	89 8b       	std	Y+17, r24	; 0x11
    1fe0:	89 89       	ldd	r24, Y+17	; 0x11
    1fe2:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <changePass+0xe0>
    1fe8:	9a 8b       	std	Y+18, r25	; 0x12
    1fea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	8b 89       	ldd	r24, Y+19	; 0x13
    1fee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	9c 8b       	std	Y+20, r25	; 0x14
    1ff4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <changePass+0xd4>
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <changePass+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2000:	6d 89       	ldd	r22, Y+21	; 0x15
    2002:	7e 89       	ldd	r23, Y+22	; 0x16
    2004:	8f 89       	ldd	r24, Y+23	; 0x17
    2006:	98 8d       	ldd	r25, Y+24	; 0x18
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9c 8b       	std	Y+20, r25	; 0x14
    2012:	8b 8b       	std	Y+19, r24	; 0x13
    2014:	8b 89       	ldd	r24, Y+19	; 0x13
    2016:	9c 89       	ldd	r25, Y+20	; 0x14
    2018:	98 8b       	std	Y+16, r25	; 0x10
    201a:	8f 87       	std	Y+15, r24	; 0x0f
    201c:	8f 85       	ldd	r24, Y+15	; 0x0f
    201e:	98 89       	ldd	r25, Y+16	; 0x10
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <changePass+0x11c>
    2024:	98 8b       	std	Y+16, r25	; 0x10
    2026:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		if(key>='0' && key <= '9')
    2028:	80 91 72 01 	lds	r24, 0x0172
    202c:	80 33       	cpi	r24, 0x30	; 48
    202e:	08 f4       	brcc	.+2      	; 0x2032 <changePass+0x12e>
    2030:	96 c0       	rjmp	.+300    	; 0x215e <changePass+0x25a>
    2032:	80 91 72 01 	lds	r24, 0x0172
    2036:	8a 33       	cpi	r24, 0x3A	; 58
    2038:	08 f0       	brcs	.+2      	; 0x203c <changePass+0x138>
    203a:	91 c0       	rjmp	.+290    	; 0x215e <changePass+0x25a>
		{
			LCD_displayCharacter('*');
    203c:	8a e2       	ldi	r24, 0x2A	; 42
    203e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayCharacter>
			passTrial[0] = key;
    2042:	80 91 72 01 	lds	r24, 0x0172
    2046:	88 a3       	std	Y+32, r24	; 0x20
    2048:	8a c0       	rjmp	.+276    	; 0x215e <changePass+0x25a>
		}

		while (key>='0' && key <= '9')
		{
			key= KeyPad_getPressedKey();
    204a:	0e 94 b8 12 	call	0x2570	; 0x2570 <KeyPad_getPressedKey>
    204e:	80 93 72 01 	sts	0x0172, r24
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a8 e4       	ldi	r26, 0x48	; 72
    2058:	b2 e4       	ldi	r27, 0x42	; 66
    205a:	8b 87       	std	Y+11, r24	; 0x0b
    205c:	9c 87       	std	Y+12, r25	; 0x0c
    205e:	ad 87       	std	Y+13, r26	; 0x0d
    2060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	6b 85       	ldd	r22, Y+11	; 0x0b
    2064:	7c 85       	ldd	r23, Y+12	; 0x0c
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a ef       	ldi	r20, 0xFA	; 250
    2070:	54 e4       	ldi	r21, 0x44	; 68
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8f 83       	std	Y+7, r24	; 0x07
    207c:	98 87       	std	Y+8, r25	; 0x08
    207e:	a9 87       	std	Y+9, r26	; 0x09
    2080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <changePass+0x1a0>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <changePass+0x21e>
	else if (__tmp > 65535)
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <changePass+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <changePass+0x200>
    20e6:	88 ec       	ldi	r24, 0xC8	; 200
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9c 83       	std	Y+4, r25	; 0x04
    20ec:	8b 83       	std	Y+3, r24	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <changePass+0x1ee>
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <changePass+0x1e2>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <changePass+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <changePass+0x22a>
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			LCD_displayCharacter('*');
    2136:	8a e2       	ldi	r24, 0x2A	; 42
    2138:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayCharacter>
			passTrial[i] = key;
    213c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 91 72 01 	lds	r20, 0x0172
    2146:	ce 01       	movw	r24, r28
    2148:	80 96       	adiw	r24, 0x20	; 32
    214a:	fc 01       	movw	r30, r24
    214c:	e2 0f       	add	r30, r18
    214e:	f3 1f       	adc	r31, r19
    2150:	40 83       	st	Z, r20
			i++;
    2152:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2154:	8f 5f       	subi	r24, 0xFF	; 255
    2156:	8d 8f       	std	Y+29, r24	; 0x1d
			passTrialLength++;
    2158:	8f 8d       	ldd	r24, Y+31	; 0x1f
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	8f 8f       	std	Y+31, r24	; 0x1f
		{
			LCD_displayCharacter('*');
			passTrial[0] = key;
		}

		while (key>='0' && key <= '9')
    215e:	80 91 72 01 	lds	r24, 0x0172
    2162:	80 33       	cpi	r24, 0x30	; 48
    2164:	28 f0       	brcs	.+10     	; 0x2170 <changePass+0x26c>
    2166:	80 91 72 01 	lds	r24, 0x0172
    216a:	8a 33       	cpi	r24, 0x3A	; 58
    216c:	08 f4       	brcc	.+2      	; 0x2170 <changePass+0x26c>
    216e:	6d cf       	rjmp	.-294    	; 0x204a <changePass+0x146>
			i++;
			passTrialLength++;
		}


		if (key == '=')
    2170:	80 91 72 01 	lds	r24, 0x0172
    2174:	8d 33       	cpi	r24, 0x3D	; 61
    2176:	f9 f4       	brne	.+62     	; 0x21b6 <changePass+0x2b2>
		{
			if(verifyPass(g_savedPass,passTrial, passTrialLength)==SUCCESS)
    2178:	83 e9       	ldi	r24, 0x93	; 147
    217a:	91 e0       	ldi	r25, 0x01	; 1
    217c:	9e 01       	movw	r18, r28
    217e:	20 5e       	subi	r18, 0xE0	; 224
    2180:	3f 4f       	sbci	r19, 0xFF	; 255
    2182:	b9 01       	movw	r22, r18
    2184:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2186:	0e 94 ee 08 	call	0x11dc	; 0x11dc <verifyPass>
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	39 f4       	brne	.+14     	; 0x219c <changePass+0x298>
			{
				trialCount=0;
    218e:	1e 8e       	std	Y+30, r1	; 0x1e
				UART_sendByte(CHANGE_PASS); /*sends byte to MC2 to change pw stored in EEPROM*/
    2190:	87 e7       	ldi	r24, 0x77	; 119
    2192:	0e 94 bf 19 	call	0x337e	; 0x337e <UART_sendByte>
				setPassword(); /*User proceeds to set a new Password*/
    2196:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPassword>
    219a:	0d c0       	rjmp	.+26     	; 0x21b6 <changePass+0x2b2>
			}
			else
			{
				LCD_clearScreen();
    219c:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
				LCD_goToRowColumn(0,0);
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
				LCD_displayString("PW Incorrect!");
    21a8:	86 e1       	ldi	r24, 0x16	; 22
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
				trialCount++;
    21b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21b2:	8f 5f       	subi	r24, 0xFF	; 255
    21b4:	8e 8f       	std	Y+30, r24	; 0x1e

void changePass(void)
{
	char  passTrial[16], passTrialLength, trialCount=0;
	uint8 i=1;
	while(trialCount < MAX_ALLOWED_TRIALS)
    21b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21b8:	83 30       	cpi	r24, 0x03	; 3
    21ba:	08 f4       	brcc	.+2      	; 0x21be <changePass+0x2ba>
    21bc:	b1 ce       	rjmp	.-670    	; 0x1f20 <changePass+0x1c>
				trialCount++;
			}
		}
	}

	buzzerON(60); /*turns on the buzzer for 60 seconds*/
    21be:	8c e3       	ldi	r24, 0x3C	; 60
    21c0:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <buzzerON>
}
    21c4:	af 96       	adiw	r28, 0x2f	; 47
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <buzzerON>:
 * Arguments:
 * uint8 seconds: is the number of seconds the buzzer will stay on.
 *
 *******************************************************************************/
void buzzerON(uint8 a_seconds)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	0f 92       	push	r0
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
    21e2:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
	LCD_displayString("INTRUDER ALERT!");
    21e6:	81 e3       	ldi	r24, 0x31	; 49
    21e8:	91 e0       	ldi	r25, 0x01	; 1
    21ea:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
	Timer1_setCallBack(buzzerOFF);
    21ee:	84 e1       	ldi	r24, 0x14	; 20
    21f0:	91 e1       	ldi	r25, 0x11	; 17
    21f2:	0e 94 46 19 	call	0x328c	; 0x328c <Timer1_setCallBack>
	timerONSeconds(a_seconds);
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	0e 94 58 19 	call	0x32b0	; 0x32b0 <timerONSeconds>
	DDRD = (1 << PD4) | (1 << PD5);
    21fc:	e1 e3       	ldi	r30, 0x31	; 49
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 e3       	ldi	r24, 0x30	; 48
    2202:	80 83       	st	Z, r24
	SET_BIT(PORTD, PD4);
    2204:	a2 e3       	ldi	r26, 0x32	; 50
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e2 e3       	ldi	r30, 0x32	; 50
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	80 61       	ori	r24, 0x10	; 16
    2210:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,PD5);
    2212:	a2 e3       	ldi	r26, 0x32	; 50
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e2 e3       	ldi	r30, 0x32	; 50
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8f 7d       	andi	r24, 0xDF	; 223
    221e:	8c 93       	st	X, r24
}
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <buzzerOFF>:
 * Arguments: None
 *
 *******************************************************************************/

void buzzerOFF (void)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(PORTD,PD5);
    2230:	a2 e3       	ldi	r26, 0x32	; 50
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e2 e3       	ldi	r30, 0x32	; 50
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8f 7d       	andi	r24, 0xDF	; 223
    223c:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD, PD4);
    223e:	a2 e3       	ldi	r26, 0x32	; 50
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e2 e3       	ldi	r30, 0x32	; 50
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8f 7e       	andi	r24, 0xEF	; 239
    224a:	8c 93       	st	X, r24
	Step2();
    224c:	0e 94 29 09 	call	0x1252	; 0x1252 <Step2>
}
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <main>:
 * Arguments: None
 *
 *******************************************************************************/

int main (void)
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	ab 97       	sbiw	r28, 0x2b	; 43
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
	uint8 stage_check;

	UART_init();
    226a:	0e 94 a2 19 	call	0x3344	; 0x3344 <UART_init>
	LCD_init();
    226e:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_init>

	LCD_displayString("Door Locker");
    2272:	81 e4       	ldi	r24, 0x41	; 65
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	aa ef       	ldi	r26, 0xFA	; 250
    2280:	b3 e4       	ldi	r27, 0x43	; 67
    2282:	8f a3       	std	Y+39, r24	; 0x27
    2284:	98 a7       	std	Y+40, r25	; 0x28
    2286:	a9 a7       	std	Y+41, r26	; 0x29
    2288:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228a:	6f a1       	ldd	r22, Y+39	; 0x27
    228c:	78 a5       	ldd	r23, Y+40	; 0x28
    228e:	89 a5       	ldd	r24, Y+41	; 0x29
    2290:	9a a5       	ldd	r25, Y+42	; 0x2a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4a ef       	ldi	r20, 0xFA	; 250
    2298:	54 e4       	ldi	r21, 0x44	; 68
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	8b a3       	std	Y+35, r24	; 0x23
    22a4:	9c a3       	std	Y+36, r25	; 0x24
    22a6:	ad a3       	std	Y+37, r26	; 0x25
    22a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22aa:	6b a1       	ldd	r22, Y+35	; 0x23
    22ac:	7c a1       	ldd	r23, Y+36	; 0x24
    22ae:	8d a1       	ldd	r24, Y+37	; 0x25
    22b0:	9e a1       	ldd	r25, Y+38	; 0x26
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	2c f4       	brge	.+10     	; 0x22cc <main+0x76>
		__ticks = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9a a3       	std	Y+34, r25	; 0x22
    22c8:	89 a3       	std	Y+33, r24	; 0x21
    22ca:	3f c0       	rjmp	.+126    	; 0x234a <main+0xf4>
	else if (__tmp > 65535)
    22cc:	6b a1       	ldd	r22, Y+35	; 0x23
    22ce:	7c a1       	ldd	r23, Y+36	; 0x24
    22d0:	8d a1       	ldd	r24, Y+37	; 0x25
    22d2:	9e a1       	ldd	r25, Y+38	; 0x26
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	3f ef       	ldi	r19, 0xFF	; 255
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	57 e4       	ldi	r21, 0x47	; 71
    22dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	4c f5       	brge	.+82     	; 0x2336 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e4:	6f a1       	ldd	r22, Y+39	; 0x27
    22e6:	78 a5       	ldd	r23, Y+40	; 0x28
    22e8:	89 a5       	ldd	r24, Y+41	; 0x29
    22ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e2       	ldi	r20, 0x20	; 32
    22f2:	51 e4       	ldi	r21, 0x41	; 65
    22f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9a a3       	std	Y+34, r25	; 0x22
    230a:	89 a3       	std	Y+33, r24	; 0x21
    230c:	0f c0       	rjmp	.+30     	; 0x232c <main+0xd6>
    230e:	88 ec       	ldi	r24, 0xC8	; 200
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	98 a3       	std	Y+32, r25	; 0x20
    2314:	8f 8f       	std	Y+31, r24	; 0x1f
    2316:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2318:	98 a1       	ldd	r25, Y+32	; 0x20
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <main+0xc4>
    231e:	98 a3       	std	Y+32, r25	; 0x20
    2320:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2322:	89 a1       	ldd	r24, Y+33	; 0x21
    2324:	9a a1       	ldd	r25, Y+34	; 0x22
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	9a a3       	std	Y+34, r25	; 0x22
    232a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232c:	89 a1       	ldd	r24, Y+33	; 0x21
    232e:	9a a1       	ldd	r25, Y+34	; 0x22
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	69 f7       	brne	.-38     	; 0x230e <main+0xb8>
    2334:	14 c0       	rjmp	.+40     	; 0x235e <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2336:	6b a1       	ldd	r22, Y+35	; 0x23
    2338:	7c a1       	ldd	r23, Y+36	; 0x24
    233a:	8d a1       	ldd	r24, Y+37	; 0x25
    233c:	9e a1       	ldd	r25, Y+38	; 0x26
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9a a3       	std	Y+34, r25	; 0x22
    2348:	89 a3       	std	Y+33, r24	; 0x21
    234a:	89 a1       	ldd	r24, Y+33	; 0x21
    234c:	9a a1       	ldd	r25, Y+34	; 0x22
    234e:	9e 8f       	std	Y+30, r25	; 0x1e
    2350:	8d 8f       	std	Y+29, r24	; 0x1d
    2352:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2354:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <main+0x100>
    235a:	9e 8f       	std	Y+30, r25	; 0x1e
    235c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	while(UART_receiveByte() != M2_READY){}; /*Processor waits to sync UART with second MC*/
    235e:	0e 94 d6 19 	call	0x33ac	; 0x33ac <UART_receiveByte>
    2362:	80 31       	cpi	r24, 0x10	; 16
    2364:	e1 f7       	brne	.-8      	; 0x235e <main+0x108>
	stage_check = UART_receiveByte(); /*checks if a password is already stored in eeprom on other MC*/
    2366:	0e 94 d6 19 	call	0x33ac	; 0x33ac <UART_receiveByte>
    236a:	8b a7       	std	Y+43, r24	; 0x2b

	if(stage_check == FIRST_TIME)
    236c:	8b a5       	ldd	r24, Y+43	; 0x2b
    236e:	82 31       	cpi	r24, 0x12	; 18
    2370:	09 f0       	breq	.+2      	; 0x2374 <main+0x11e>
    2372:	7b c0       	rjmp	.+246    	; 0x246a <main+0x214>
	{
		LCD_clearScreen();
    2374:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
		LCD_displayString("Welcome");
    2378:	8d e4       	ldi	r24, 0x4D	; 77
    237a:	91 e0       	ldi	r25, 0x01	; 1
    237c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	aa ef       	ldi	r26, 0xFA	; 250
    2386:	b3 e4       	ldi	r27, 0x43	; 67
    2388:	89 8f       	std	Y+25, r24	; 0x19
    238a:	9a 8f       	std	Y+26, r25	; 0x1a
    238c:	ab 8f       	std	Y+27, r26	; 0x1b
    238e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2390:	69 8d       	ldd	r22, Y+25	; 0x19
    2392:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2394:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2396:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	4a ef       	ldi	r20, 0xFA	; 250
    239e:	54 e4       	ldi	r21, 0x44	; 68
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8d 8b       	std	Y+21, r24	; 0x15
    23aa:	9e 8b       	std	Y+22, r25	; 0x16
    23ac:	af 8b       	std	Y+23, r26	; 0x17
    23ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23b0:	6d 89       	ldd	r22, Y+21	; 0x15
    23b2:	7e 89       	ldd	r23, Y+22	; 0x16
    23b4:	8f 89       	ldd	r24, Y+23	; 0x17
    23b6:	98 8d       	ldd	r25, Y+24	; 0x18
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	2c f4       	brge	.+10     	; 0x23d2 <main+0x17c>
		__ticks = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	9c 8b       	std	Y+20, r25	; 0x14
    23ce:	8b 8b       	std	Y+19, r24	; 0x13
    23d0:	3f c0       	rjmp	.+126    	; 0x2450 <main+0x1fa>
	else if (__tmp > 65535)
    23d2:	6d 89       	ldd	r22, Y+21	; 0x15
    23d4:	7e 89       	ldd	r23, Y+22	; 0x16
    23d6:	8f 89       	ldd	r24, Y+23	; 0x17
    23d8:	98 8d       	ldd	r25, Y+24	; 0x18
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	3f ef       	ldi	r19, 0xFF	; 255
    23de:	4f e7       	ldi	r20, 0x7F	; 127
    23e0:	57 e4       	ldi	r21, 0x47	; 71
    23e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	4c f5       	brge	.+82     	; 0x243c <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ea:	69 8d       	ldd	r22, Y+25	; 0x19
    23ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e2       	ldi	r20, 0x20	; 32
    23f8:	51 e4       	ldi	r21, 0x41	; 65
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <main+0x1dc>
    2414:	88 ec       	ldi	r24, 0xC8	; 200
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	9a 8b       	std	Y+18, r25	; 0x12
    241a:	89 8b       	std	Y+17, r24	; 0x11
    241c:	89 89       	ldd	r24, Y+17	; 0x11
    241e:	9a 89       	ldd	r25, Y+18	; 0x12
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <main+0x1ca>
    2424:	9a 8b       	std	Y+18, r25	; 0x12
    2426:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2428:	8b 89       	ldd	r24, Y+19	; 0x13
    242a:	9c 89       	ldd	r25, Y+20	; 0x14
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	9c 8b       	std	Y+20, r25	; 0x14
    2430:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2432:	8b 89       	ldd	r24, Y+19	; 0x13
    2434:	9c 89       	ldd	r25, Y+20	; 0x14
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	69 f7       	brne	.-38     	; 0x2414 <main+0x1be>
    243a:	14 c0       	rjmp	.+40     	; 0x2464 <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243c:	6d 89       	ldd	r22, Y+21	; 0x15
    243e:	7e 89       	ldd	r23, Y+22	; 0x16
    2440:	8f 89       	ldd	r24, Y+23	; 0x17
    2442:	98 8d       	ldd	r25, Y+24	; 0x18
    2444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9c 8b       	std	Y+20, r25	; 0x14
    244e:	8b 8b       	std	Y+19, r24	; 0x13
    2450:	8b 89       	ldd	r24, Y+19	; 0x13
    2452:	9c 89       	ldd	r25, Y+20	; 0x14
    2454:	98 8b       	std	Y+16, r25	; 0x10
    2456:	8f 87       	std	Y+15, r24	; 0x0f
    2458:	8f 85       	ldd	r24, Y+15	; 0x0f
    245a:	98 89       	ldd	r25, Y+16	; 0x10
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <main+0x206>
    2460:	98 8b       	std	Y+16, r25	; 0x10
    2462:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		setPassword();
    2464:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPassword>
    2468:	82 c0       	rjmp	.+260    	; 0x256e <main+0x318>
	}
	else
	{
		LCD_clearScreen();
    246a:	0e 94 67 18 	call	0x30ce	; 0x30ce <LCD_clearScreen>
		LCD_displayString("Welcome Back");
    246e:	85 e5       	ldi	r24, 0x55	; 85
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	aa ef       	ldi	r26, 0xFA	; 250
    247c:	b3 e4       	ldi	r27, 0x43	; 67
    247e:	8b 87       	std	Y+11, r24	; 0x0b
    2480:	9c 87       	std	Y+12, r25	; 0x0c
    2482:	ad 87       	std	Y+13, r26	; 0x0d
    2484:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	6b 85       	ldd	r22, Y+11	; 0x0b
    2488:	7c 85       	ldd	r23, Y+12	; 0x0c
    248a:	8d 85       	ldd	r24, Y+13	; 0x0d
    248c:	9e 85       	ldd	r25, Y+14	; 0x0e
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	4a ef       	ldi	r20, 0xFA	; 250
    2494:	54 e4       	ldi	r21, 0x44	; 68
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8f 83       	std	Y+7, r24	; 0x07
    24a0:	98 87       	std	Y+8, r25	; 0x08
    24a2:	a9 87       	std	Y+9, r26	; 0x09
    24a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	2c f4       	brge	.+10     	; 0x24c8 <main+0x272>
		__ticks = 1;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	3f c0       	rjmp	.+126    	; 0x2546 <main+0x2f0>
	else if (__tmp > 65535)
    24c8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ca:	78 85       	ldd	r23, Y+8	; 0x08
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	57 e4       	ldi	r21, 0x47	; 71
    24d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24dc:	18 16       	cp	r1, r24
    24de:	4c f5       	brge	.+82     	; 0x2532 <main+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e2       	ldi	r20, 0x20	; 32
    24ee:	51 e4       	ldi	r21, 0x41	; 65
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	0f c0       	rjmp	.+30     	; 0x2528 <main+0x2d2>
    250a:	88 ec       	ldi	r24, 0xC8	; 200
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9c 83       	std	Y+4, r25	; 0x04
    2510:	8b 83       	std	Y+3, r24	; 0x03
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <main+0x2c0>
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	9e 81       	ldd	r25, Y+6	; 0x06
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	9e 83       	std	Y+6, r25	; 0x06
    2526:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	69 f7       	brne	.-38     	; 0x250a <main+0x2b4>
    2530:	14 c0       	rjmp	.+40     	; 0x255a <main+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9e 83       	std	Y+6, r25	; 0x06
    2544:	8d 83       	std	Y+5, r24	; 0x05
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	9a 83       	std	Y+2, r25	; 0x02
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	9a 81       	ldd	r25, Y+2	; 0x02
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <main+0x2fc>
    2556:	9a 83       	std	Y+2, r25	; 0x02
    2558:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		g_passLength = UART_receiveByte(); /*receives the length of stored pass from second MC*/
    255a:	0e 94 d6 19 	call	0x33ac	; 0x33ac <UART_receiveByte>
    255e:	80 93 a3 01 	sts	0x01A3, r24
		UART_receiveString(g_savedPass); /*receives password stored in eeprom by seconds MC*/
    2562:	83 e9       	ldi	r24, 0x93	; 147
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	0e 94 0e 1a 	call	0x341c	; 0x341c <UART_receiveString>
		Step2(); /*user proceeds to seconds stage*/
    256a:	0e 94 29 09 	call	0x1252	; 0x1252 <Step2>
    256e:	ff cf       	rjmp	.-2      	; 0x256e <main+0x318>

00002570 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	00 d0       	rcall	.+0      	; 0x2576 <KeyPad_getPressedKey+0x6>
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    257a:	1a 82       	std	Y+2, r1	; 0x02
    257c:	4c c0       	rjmp	.+152    	; 0x2616 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    257e:	ea e3       	ldi	r30, 0x3A	; 58
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	80 e1       	ldi	r24, 0x10	; 16
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <KeyPad_getPressedKey+0x22>
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	2a 95       	dec	r18
    2594:	e2 f7       	brpl	.-8      	; 0x258e <KeyPad_getPressedKey+0x1e>
    2596:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    2598:	eb e3       	ldi	r30, 0x3B	; 59
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	80 e1       	ldi	r24, 0x10	; 16
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	02 2e       	mov	r0, r18
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <KeyPad_getPressedKey+0x3e>
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	0a 94       	dec	r0
    25b0:	e2 f7       	brpl	.-8      	; 0x25aa <KeyPad_getPressedKey+0x3a>
    25b2:	80 95       	com	r24
    25b4:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    25b6:	19 82       	std	Y+1, r1	; 0x01
    25b8:	28 c0       	rjmp	.+80     	; 0x260a <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    25ba:	e9 e3       	ldi	r30, 0x39	; 57
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	a9 01       	movw	r20, r18
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <KeyPad_getPressedKey+0x62>
    25ce:	55 95       	asr	r21
    25d0:	47 95       	ror	r20
    25d2:	8a 95       	dec	r24
    25d4:	e2 f7       	brpl	.-8      	; 0x25ce <KeyPad_getPressedKey+0x5e>
    25d6:	ca 01       	movw	r24, r20
    25d8:	81 70       	andi	r24, 0x01	; 1
    25da:	90 70       	andi	r25, 0x00	; 0
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	91 f4       	brne	.+36     	; 0x2604 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	98 2f       	mov	r25, r24
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	89 0f       	add	r24, r25
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	0e 94 10 13 	call	0x2620	; 0x2620 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	84 30       	cpi	r24, 0x04	; 4
    260e:	a8 f2       	brcs	.-86     	; 0x25ba <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	8f 5f       	subi	r24, 0xFF	; 255
    2614:	8a 83       	std	Y+2, r24	; 0x02
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	84 30       	cpi	r24, 0x04	; 4
    261a:	08 f4       	brcc	.+2      	; 0x261e <KeyPad_getPressedKey+0xae>
    261c:	b0 cf       	rjmp	.-160    	; 0x257e <KeyPad_getPressedKey+0xe>
    261e:	ad cf       	rjmp	.-166    	; 0x257a <KeyPad_getPressedKey+0xa>

00002620 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	00 d0       	rcall	.+0      	; 0x2626 <KeyPad_4x4_adjustKeyNumber+0x6>
    2626:	00 d0       	rcall	.+0      	; 0x2628 <KeyPad_4x4_adjustKeyNumber+0x8>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	3c 83       	std	Y+4, r19	; 0x04
    2636:	2b 83       	std	Y+3, r18	; 0x03
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	88 30       	cpi	r24, 0x08	; 8
    263e:	91 05       	cpc	r25, r1
    2640:	09 f4       	brne	.+2      	; 0x2644 <KeyPad_4x4_adjustKeyNumber+0x24>
    2642:	69 c0       	rjmp	.+210    	; 0x2716 <KeyPad_4x4_adjustKeyNumber+0xf6>
    2644:	2b 81       	ldd	r18, Y+3	; 0x03
    2646:	3c 81       	ldd	r19, Y+4	; 0x04
    2648:	29 30       	cpi	r18, 0x09	; 9
    264a:	31 05       	cpc	r19, r1
    264c:	4c f5       	brge	.+82     	; 0x26a0 <KeyPad_4x4_adjustKeyNumber+0x80>
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	84 30       	cpi	r24, 0x04	; 4
    2654:	91 05       	cpc	r25, r1
    2656:	09 f4       	brne	.+2      	; 0x265a <KeyPad_4x4_adjustKeyNumber+0x3a>
    2658:	52 c0       	rjmp	.+164    	; 0x26fe <KeyPad_4x4_adjustKeyNumber+0xde>
    265a:	2b 81       	ldd	r18, Y+3	; 0x03
    265c:	3c 81       	ldd	r19, Y+4	; 0x04
    265e:	25 30       	cpi	r18, 0x05	; 5
    2660:	31 05       	cpc	r19, r1
    2662:	94 f4       	brge	.+36     	; 0x2688 <KeyPad_4x4_adjustKeyNumber+0x68>
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	82 30       	cpi	r24, 0x02	; 2
    266a:	91 05       	cpc	r25, r1
    266c:	09 f4       	brne	.+2      	; 0x2670 <KeyPad_4x4_adjustKeyNumber+0x50>
    266e:	41 c0       	rjmp	.+130    	; 0x26f2 <KeyPad_4x4_adjustKeyNumber+0xd2>
    2670:	2b 81       	ldd	r18, Y+3	; 0x03
    2672:	3c 81       	ldd	r19, Y+4	; 0x04
    2674:	23 30       	cpi	r18, 0x03	; 3
    2676:	31 05       	cpc	r19, r1
    2678:	0c f0       	brlt	.+2      	; 0x267c <KeyPad_4x4_adjustKeyNumber+0x5c>
    267a:	3e c0       	rjmp	.+124    	; 0x26f8 <KeyPad_4x4_adjustKeyNumber+0xd8>
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	91 05       	cpc	r25, r1
    2684:	99 f1       	breq	.+102    	; 0x26ec <KeyPad_4x4_adjustKeyNumber+0xcc>
    2686:	5f c0       	rjmp	.+190    	; 0x2746 <KeyPad_4x4_adjustKeyNumber+0x126>
    2688:	2b 81       	ldd	r18, Y+3	; 0x03
    268a:	3c 81       	ldd	r19, Y+4	; 0x04
    268c:	26 30       	cpi	r18, 0x06	; 6
    268e:	31 05       	cpc	r19, r1
    2690:	09 f4       	brne	.+2      	; 0x2694 <KeyPad_4x4_adjustKeyNumber+0x74>
    2692:	3b c0       	rjmp	.+118    	; 0x270a <KeyPad_4x4_adjustKeyNumber+0xea>
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	87 30       	cpi	r24, 0x07	; 7
    269a:	91 05       	cpc	r25, r1
    269c:	cc f5       	brge	.+114    	; 0x2710 <KeyPad_4x4_adjustKeyNumber+0xf0>
    269e:	32 c0       	rjmp	.+100    	; 0x2704 <KeyPad_4x4_adjustKeyNumber+0xe4>
    26a0:	2b 81       	ldd	r18, Y+3	; 0x03
    26a2:	3c 81       	ldd	r19, Y+4	; 0x04
    26a4:	2c 30       	cpi	r18, 0x0C	; 12
    26a6:	31 05       	cpc	r19, r1
    26a8:	09 f4       	brne	.+2      	; 0x26ac <KeyPad_4x4_adjustKeyNumber+0x8c>
    26aa:	41 c0       	rjmp	.+130    	; 0x272e <KeyPad_4x4_adjustKeyNumber+0x10e>
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	9c 81       	ldd	r25, Y+4	; 0x04
    26b0:	8d 30       	cpi	r24, 0x0D	; 13
    26b2:	91 05       	cpc	r25, r1
    26b4:	5c f4       	brge	.+22     	; 0x26cc <KeyPad_4x4_adjustKeyNumber+0xac>
    26b6:	2b 81       	ldd	r18, Y+3	; 0x03
    26b8:	3c 81       	ldd	r19, Y+4	; 0x04
    26ba:	2a 30       	cpi	r18, 0x0A	; 10
    26bc:	31 05       	cpc	r19, r1
    26be:	89 f1       	breq	.+98     	; 0x2722 <KeyPad_4x4_adjustKeyNumber+0x102>
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	9c 81       	ldd	r25, Y+4	; 0x04
    26c4:	8b 30       	cpi	r24, 0x0B	; 11
    26c6:	91 05       	cpc	r25, r1
    26c8:	7c f5       	brge	.+94     	; 0x2728 <KeyPad_4x4_adjustKeyNumber+0x108>
    26ca:	28 c0       	rjmp	.+80     	; 0x271c <KeyPad_4x4_adjustKeyNumber+0xfc>
    26cc:	2b 81       	ldd	r18, Y+3	; 0x03
    26ce:	3c 81       	ldd	r19, Y+4	; 0x04
    26d0:	2f 30       	cpi	r18, 0x0F	; 15
    26d2:	31 05       	cpc	r19, r1
    26d4:	91 f1       	breq	.+100    	; 0x273a <KeyPad_4x4_adjustKeyNumber+0x11a>
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	80 31       	cpi	r24, 0x10	; 16
    26dc:	91 05       	cpc	r25, r1
    26de:	81 f1       	breq	.+96     	; 0x2740 <KeyPad_4x4_adjustKeyNumber+0x120>
    26e0:	2b 81       	ldd	r18, Y+3	; 0x03
    26e2:	3c 81       	ldd	r19, Y+4	; 0x04
    26e4:	2e 30       	cpi	r18, 0x0E	; 14
    26e6:	31 05       	cpc	r19, r1
    26e8:	29 f1       	breq	.+74     	; 0x2734 <KeyPad_4x4_adjustKeyNumber+0x114>
    26ea:	2d c0       	rjmp	.+90     	; 0x2746 <KeyPad_4x4_adjustKeyNumber+0x126>
	{
		case 1: return '7';
    26ec:	37 e3       	ldi	r19, 0x37	; 55
    26ee:	3a 83       	std	Y+2, r19	; 0x02
    26f0:	2c c0       	rjmp	.+88     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 2: return '8';
    26f2:	88 e3       	ldi	r24, 0x38	; 56
    26f4:	8a 83       	std	Y+2, r24	; 0x02
    26f6:	29 c0       	rjmp	.+82     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 3: return '9';
    26f8:	99 e3       	ldi	r25, 0x39	; 57
    26fa:	9a 83       	std	Y+2, r25	; 0x02
    26fc:	26 c0       	rjmp	.+76     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 4: return '/'; // ASCII Code of %
    26fe:	2f e2       	ldi	r18, 0x2F	; 47
    2700:	2a 83       	std	Y+2, r18	; 0x02
    2702:	23 c0       	rjmp	.+70     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 5: return '4';
    2704:	34 e3       	ldi	r19, 0x34	; 52
    2706:	3a 83       	std	Y+2, r19	; 0x02
    2708:	20 c0       	rjmp	.+64     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 6: return '5';
    270a:	85 e3       	ldi	r24, 0x35	; 53
    270c:	8a 83       	std	Y+2, r24	; 0x02
    270e:	1d c0       	rjmp	.+58     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 7: return '6';
    2710:	96 e3       	ldi	r25, 0x36	; 54
    2712:	9a 83       	std	Y+2, r25	; 0x02
    2714:	1a c0       	rjmp	.+52     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    2716:	2a e2       	ldi	r18, 0x2A	; 42
    2718:	2a 83       	std	Y+2, r18	; 0x02
    271a:	17 c0       	rjmp	.+46     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;		
		case 9: return '1';
    271c:	31 e3       	ldi	r19, 0x31	; 49
    271e:	3a 83       	std	Y+2, r19	; 0x02
    2720:	14 c0       	rjmp	.+40     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 10: return '2';
    2722:	82 e3       	ldi	r24, 0x32	; 50
    2724:	8a 83       	std	Y+2, r24	; 0x02
    2726:	11 c0       	rjmp	.+34     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 11: return '3';
    2728:	93 e3       	ldi	r25, 0x33	; 51
    272a:	9a 83       	std	Y+2, r25	; 0x02
    272c:	0e c0       	rjmp	.+28     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    272e:	2d e2       	ldi	r18, 0x2D	; 45
    2730:	2a 83       	std	Y+2, r18	; 0x02
    2732:	0b c0       	rjmp	.+22     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
/*		case 13: return ;   ASCII of Enter */
		case 14: return '0';
    2734:	30 e3       	ldi	r19, 0x30	; 48
    2736:	3a 83       	std	Y+2, r19	; 0x02
    2738:	08 c0       	rjmp	.+16     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    273a:	8d e3       	ldi	r24, 0x3D	; 61
    273c:	8a 83       	std	Y+2, r24	; 0x02
    273e:	05 c0       	rjmp	.+10     	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    2740:	9b e2       	ldi	r25, 0x2B	; 43
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	02 c0       	rjmp	.+4      	; 0x274a <KeyPad_4x4_adjustKeyNumber+0x12a>
				break;
		default: return button_number;								 						
    2746:	29 81       	ldd	r18, Y+1	; 0x01
    2748:	2a 83       	std	Y+2, r18	; 0x02
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    2762:	a7 e3       	ldi	r26, 0x37	; 55
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e7 e3       	ldi	r30, 0x37	; 55
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	8e 60       	ori	r24, 0x0E	; 14
    276e:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    2770:	e4 e3       	ldi	r30, 0x34	; 52
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	8f ef       	ldi	r24, 0xFF	; 255
    2776:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2778:	88 e3       	ldi	r24, 0x38	; 56
    277a:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    277e:	8c e0       	ldi	r24, 0x0C	; 12
    2780:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_sendCommand>
}
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	e9 97       	sbiw	r28, 0x39	; 57
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    27a6:	a8 e3       	ldi	r26, 0x38	; 56
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e8 e3       	ldi	r30, 0x38	; 56
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	8d 7f       	andi	r24, 0xFD	; 253
    27b2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    27b4:	a8 e3       	ldi	r26, 0x38	; 56
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e8 e3       	ldi	r30, 0x38	; 56
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	8b 7f       	andi	r24, 0xFB	; 251
    27c0:	8c 93       	st	X, r24
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a0 e8       	ldi	r26, 0x80	; 128
    27c8:	bf e3       	ldi	r27, 0x3F	; 63
    27ca:	8d ab       	std	Y+53, r24	; 0x35
    27cc:	9e ab       	std	Y+54, r25	; 0x36
    27ce:	af ab       	std	Y+55, r26	; 0x37
    27d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	6d a9       	ldd	r22, Y+53	; 0x35
    27d4:	7e a9       	ldd	r23, Y+54	; 0x36
    27d6:	8f a9       	ldd	r24, Y+55	; 0x37
    27d8:	98 ad       	ldd	r25, Y+56	; 0x38
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	4a ef       	ldi	r20, 0xFA	; 250
    27e0:	54 e4       	ldi	r21, 0x44	; 68
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	89 ab       	std	Y+49, r24	; 0x31
    27ec:	9a ab       	std	Y+50, r25	; 0x32
    27ee:	ab ab       	std	Y+51, r26	; 0x33
    27f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27f2:	69 a9       	ldd	r22, Y+49	; 0x31
    27f4:	7a a9       	ldd	r23, Y+50	; 0x32
    27f6:	8b a9       	ldd	r24, Y+51	; 0x33
    27f8:	9c a9       	ldd	r25, Y+52	; 0x34
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	2c f4       	brge	.+10     	; 0x2814 <LCD_sendCommand+0x84>
		__ticks = 1;
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	98 ab       	std	Y+48, r25	; 0x30
    2810:	8f a7       	std	Y+47, r24	; 0x2f
    2812:	3f c0       	rjmp	.+126    	; 0x2892 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    2814:	69 a9       	ldd	r22, Y+49	; 0x31
    2816:	7a a9       	ldd	r23, Y+50	; 0x32
    2818:	8b a9       	ldd	r24, Y+51	; 0x33
    281a:	9c a9       	ldd	r25, Y+52	; 0x34
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	3f ef       	ldi	r19, 0xFF	; 255
    2820:	4f e7       	ldi	r20, 0x7F	; 127
    2822:	57 e4       	ldi	r21, 0x47	; 71
    2824:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2828:	18 16       	cp	r1, r24
    282a:	4c f5       	brge	.+82     	; 0x287e <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282c:	6d a9       	ldd	r22, Y+53	; 0x35
    282e:	7e a9       	ldd	r23, Y+54	; 0x36
    2830:	8f a9       	ldd	r24, Y+55	; 0x37
    2832:	98 ad       	ldd	r25, Y+56	; 0x38
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e2       	ldi	r20, 0x20	; 32
    283a:	51 e4       	ldi	r21, 0x41	; 65
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	98 ab       	std	Y+48, r25	; 0x30
    2852:	8f a7       	std	Y+47, r24	; 0x2f
    2854:	0f c0       	rjmp	.+30     	; 0x2874 <LCD_sendCommand+0xe4>
    2856:	88 ec       	ldi	r24, 0xC8	; 200
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9e a7       	std	Y+46, r25	; 0x2e
    285c:	8d a7       	std	Y+45, r24	; 0x2d
    285e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2860:	9e a5       	ldd	r25, Y+46	; 0x2e
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <LCD_sendCommand+0xd2>
    2866:	9e a7       	std	Y+46, r25	; 0x2e
    2868:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286a:	8f a5       	ldd	r24, Y+47	; 0x2f
    286c:	98 a9       	ldd	r25, Y+48	; 0x30
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	98 ab       	std	Y+48, r25	; 0x30
    2872:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2874:	8f a5       	ldd	r24, Y+47	; 0x2f
    2876:	98 a9       	ldd	r25, Y+48	; 0x30
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	69 f7       	brne	.-38     	; 0x2856 <LCD_sendCommand+0xc6>
    287c:	14 c0       	rjmp	.+40     	; 0x28a6 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287e:	69 a9       	ldd	r22, Y+49	; 0x31
    2880:	7a a9       	ldd	r23, Y+50	; 0x32
    2882:	8b a9       	ldd	r24, Y+51	; 0x33
    2884:	9c a9       	ldd	r25, Y+52	; 0x34
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	98 ab       	std	Y+48, r25	; 0x30
    2890:	8f a7       	std	Y+47, r24	; 0x2f
    2892:	8f a5       	ldd	r24, Y+47	; 0x2f
    2894:	98 a9       	ldd	r25, Y+48	; 0x30
    2896:	9c a7       	std	Y+44, r25	; 0x2c
    2898:	8b a7       	std	Y+43, r24	; 0x2b
    289a:	8b a5       	ldd	r24, Y+43	; 0x2b
    289c:	9c a5       	ldd	r25, Y+44	; 0x2c
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <LCD_sendCommand+0x10e>
    28a2:	9c a7       	std	Y+44, r25	; 0x2c
    28a4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    28a6:	a8 e3       	ldi	r26, 0x38	; 56
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e8 e3       	ldi	r30, 0x38	; 56
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	88 60       	ori	r24, 0x08	; 8
    28b2:	8c 93       	st	X, r24
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	a0 e8       	ldi	r26, 0x80	; 128
    28ba:	bf e3       	ldi	r27, 0x3F	; 63
    28bc:	8f a3       	std	Y+39, r24	; 0x27
    28be:	98 a7       	std	Y+40, r25	; 0x28
    28c0:	a9 a7       	std	Y+41, r26	; 0x29
    28c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c4:	6f a1       	ldd	r22, Y+39	; 0x27
    28c6:	78 a5       	ldd	r23, Y+40	; 0x28
    28c8:	89 a5       	ldd	r24, Y+41	; 0x29
    28ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	4a ef       	ldi	r20, 0xFA	; 250
    28d2:	54 e4       	ldi	r21, 0x44	; 68
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	8b a3       	std	Y+35, r24	; 0x23
    28de:	9c a3       	std	Y+36, r25	; 0x24
    28e0:	ad a3       	std	Y+37, r26	; 0x25
    28e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28e4:	6b a1       	ldd	r22, Y+35	; 0x23
    28e6:	7c a1       	ldd	r23, Y+36	; 0x24
    28e8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ea:	9e a1       	ldd	r25, Y+38	; 0x26
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	5f e3       	ldi	r21, 0x3F	; 63
    28f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f8:	88 23       	and	r24, r24
    28fa:	2c f4       	brge	.+10     	; 0x2906 <LCD_sendCommand+0x176>
		__ticks = 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	9a a3       	std	Y+34, r25	; 0x22
    2902:	89 a3       	std	Y+33, r24	; 0x21
    2904:	3f c0       	rjmp	.+126    	; 0x2984 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    2906:	6b a1       	ldd	r22, Y+35	; 0x23
    2908:	7c a1       	ldd	r23, Y+36	; 0x24
    290a:	8d a1       	ldd	r24, Y+37	; 0x25
    290c:	9e a1       	ldd	r25, Y+38	; 0x26
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	3f ef       	ldi	r19, 0xFF	; 255
    2912:	4f e7       	ldi	r20, 0x7F	; 127
    2914:	57 e4       	ldi	r21, 0x47	; 71
    2916:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291a:	18 16       	cp	r1, r24
    291c:	4c f5       	brge	.+82     	; 0x2970 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291e:	6f a1       	ldd	r22, Y+39	; 0x27
    2920:	78 a5       	ldd	r23, Y+40	; 0x28
    2922:	89 a5       	ldd	r24, Y+41	; 0x29
    2924:	9a a5       	ldd	r25, Y+42	; 0x2a
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e2       	ldi	r20, 0x20	; 32
    292c:	51 e4       	ldi	r21, 0x41	; 65
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9a a3       	std	Y+34, r25	; 0x22
    2944:	89 a3       	std	Y+33, r24	; 0x21
    2946:	0f c0       	rjmp	.+30     	; 0x2966 <LCD_sendCommand+0x1d6>
    2948:	88 ec       	ldi	r24, 0xC8	; 200
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	98 a3       	std	Y+32, r25	; 0x20
    294e:	8f 8f       	std	Y+31, r24	; 0x1f
    2950:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2952:	98 a1       	ldd	r25, Y+32	; 0x20
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <LCD_sendCommand+0x1c4>
    2958:	98 a3       	std	Y+32, r25	; 0x20
    295a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295c:	89 a1       	ldd	r24, Y+33	; 0x21
    295e:	9a a1       	ldd	r25, Y+34	; 0x22
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	9a a3       	std	Y+34, r25	; 0x22
    2964:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2966:	89 a1       	ldd	r24, Y+33	; 0x21
    2968:	9a a1       	ldd	r25, Y+34	; 0x22
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	69 f7       	brne	.-38     	; 0x2948 <LCD_sendCommand+0x1b8>
    296e:	14 c0       	rjmp	.+40     	; 0x2998 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2970:	6b a1       	ldd	r22, Y+35	; 0x23
    2972:	7c a1       	ldd	r23, Y+36	; 0x24
    2974:	8d a1       	ldd	r24, Y+37	; 0x25
    2976:	9e a1       	ldd	r25, Y+38	; 0x26
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9a a3       	std	Y+34, r25	; 0x22
    2982:	89 a3       	std	Y+33, r24	; 0x21
    2984:	89 a1       	ldd	r24, Y+33	; 0x21
    2986:	9a a1       	ldd	r25, Y+34	; 0x22
    2988:	9e 8f       	std	Y+30, r25	; 0x1e
    298a:	8d 8f       	std	Y+29, r24	; 0x1d
    298c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    298e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <LCD_sendCommand+0x200>
    2994:	9e 8f       	std	Y+30, r25	; 0x1e
    2996:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    2998:	e5 e3       	ldi	r30, 0x35	; 53
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	89 ad       	ldd	r24, Y+57	; 0x39
    299e:	80 83       	st	Z, r24
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	a0 e8       	ldi	r26, 0x80	; 128
    29a6:	bf e3       	ldi	r27, 0x3F	; 63
    29a8:	89 8f       	std	Y+25, r24	; 0x19
    29aa:	9a 8f       	std	Y+26, r25	; 0x1a
    29ac:	ab 8f       	std	Y+27, r26	; 0x1b
    29ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b0:	69 8d       	ldd	r22, Y+25	; 0x19
    29b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	4a ef       	ldi	r20, 0xFA	; 250
    29be:	54 e4       	ldi	r21, 0x44	; 68
    29c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	8d 8b       	std	Y+21, r24	; 0x15
    29ca:	9e 8b       	std	Y+22, r25	; 0x16
    29cc:	af 8b       	std	Y+23, r26	; 0x17
    29ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29d0:	6d 89       	ldd	r22, Y+21	; 0x15
    29d2:	7e 89       	ldd	r23, Y+22	; 0x16
    29d4:	8f 89       	ldd	r24, Y+23	; 0x17
    29d6:	98 8d       	ldd	r25, Y+24	; 0x18
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e8       	ldi	r20, 0x80	; 128
    29de:	5f e3       	ldi	r21, 0x3F	; 63
    29e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e4:	88 23       	and	r24, r24
    29e6:	2c f4       	brge	.+10     	; 0x29f2 <LCD_sendCommand+0x262>
		__ticks = 1;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	9c 8b       	std	Y+20, r25	; 0x14
    29ee:	8b 8b       	std	Y+19, r24	; 0x13
    29f0:	3f c0       	rjmp	.+126    	; 0x2a70 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    29f2:	6d 89       	ldd	r22, Y+21	; 0x15
    29f4:	7e 89       	ldd	r23, Y+22	; 0x16
    29f6:	8f 89       	ldd	r24, Y+23	; 0x17
    29f8:	98 8d       	ldd	r25, Y+24	; 0x18
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	3f ef       	ldi	r19, 0xFF	; 255
    29fe:	4f e7       	ldi	r20, 0x7F	; 127
    2a00:	57 e4       	ldi	r21, 0x47	; 71
    2a02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a06:	18 16       	cp	r1, r24
    2a08:	4c f5       	brge	.+82     	; 0x2a5c <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e2       	ldi	r20, 0x20	; 32
    2a18:	51 e4       	ldi	r21, 0x41	; 65
    2a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	bc 01       	movw	r22, r24
    2a24:	cd 01       	movw	r24, r26
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9c 8b       	std	Y+20, r25	; 0x14
    2a30:	8b 8b       	std	Y+19, r24	; 0x13
    2a32:	0f c0       	rjmp	.+30     	; 0x2a52 <LCD_sendCommand+0x2c2>
    2a34:	88 ec       	ldi	r24, 0xC8	; 200
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	9a 8b       	std	Y+18, r25	; 0x12
    2a3a:	89 8b       	std	Y+17, r24	; 0x11
    2a3c:	89 89       	ldd	r24, Y+17	; 0x11
    2a3e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <LCD_sendCommand+0x2b0>
    2a44:	9a 8b       	std	Y+18, r25	; 0x12
    2a46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a48:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	9c 8b       	std	Y+20, r25	; 0x14
    2a50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a52:	8b 89       	ldd	r24, Y+19	; 0x13
    2a54:	9c 89       	ldd	r25, Y+20	; 0x14
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	69 f7       	brne	.-38     	; 0x2a34 <LCD_sendCommand+0x2a4>
    2a5a:	14 c0       	rjmp	.+40     	; 0x2a84 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a60:	8f 89       	ldd	r24, Y+23	; 0x17
    2a62:	98 8d       	ldd	r25, Y+24	; 0x18
    2a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	9c 8b       	std	Y+20, r25	; 0x14
    2a6e:	8b 8b       	std	Y+19, r24	; 0x13
    2a70:	8b 89       	ldd	r24, Y+19	; 0x13
    2a72:	9c 89       	ldd	r25, Y+20	; 0x14
    2a74:	98 8b       	std	Y+16, r25	; 0x10
    2a76:	8f 87       	std	Y+15, r24	; 0x0f
    2a78:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a7a:	98 89       	ldd	r25, Y+16	; 0x10
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <LCD_sendCommand+0x2ec>
    2a80:	98 8b       	std	Y+16, r25	; 0x10
    2a82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2a84:	a8 e3       	ldi	r26, 0x38	; 56
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e8 e3       	ldi	r30, 0x38	; 56
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	87 7f       	andi	r24, 0xF7	; 247
    2a90:	8c 93       	st	X, r24
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	a0 e8       	ldi	r26, 0x80	; 128
    2a98:	bf e3       	ldi	r27, 0x3F	; 63
    2a9a:	8b 87       	std	Y+11, r24	; 0x0b
    2a9c:	9c 87       	std	Y+12, r25	; 0x0c
    2a9e:	ad 87       	std	Y+13, r26	; 0x0d
    2aa0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	4a ef       	ldi	r20, 0xFA	; 250
    2ab0:	54 e4       	ldi	r21, 0x44	; 68
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	8f 83       	std	Y+7, r24	; 0x07
    2abc:	98 87       	std	Y+8, r25	; 0x08
    2abe:	a9 87       	std	Y+9, r26	; 0x09
    2ac0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac4:	78 85       	ldd	r23, Y+8	; 0x08
    2ac6:	89 85       	ldd	r24, Y+9	; 0x09
    2ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e8       	ldi	r20, 0x80	; 128
    2ad0:	5f e3       	ldi	r21, 0x3F	; 63
    2ad2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad6:	88 23       	and	r24, r24
    2ad8:	2c f4       	brge	.+10     	; 0x2ae4 <LCD_sendCommand+0x354>
		__ticks = 1;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
    2ae2:	3f c0       	rjmp	.+126    	; 0x2b62 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae6:	78 85       	ldd	r23, Y+8	; 0x08
    2ae8:	89 85       	ldd	r24, Y+9	; 0x09
    2aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	3f ef       	ldi	r19, 0xFF	; 255
    2af0:	4f e7       	ldi	r20, 0x7F	; 127
    2af2:	57 e4       	ldi	r21, 0x47	; 71
    2af4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af8:	18 16       	cp	r1, r24
    2afa:	4c f5       	brge	.+82     	; 0x2b4e <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e2       	ldi	r20, 0x20	; 32
    2b0a:	51 e4       	ldi	r21, 0x41	; 65
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	9e 83       	std	Y+6, r25	; 0x06
    2b22:	8d 83       	std	Y+5, r24	; 0x05
    2b24:	0f c0       	rjmp	.+30     	; 0x2b44 <LCD_sendCommand+0x3b4>
    2b26:	88 ec       	ldi	r24, 0xC8	; 200
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	9c 83       	std	Y+4, r25	; 0x04
    2b2c:	8b 83       	std	Y+3, r24	; 0x03
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	9c 81       	ldd	r25, Y+4	; 0x04
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <LCD_sendCommand+0x3a2>
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	9e 83       	std	Y+6, r25	; 0x06
    2b42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	69 f7       	brne	.-38     	; 0x2b26 <LCD_sendCommand+0x396>
    2b4c:	14 c0       	rjmp	.+40     	; 0x2b76 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b50:	78 85       	ldd	r23, Y+8	; 0x08
    2b52:	89 85       	ldd	r24, Y+9	; 0x09
    2b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9e 83       	std	Y+6, r25	; 0x06
    2b60:	8d 83       	std	Y+5, r24	; 0x05
    2b62:	8d 81       	ldd	r24, Y+5	; 0x05
    2b64:	9e 81       	ldd	r25, Y+6	; 0x06
    2b66:	9a 83       	std	Y+2, r25	; 0x02
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <LCD_sendCommand+0x3de>
    2b72:	9a 83       	std	Y+2, r25	; 0x02
    2b74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b76:	e9 96       	adiw	r28, 0x39	; 57
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	cf 91       	pop	r28
    2b84:	df 91       	pop	r29
    2b86:	08 95       	ret

00002b88 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	e9 97       	sbiw	r28, 0x39	; 57
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2b9e:	a8 e3       	ldi	r26, 0x38	; 56
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e8 e3       	ldi	r30, 0x38	; 56
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	82 60       	ori	r24, 0x02	; 2
    2baa:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2bac:	a8 e3       	ldi	r26, 0x38	; 56
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e8 e3       	ldi	r30, 0x38	; 56
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	8b 7f       	andi	r24, 0xFB	; 251
    2bb8:	8c 93       	st	X, r24
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e8       	ldi	r26, 0x80	; 128
    2bc0:	bf e3       	ldi	r27, 0x3F	; 63
    2bc2:	8d ab       	std	Y+53, r24	; 0x35
    2bc4:	9e ab       	std	Y+54, r25	; 0x36
    2bc6:	af ab       	std	Y+55, r26	; 0x37
    2bc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	6d a9       	ldd	r22, Y+53	; 0x35
    2bcc:	7e a9       	ldd	r23, Y+54	; 0x36
    2bce:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd0:	98 ad       	ldd	r25, Y+56	; 0x38
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a ef       	ldi	r20, 0xFA	; 250
    2bd8:	54 e4       	ldi	r21, 0x44	; 68
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	89 ab       	std	Y+49, r24	; 0x31
    2be4:	9a ab       	std	Y+50, r25	; 0x32
    2be6:	ab ab       	std	Y+51, r26	; 0x33
    2be8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bea:	69 a9       	ldd	r22, Y+49	; 0x31
    2bec:	7a a9       	ldd	r23, Y+50	; 0x32
    2bee:	8b a9       	ldd	r24, Y+51	; 0x33
    2bf0:	9c a9       	ldd	r25, Y+52	; 0x34
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <LCD_displayCharacter+0x84>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	98 ab       	std	Y+48, r25	; 0x30
    2c08:	8f a7       	std	Y+47, r24	; 0x2f
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2c0c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c0e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c10:	8b a9       	ldd	r24, Y+51	; 0x33
    2c12:	9c a9       	ldd	r25, Y+52	; 0x34
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	6d a9       	ldd	r22, Y+53	; 0x35
    2c26:	7e a9       	ldd	r23, Y+54	; 0x36
    2c28:	8f a9       	ldd	r24, Y+55	; 0x37
    2c2a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	98 ab       	std	Y+48, r25	; 0x30
    2c4a:	8f a7       	std	Y+47, r24	; 0x2f
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <LCD_displayCharacter+0xe4>
    2c4e:	88 ec       	ldi	r24, 0xC8	; 200
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9e a7       	std	Y+46, r25	; 0x2e
    2c54:	8d a7       	std	Y+45, r24	; 0x2d
    2c56:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c58:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <LCD_displayCharacter+0xd2>
    2c5e:	9e a7       	std	Y+46, r25	; 0x2e
    2c60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c64:	98 a9       	ldd	r25, Y+48	; 0x30
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	98 ab       	std	Y+48, r25	; 0x30
    2c6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <LCD_displayCharacter+0xc6>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	69 a9       	ldd	r22, Y+49	; 0x31
    2c78:	7a a9       	ldd	r23, Y+50	; 0x32
    2c7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	98 ab       	std	Y+48, r25	; 0x30
    2c88:	8f a7       	std	Y+47, r24	; 0x2f
    2c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c8e:	9c a7       	std	Y+44, r25	; 0x2c
    2c90:	8b a7       	std	Y+43, r24	; 0x2b
    2c92:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c94:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <LCD_displayCharacter+0x10e>
    2c9a:	9c a7       	std	Y+44, r25	; 0x2c
    2c9c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2c9e:	a8 e3       	ldi	r26, 0x38	; 56
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e8 e3       	ldi	r30, 0x38	; 56
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	88 60       	ori	r24, 0x08	; 8
    2caa:	8c 93       	st	X, r24
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	a0 e8       	ldi	r26, 0x80	; 128
    2cb2:	bf e3       	ldi	r27, 0x3F	; 63
    2cb4:	8f a3       	std	Y+39, r24	; 0x27
    2cb6:	98 a7       	std	Y+40, r25	; 0x28
    2cb8:	a9 a7       	std	Y+41, r26	; 0x29
    2cba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbc:	6f a1       	ldd	r22, Y+39	; 0x27
    2cbe:	78 a5       	ldd	r23, Y+40	; 0x28
    2cc0:	89 a5       	ldd	r24, Y+41	; 0x29
    2cc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	4a ef       	ldi	r20, 0xFA	; 250
    2cca:	54 e4       	ldi	r21, 0x44	; 68
    2ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	8b a3       	std	Y+35, r24	; 0x23
    2cd6:	9c a3       	std	Y+36, r25	; 0x24
    2cd8:	ad a3       	std	Y+37, r26	; 0x25
    2cda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cdc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cde:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e8       	ldi	r20, 0x80	; 128
    2cea:	5f e3       	ldi	r21, 0x3F	; 63
    2cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf0:	88 23       	and	r24, r24
    2cf2:	2c f4       	brge	.+10     	; 0x2cfe <LCD_displayCharacter+0x176>
		__ticks = 1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9a a3       	std	Y+34, r25	; 0x22
    2cfa:	89 a3       	std	Y+33, r24	; 0x21
    2cfc:	3f c0       	rjmp	.+126    	; 0x2d7c <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2cfe:	6b a1       	ldd	r22, Y+35	; 0x23
    2d00:	7c a1       	ldd	r23, Y+36	; 0x24
    2d02:	8d a1       	ldd	r24, Y+37	; 0x25
    2d04:	9e a1       	ldd	r25, Y+38	; 0x26
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	3f ef       	ldi	r19, 0xFF	; 255
    2d0a:	4f e7       	ldi	r20, 0x7F	; 127
    2d0c:	57 e4       	ldi	r21, 0x47	; 71
    2d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d12:	18 16       	cp	r1, r24
    2d14:	4c f5       	brge	.+82     	; 0x2d68 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d16:	6f a1       	ldd	r22, Y+39	; 0x27
    2d18:	78 a5       	ldd	r23, Y+40	; 0x28
    2d1a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9a a3       	std	Y+34, r25	; 0x22
    2d3c:	89 a3       	std	Y+33, r24	; 0x21
    2d3e:	0f c0       	rjmp	.+30     	; 0x2d5e <LCD_displayCharacter+0x1d6>
    2d40:	88 ec       	ldi	r24, 0xC8	; 200
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	98 a3       	std	Y+32, r25	; 0x20
    2d46:	8f 8f       	std	Y+31, r24	; 0x1f
    2d48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d4a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <LCD_displayCharacter+0x1c4>
    2d50:	98 a3       	std	Y+32, r25	; 0x20
    2d52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d54:	89 a1       	ldd	r24, Y+33	; 0x21
    2d56:	9a a1       	ldd	r25, Y+34	; 0x22
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	9a a3       	std	Y+34, r25	; 0x22
    2d5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d60:	9a a1       	ldd	r25, Y+34	; 0x22
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	69 f7       	brne	.-38     	; 0x2d40 <LCD_displayCharacter+0x1b8>
    2d66:	14 c0       	rjmp	.+40     	; 0x2d90 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d68:	6b a1       	ldd	r22, Y+35	; 0x23
    2d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9a a3       	std	Y+34, r25	; 0x22
    2d7a:	89 a3       	std	Y+33, r24	; 0x21
    2d7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d80:	9e 8f       	std	Y+30, r25	; 0x1e
    2d82:	8d 8f       	std	Y+29, r24	; 0x1d
    2d84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <LCD_displayCharacter+0x200>
    2d8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d8e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    2d90:	e5 e3       	ldi	r30, 0x35	; 53
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	89 ad       	ldd	r24, Y+57	; 0x39
    2d96:	80 83       	st	Z, r24
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	a0 e8       	ldi	r26, 0x80	; 128
    2d9e:	bf e3       	ldi	r27, 0x3F	; 63
    2da0:	89 8f       	std	Y+25, r24	; 0x19
    2da2:	9a 8f       	std	Y+26, r25	; 0x1a
    2da4:	ab 8f       	std	Y+27, r26	; 0x1b
    2da6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da8:	69 8d       	ldd	r22, Y+25	; 0x19
    2daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	4a ef       	ldi	r20, 0xFA	; 250
    2db6:	54 e4       	ldi	r21, 0x44	; 68
    2db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	8d 8b       	std	Y+21, r24	; 0x15
    2dc2:	9e 8b       	std	Y+22, r25	; 0x16
    2dc4:	af 8b       	std	Y+23, r26	; 0x17
    2dc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dca:	7e 89       	ldd	r23, Y+22	; 0x16
    2dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dce:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e8       	ldi	r20, 0x80	; 128
    2dd6:	5f e3       	ldi	r21, 0x3F	; 63
    2dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ddc:	88 23       	and	r24, r24
    2dde:	2c f4       	brge	.+10     	; 0x2dea <LCD_displayCharacter+0x262>
		__ticks = 1;
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	9c 8b       	std	Y+20, r25	; 0x14
    2de6:	8b 8b       	std	Y+19, r24	; 0x13
    2de8:	3f c0       	rjmp	.+126    	; 0x2e68 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2dea:	6d 89       	ldd	r22, Y+21	; 0x15
    2dec:	7e 89       	ldd	r23, Y+22	; 0x16
    2dee:	8f 89       	ldd	r24, Y+23	; 0x17
    2df0:	98 8d       	ldd	r25, Y+24	; 0x18
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	3f ef       	ldi	r19, 0xFF	; 255
    2df6:	4f e7       	ldi	r20, 0x7F	; 127
    2df8:	57 e4       	ldi	r21, 0x47	; 71
    2dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dfe:	18 16       	cp	r1, r24
    2e00:	4c f5       	brge	.+82     	; 0x2e54 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e02:	69 8d       	ldd	r22, Y+25	; 0x19
    2e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e2       	ldi	r20, 0x20	; 32
    2e10:	51 e4       	ldi	r21, 0x41	; 65
    2e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	bc 01       	movw	r22, r24
    2e1c:	cd 01       	movw	r24, r26
    2e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	9c 8b       	std	Y+20, r25	; 0x14
    2e28:	8b 8b       	std	Y+19, r24	; 0x13
    2e2a:	0f c0       	rjmp	.+30     	; 0x2e4a <LCD_displayCharacter+0x2c2>
    2e2c:	88 ec       	ldi	r24, 0xC8	; 200
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9a 8b       	std	Y+18, r25	; 0x12
    2e32:	89 8b       	std	Y+17, r24	; 0x11
    2e34:	89 89       	ldd	r24, Y+17	; 0x11
    2e36:	9a 89       	ldd	r25, Y+18	; 0x12
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <LCD_displayCharacter+0x2b0>
    2e3c:	9a 8b       	std	Y+18, r25	; 0x12
    2e3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e40:	8b 89       	ldd	r24, Y+19	; 0x13
    2e42:	9c 89       	ldd	r25, Y+20	; 0x14
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	9c 8b       	std	Y+20, r25	; 0x14
    2e48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	69 f7       	brne	.-38     	; 0x2e2c <LCD_displayCharacter+0x2a4>
    2e52:	14 c0       	rjmp	.+40     	; 0x2e7c <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e54:	6d 89       	ldd	r22, Y+21	; 0x15
    2e56:	7e 89       	ldd	r23, Y+22	; 0x16
    2e58:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	9c 8b       	std	Y+20, r25	; 0x14
    2e66:	8b 8b       	std	Y+19, r24	; 0x13
    2e68:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6c:	98 8b       	std	Y+16, r25	; 0x10
    2e6e:	8f 87       	std	Y+15, r24	; 0x0f
    2e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e72:	98 89       	ldd	r25, Y+16	; 0x10
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <LCD_displayCharacter+0x2ec>
    2e78:	98 8b       	std	Y+16, r25	; 0x10
    2e7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2e7c:	a8 e3       	ldi	r26, 0x38	; 56
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	e8 e3       	ldi	r30, 0x38	; 56
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	87 7f       	andi	r24, 0xF7	; 247
    2e88:	8c 93       	st	X, r24
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	a0 e8       	ldi	r26, 0x80	; 128
    2e90:	bf e3       	ldi	r27, 0x3F	; 63
    2e92:	8b 87       	std	Y+11, r24	; 0x0b
    2e94:	9c 87       	std	Y+12, r25	; 0x0c
    2e96:	ad 87       	std	Y+13, r26	; 0x0d
    2e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4a ef       	ldi	r20, 0xFA	; 250
    2ea8:	54 e4       	ldi	r21, 0x44	; 68
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	8f 83       	std	Y+7, r24	; 0x07
    2eb4:	98 87       	std	Y+8, r25	; 0x08
    2eb6:	a9 87       	std	Y+9, r26	; 0x09
    2eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e8       	ldi	r20, 0x80	; 128
    2ec8:	5f e3       	ldi	r21, 0x3F	; 63
    2eca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ece:	88 23       	and	r24, r24
    2ed0:	2c f4       	brge	.+10     	; 0x2edc <LCD_displayCharacter+0x354>
		__ticks = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	3f c0       	rjmp	.+126    	; 0x2f5a <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2edc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ede:	78 85       	ldd	r23, Y+8	; 0x08
    2ee0:	89 85       	ldd	r24, Y+9	; 0x09
    2ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	4c f5       	brge	.+82     	; 0x2f46 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <LCD_displayCharacter+0x3b4>
    2f1e:	88 ec       	ldi	r24, 0xC8	; 200
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_displayCharacter+0x3a2>
    2f2e:	9c 83       	std	Y+4, r25	; 0x04
    2f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	8d 81       	ldd	r24, Y+5	; 0x05
    2f34:	9e 81       	ldd	r25, Y+6	; 0x06
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9e 83       	std	Y+6, r25	; 0x06
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <LCD_displayCharacter+0x396>
    2f44:	14 c0       	rjmp	.+40     	; 0x2f6e <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	6f 81       	ldd	r22, Y+7	; 0x07
    2f48:	78 85       	ldd	r23, Y+8	; 0x08
    2f4a:	89 85       	ldd	r24, Y+9	; 0x09
    2f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	9a 83       	std	Y+2, r25	; 0x02
    2f60:	89 83       	std	Y+1, r24	; 0x01
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	9a 81       	ldd	r25, Y+2	; 0x02
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <LCD_displayCharacter+0x3de>
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2f6e:	e9 96       	adiw	r28, 0x39	; 57
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <LCD_displayString+0x6>
    2f86:	0f 92       	push	r0
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	9b 83       	std	Y+3, r25	; 0x03
    2f8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f90:	19 82       	std	Y+1, r1	; 0x01
    2f92:	0e c0       	rjmp	.+28     	; 0x2fb0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	e2 0f       	add	r30, r18
    2fa2:	f3 1f       	adc	r31, r19
    2fa4:	80 81       	ld	r24, Z
    2fa6:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayCharacter>
		i++;
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	8f 5f       	subi	r24, 0xFF	; 255
    2fae:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fba:	fc 01       	movw	r30, r24
    2fbc:	e2 0f       	add	r30, r18
    2fbe:	f3 1f       	adc	r31, r19
    2fc0:	80 81       	ld	r24, Z
    2fc2:	88 23       	and	r24, r24
    2fc4:	39 f7       	brne	.-50     	; 0x2f94 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	cf 91       	pop	r28
    2fce:	df 91       	pop	r29
    2fd0:	08 95       	ret

00002fd2 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <LCD_goToRowColumn+0x6>
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <LCD_goToRowColumn+0x8>
    2fda:	0f 92       	push	r0
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	8a 83       	std	Y+2, r24	; 0x02
    2fe2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	3d 83       	std	Y+5, r19	; 0x05
    2fec:	2c 83       	std	Y+4, r18	; 0x04
    2fee:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff2:	81 30       	cpi	r24, 0x01	; 1
    2ff4:	91 05       	cpc	r25, r1
    2ff6:	c1 f0       	breq	.+48     	; 0x3028 <LCD_goToRowColumn+0x56>
    2ff8:	2c 81       	ldd	r18, Y+4	; 0x04
    2ffa:	3d 81       	ldd	r19, Y+5	; 0x05
    2ffc:	22 30       	cpi	r18, 0x02	; 2
    2ffe:	31 05       	cpc	r19, r1
    3000:	2c f4       	brge	.+10     	; 0x300c <LCD_goToRowColumn+0x3a>
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	9d 81       	ldd	r25, Y+5	; 0x05
    3006:	00 97       	sbiw	r24, 0x00	; 0
    3008:	61 f0       	breq	.+24     	; 0x3022 <LCD_goToRowColumn+0x50>
    300a:	19 c0       	rjmp	.+50     	; 0x303e <LCD_goToRowColumn+0x6c>
    300c:	2c 81       	ldd	r18, Y+4	; 0x04
    300e:	3d 81       	ldd	r19, Y+5	; 0x05
    3010:	22 30       	cpi	r18, 0x02	; 2
    3012:	31 05       	cpc	r19, r1
    3014:	69 f0       	breq	.+26     	; 0x3030 <LCD_goToRowColumn+0x5e>
    3016:	8c 81       	ldd	r24, Y+4	; 0x04
    3018:	9d 81       	ldd	r25, Y+5	; 0x05
    301a:	83 30       	cpi	r24, 0x03	; 3
    301c:	91 05       	cpc	r25, r1
    301e:	61 f0       	breq	.+24     	; 0x3038 <LCD_goToRowColumn+0x66>
    3020:	0e c0       	rjmp	.+28     	; 0x303e <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	0b c0       	rjmp	.+22     	; 0x303e <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    3028:	8b 81       	ldd	r24, Y+3	; 0x03
    302a:	80 5c       	subi	r24, 0xC0	; 192
    302c:	89 83       	std	Y+1, r24	; 0x01
    302e:	07 c0       	rjmp	.+14     	; 0x303e <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	80 5f       	subi	r24, 0xF0	; 240
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	03 c0       	rjmp	.+6      	; 0x303e <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	80 5b       	subi	r24, 0xB0	; 176
    303c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	80 68       	ori	r24, 0x80	; 128
    3042:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_sendCommand>
}
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	00 d0       	rcall	.+0      	; 0x305c <LCD_displayStringRowColumn+0x6>
    305c:	00 d0       	rcall	.+0      	; 0x305e <LCD_displayStringRowColumn+0x8>
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	6a 83       	std	Y+2, r22	; 0x02
    3066:	5c 83       	std	Y+4, r21	; 0x04
    3068:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	6a 81       	ldd	r22, Y+2	; 0x02
    306e:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	9c 81       	ldd	r25, Y+4	; 0x04
    3076:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
}
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <LCD_integerToString>:

void LCD_integerToString(int data)
{
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	62 97       	sbiw	r28, 0x12	; 18
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	9a 8b       	std	Y+18, r25	; 0x12
    309e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    30a0:	89 89       	ldd	r24, Y+17	; 0x11
    30a2:	9a 89       	ldd	r25, Y+18	; 0x12
    30a4:	9e 01       	movw	r18, r28
    30a6:	2f 5f       	subi	r18, 0xFF	; 255
    30a8:	3f 4f       	sbci	r19, 0xFF	; 255
    30aa:	b9 01       	movw	r22, r18
    30ac:	4a e0       	ldi	r20, 0x0A	; 10
    30ae:	50 e0       	ldi	r21, 0x00	; 0
    30b0:	0e 94 88 1a 	call	0x3510	; 0x3510 <itoa>
   LCD_displayString(buff);
    30b4:	ce 01       	movw	r24, r28
    30b6:	01 96       	adiw	r24, 0x01	; 1
    30b8:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_displayString>
}
    30bc:	62 96       	adiw	r28, 0x12	; 18
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	cf 91       	pop	r28
    30ca:	df 91       	pop	r29
    30cc:	08 95       	ret

000030ce <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    30ce:	df 93       	push	r29
    30d0:	cf 93       	push	r28
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_sendCommand>
	LCD_goToRowColumn(0,0);
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_goToRowColumn>
}
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	08 95       	ret

000030ea <__vector_6>:


static volatile void (*g_Timer1_Call_Back_Ptr)(void);

ISR(TIMER1_COMPA_vect)
{
    30ea:	1f 92       	push	r1
    30ec:	0f 92       	push	r0
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	0f 92       	push	r0
    30f2:	11 24       	eor	r1, r1
    30f4:	2f 93       	push	r18
    30f6:	3f 93       	push	r19
    30f8:	4f 93       	push	r20
    30fa:	5f 93       	push	r21
    30fc:	6f 93       	push	r22
    30fe:	7f 93       	push	r23
    3100:	8f 93       	push	r24
    3102:	9f 93       	push	r25
    3104:	af 93       	push	r26
    3106:	bf 93       	push	r27
    3108:	ef 93       	push	r30
    310a:	ff 93       	push	r31
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
	(*g_Timer1_Call_Back_Ptr)();
    3114:	e0 91 a5 01 	lds	r30, 0x01A5
    3118:	f0 91 a6 01 	lds	r31, 0x01A6
    311c:	09 95       	icall
}
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	ff 91       	pop	r31
    3124:	ef 91       	pop	r30
    3126:	bf 91       	pop	r27
    3128:	af 91       	pop	r26
    312a:	9f 91       	pop	r25
    312c:	8f 91       	pop	r24
    312e:	7f 91       	pop	r23
    3130:	6f 91       	pop	r22
    3132:	5f 91       	pop	r21
    3134:	4f 91       	pop	r20
    3136:	3f 91       	pop	r19
    3138:	2f 91       	pop	r18
    313a:	0f 90       	pop	r0
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	0f 90       	pop	r0
    3140:	1f 90       	pop	r1
    3142:	18 95       	reti

00003144 <timer1_init>:
 * which contains the configuration of timer1.
 *
 *******************************************************************************/

void timer1_init(const Timer1_ConfigType *timer1_config_ptr)
{
    3144:	df 93       	push	r29
    3146:	cf 93       	push	r28
    3148:	00 d0       	rcall	.+0      	; 0x314a <timer1_init+0x6>
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	9a 83       	std	Y+2, r25	; 0x02
    3150:	89 83       	std	Y+1, r24	; 0x01
	sei();
    3152:	78 94       	sei
	/* Select the Clock*/
	TCCR1B = (TCCR1B & 0xF8) | ((timer1_config_ptr -> T1_clk) & 0x07);
    3154:	ae e4       	ldi	r26, 0x4E	; 78
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	ee e4       	ldi	r30, 0x4E	; 78
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	98 2f       	mov	r25, r24
    3160:	98 7f       	andi	r25, 0xF8	; 248
    3162:	e9 81       	ldd	r30, Y+1	; 0x01
    3164:	fa 81       	ldd	r31, Y+2	; 0x02
    3166:	80 81       	ld	r24, Z
    3168:	87 70       	andi	r24, 0x07	; 7
    316a:	89 2b       	or	r24, r25
    316c:	8c 93       	st	X, r24


	TCNT1= timer1_config_ptr-> T1_startValue;
    316e:	ac e4       	ldi	r26, 0x4C	; 76
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e9 81       	ldd	r30, Y+1	; 0x01
    3174:	fa 81       	ldd	r31, Y+2	; 0x02
    3176:	83 81       	ldd	r24, Z+3	; 0x03
    3178:	94 81       	ldd	r25, Z+4	; 0x04
    317a:	11 96       	adiw	r26, 0x01	; 1
    317c:	9c 93       	st	X, r25
    317e:	8e 93       	st	-X, r24

	if(timer1_config_ptr->T1_mode == TIMER1_OCB)
    3180:	e9 81       	ldd	r30, Y+1	; 0x01
    3182:	fa 81       	ldd	r31, Y+2	; 0x02
    3184:	82 81       	ldd	r24, Z+2	; 0x02
    3186:	82 30       	cpi	r24, 0x02	; 2
    3188:	a9 f5       	brne	.+106    	; 0x31f4 <timer1_init+0xb0>
	{
		SET_BIT(TCCR1B, WGM12);
    318a:	ae e4       	ldi	r26, 0x4E	; 78
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	ee e4       	ldi	r30, 0x4E	; 78
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	88 60       	ori	r24, 0x08	; 8
    3196:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE1B);
    3198:	a9 e5       	ldi	r26, 0x59	; 89
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e9 e5       	ldi	r30, 0x59	; 89
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	88 60       	ori	r24, 0x08	; 8
    31a4:	8c 93       	st	X, r24
		TCCR1A = (TCCR1A & 0x0F) | (((timer1_config_ptr -> T1_cmp_mode) & 0xF0) << 4);
    31a6:	af e4       	ldi	r26, 0x4F	; 79
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	ef e4       	ldi	r30, 0x4F	; 79
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	28 2f       	mov	r18, r24
    31b2:	2f 70       	andi	r18, 0x0F	; 15
    31b4:	e9 81       	ldd	r30, Y+1	; 0x01
    31b6:	fa 81       	ldd	r31, Y+2	; 0x02
    31b8:	81 81       	ldd	r24, Z+1	; 0x01
    31ba:	88 2f       	mov	r24, r24
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	80 7f       	andi	r24, 0xF0	; 240
    31c0:	90 70       	andi	r25, 0x00	; 0
    31c2:	82 95       	swap	r24
    31c4:	92 95       	swap	r25
    31c6:	90 7f       	andi	r25, 0xF0	; 240
    31c8:	98 27       	eor	r25, r24
    31ca:	80 7f       	andi	r24, 0xF0	; 240
    31cc:	98 27       	eor	r25, r24
    31ce:	82 2b       	or	r24, r18
    31d0:	8c 93       	st	X, r24
		OCR1B= timer1_config_ptr-> T1_compareValue;
    31d2:	a8 e4       	ldi	r26, 0x48	; 72
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e9 81       	ldd	r30, Y+1	; 0x01
    31d8:	fa 81       	ldd	r31, Y+2	; 0x02
    31da:	85 81       	ldd	r24, Z+5	; 0x05
    31dc:	96 81       	ldd	r25, Z+6	; 0x06
    31de:	11 96       	adiw	r26, 0x01	; 1
    31e0:	9c 93       	st	X, r25
    31e2:	8e 93       	st	-X, r24
		SET_BIT(TCCR1A, FOC1B);
    31e4:	af e4       	ldi	r26, 0x4F	; 79
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	ef e4       	ldi	r30, 0x4F	; 79
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	84 60       	ori	r24, 0x04	; 4
    31f0:	8c 93       	st	X, r24
    31f2:	47 c0       	rjmp	.+142    	; 0x3282 <timer1_init+0x13e>
	}
	else if ((timer1_config_ptr->T1_mode) == TIMER1_OCA)
    31f4:	e9 81       	ldd	r30, Y+1	; 0x01
    31f6:	fa 81       	ldd	r31, Y+2	; 0x02
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	83 30       	cpi	r24, 0x03	; 3
    31fc:	b1 f5       	brne	.+108    	; 0x326a <timer1_init+0x126>
	{
		SET_BIT(TCCR1B, WGM12);
    31fe:	ae e4       	ldi	r26, 0x4E	; 78
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	ee e4       	ldi	r30, 0x4E	; 78
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	88 60       	ori	r24, 0x08	; 8
    320a:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE1A);
    320c:	a9 e5       	ldi	r26, 0x59	; 89
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e9 e5       	ldi	r30, 0x59	; 89
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	80 61       	ori	r24, 0x10	; 16
    3218:	8c 93       	st	X, r24
		TCCR1A = (TCCR1A & 0x0F) | ((timer1_config_ptr -> T1_cmp_mode) << 6);
    321a:	af e4       	ldi	r26, 0x4F	; 79
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	ef e4       	ldi	r30, 0x4F	; 79
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	28 2f       	mov	r18, r24
    3226:	2f 70       	andi	r18, 0x0F	; 15
    3228:	e9 81       	ldd	r30, Y+1	; 0x01
    322a:	fa 81       	ldd	r31, Y+2	; 0x02
    322c:	81 81       	ldd	r24, Z+1	; 0x01
    322e:	88 2f       	mov	r24, r24
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	00 24       	eor	r0, r0
    3234:	96 95       	lsr	r25
    3236:	87 95       	ror	r24
    3238:	07 94       	ror	r0
    323a:	96 95       	lsr	r25
    323c:	87 95       	ror	r24
    323e:	07 94       	ror	r0
    3240:	98 2f       	mov	r25, r24
    3242:	80 2d       	mov	r24, r0
    3244:	82 2b       	or	r24, r18
    3246:	8c 93       	st	X, r24
		OCR1A= timer1_config_ptr-> T1_compareValue;
    3248:	aa e4       	ldi	r26, 0x4A	; 74
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	e9 81       	ldd	r30, Y+1	; 0x01
    324e:	fa 81       	ldd	r31, Y+2	; 0x02
    3250:	85 81       	ldd	r24, Z+5	; 0x05
    3252:	96 81       	ldd	r25, Z+6	; 0x06
    3254:	11 96       	adiw	r26, 0x01	; 1
    3256:	9c 93       	st	X, r25
    3258:	8e 93       	st	-X, r24
		SET_BIT(TCCR1A,FOC1A);
    325a:	af e4       	ldi	r26, 0x4F	; 79
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	ef e4       	ldi	r30, 0x4F	; 79
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	88 60       	ori	r24, 0x08	; 8
    3266:	8c 93       	st	X, r24
    3268:	0c c0       	rjmp	.+24     	; 0x3282 <timer1_init+0x13e>
	}
	else if ((timer1_config_ptr->T1_mode) == TIMER1_OVF)
    326a:	e9 81       	ldd	r30, Y+1	; 0x01
    326c:	fa 81       	ldd	r31, Y+2	; 0x02
    326e:	82 81       	ldd	r24, Z+2	; 0x02
    3270:	81 30       	cpi	r24, 0x01	; 1
    3272:	39 f4       	brne	.+14     	; 0x3282 <timer1_init+0x13e>
	{
		SET_BIT(TIMSK, TOIE1);
    3274:	a9 e5       	ldi	r26, 0x59	; 89
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	e9 e5       	ldi	r30, 0x59	; 89
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	84 60       	ori	r24, 0x04	; 4
    3280:	8c 93       	st	X, r24

	}


}
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <Timer1_setCallBack>:
 *
 * void(*Ptr2Func)(void): a pointer to the function to be called after interrupt.
 *
 *******************************************************************************/
void Timer1_setCallBack(void(*Ptr2Func)(void))
{
    328c:	df 93       	push	r29
    328e:	cf 93       	push	r28
    3290:	00 d0       	rcall	.+0      	; 0x3292 <Timer1_setCallBack+0x6>
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	9a 83       	std	Y+2, r25	; 0x02
    3298:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_Call_Back_Ptr = Ptr2Func;
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	9a 81       	ldd	r25, Y+2	; 0x02
    329e:	90 93 a6 01 	sts	0x01A6, r25
    32a2:	80 93 a5 01 	sts	0x01A5, r24
}
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <timerONSeconds>:
 *
 * a_seconds: the number of seconds the timer will tick before triggering an interrupt
 *
 *******************************************************************************/
void timerONSeconds(uint8 seconds)
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	2d 97       	sbiw	r28, 0x0d	; 13
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	88 87       	std	Y+8, r24	; 0x08
	Timer1_ConfigType timer1_config = {F_CPU1024, COM1_CTC_MODE, TIMER1_OCA,0, 800};
    32c6:	ae 01       	movw	r20, r28
    32c8:	4f 5f       	subi	r20, 0xFF	; 255
    32ca:	5f 4f       	sbci	r21, 0xFF	; 255
    32cc:	5a 87       	std	Y+10, r21	; 0x0a
    32ce:	49 87       	std	Y+9, r20	; 0x09
    32d0:	8a e6       	ldi	r24, 0x6A	; 106
    32d2:	91 e0       	ldi	r25, 0x01	; 1
    32d4:	9c 87       	std	Y+12, r25	; 0x0c
    32d6:	8b 87       	std	Y+11, r24	; 0x0b
    32d8:	97 e0       	ldi	r25, 0x07	; 7
    32da:	9d 87       	std	Y+13, r25	; 0x0d
    32dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    32de:	fc 85       	ldd	r31, Y+12	; 0x0c
    32e0:	00 80       	ld	r0, Z
    32e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    32e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    32e6:	4f 5f       	subi	r20, 0xFF	; 255
    32e8:	5f 4f       	sbci	r21, 0xFF	; 255
    32ea:	5c 87       	std	Y+12, r21	; 0x0c
    32ec:	4b 87       	std	Y+11, r20	; 0x0b
    32ee:	e9 85       	ldd	r30, Y+9	; 0x09
    32f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    32f2:	00 82       	st	Z, r0
    32f4:	49 85       	ldd	r20, Y+9	; 0x09
    32f6:	5a 85       	ldd	r21, Y+10	; 0x0a
    32f8:	4f 5f       	subi	r20, 0xFF	; 255
    32fa:	5f 4f       	sbci	r21, 0xFF	; 255
    32fc:	5a 87       	std	Y+10, r21	; 0x0a
    32fe:	49 87       	std	Y+9, r20	; 0x09
    3300:	5d 85       	ldd	r21, Y+13	; 0x0d
    3302:	51 50       	subi	r21, 0x01	; 1
    3304:	5d 87       	std	Y+13, r21	; 0x0d
    3306:	8d 85       	ldd	r24, Y+13	; 0x0d
    3308:	88 23       	and	r24, r24
    330a:	41 f7       	brne	.-48     	; 0x32dc <timerONSeconds+0x2c>
	timer1_config.T1_compareValue= 800*seconds;
    330c:	88 85       	ldd	r24, Y+8	; 0x08
    330e:	28 2f       	mov	r18, r24
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	80 e2       	ldi	r24, 0x20	; 32
    3314:	93 e0       	ldi	r25, 0x03	; 3
    3316:	fc 01       	movw	r30, r24
    3318:	2e 9f       	mul	r18, r30
    331a:	c0 01       	movw	r24, r0
    331c:	2f 9f       	mul	r18, r31
    331e:	90 0d       	add	r25, r0
    3320:	3e 9f       	mul	r19, r30
    3322:	90 0d       	add	r25, r0
    3324:	11 24       	eor	r1, r1
    3326:	9f 83       	std	Y+7, r25	; 0x07
    3328:	8e 83       	std	Y+6, r24	; 0x06
	timer1_init(&timer1_config);
    332a:	ce 01       	movw	r24, r28
    332c:	01 96       	adiw	r24, 0x01	; 1
    332e:	0e 94 a2 18 	call	0x3144	; 0x3144 <timer1_init>
}
    3332:	2d 96       	adiw	r28, 0x0d	; 13
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	f8 94       	cli
    3338:	de bf       	out	0x3e, r29	; 62
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	cd bf       	out	0x3d, r28	; 61
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <UART_init>:


#include "uart.h"

void UART_init(void)
{
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 - Double the USART transmission speed*/
	SET_BIT(UCSRA, U2X);
    334c:	ab e2       	ldi	r26, 0x2B	; 43
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	eb e2       	ldi	r30, 0x2B	; 43
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	82 60       	ori	r24, 0x02	; 2
    3358:	8c 93       	st	X, r24

	/* Enable The receiver and transmitter */
	UCSRB = (1 << RXEN) | (1 << TXEN);
    335a:	ea e2       	ldi	r30, 0x2A	; 42
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	88 e1       	ldi	r24, 0x18	; 24
    3360:	80 83       	st	Z, r24

	/* UCSZ0 =1 and UCSZ1 =1 UCSZ2 =0 - 8-bit (character size) in a frame */
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
    3362:	e0 e4       	ldi	r30, 0x40	; 64
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	86 e8       	ldi	r24, 0x86	; 134
    3368:	80 83       	st	Z, r24

	UBRRH= 0;
    336a:	e0 e4       	ldi	r30, 0x40	; 64
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	10 82       	st	Z, r1

	/* UBBRL=13 for 9600kb/s Baud Rate */
	UBRRL = 103;
    3370:	e9 e2       	ldi	r30, 0x29	; 41
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	87 e6       	ldi	r24, 0x67	; 103
    3376:	80 83       	st	Z, r24

}
    3378:	cf 91       	pop	r28
    337a:	df 91       	pop	r29
    337c:	08 95       	ret

0000337e <UART_sendByte>:
 *Arguments:
 *uint8 a_data: contains the byte that will be sent.
 *
 *******************************************************************************/
void UART_sendByte(uint8 a_data)
{
    337e:	df 93       	push	r29
    3380:	cf 93       	push	r28
    3382:	0f 92       	push	r0
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA, UDRE)){}
    338a:	eb e2       	ldi	r30, 0x2B	; 43
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	88 2f       	mov	r24, r24
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	80 72       	andi	r24, 0x20	; 32
    3396:	90 70       	andi	r25, 0x00	; 0
    3398:	00 97       	sbiw	r24, 0x00	; 0
    339a:	b9 f3       	breq	.-18     	; 0x338a <UART_sendByte+0xc>
	UDR = a_data;
    339c:	ec e2       	ldi	r30, 0x2C	; 44
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	80 83       	st	Z, r24
}
    33a4:	0f 90       	pop	r0
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <UART_receiveByte>:
 *Return type: char
 *Return : the value of UDR
 *
 *******************************************************************************/
char UART_receiveByte(void)
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC)){};
    33b4:	eb e2       	ldi	r30, 0x2B	; 43
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	88 23       	and	r24, r24
    33bc:	dc f7       	brge	.-10     	; 0x33b4 <UART_receiveByte+0x8>
	return UDR;
    33be:	ec e2       	ldi	r30, 0x2C	; 44
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
}
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <UART_sendString>:
 *Arguments: const char *a_Str
 *
 *
 *******************************************************************************/
void UART_sendString(const char *a_Str)
{
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <UART_sendString+0x6>
    33d0:	0f 92       	push	r0
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	9b 83       	std	Y+3, r25	; 0x03
    33d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33da:	19 82       	std	Y+1, r1	; 0x01
    33dc:	0e c0       	rjmp	.+28     	; 0x33fa <UART_sendString+0x30>
	while(a_Str[i] != '\0')
	{
		UART_sendByte(a_Str[i]);
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	28 2f       	mov	r18, r24
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	9b 81       	ldd	r25, Y+3	; 0x03
    33e8:	fc 01       	movw	r30, r24
    33ea:	e2 0f       	add	r30, r18
    33ec:	f3 1f       	adc	r31, r19
    33ee:	80 81       	ld	r24, Z
    33f0:	0e 94 bf 19 	call	0x337e	; 0x337e <UART_sendByte>
		i++;
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	8f 5f       	subi	r24, 0xFF	; 255
    33f8:	89 83       	std	Y+1, r24	; 0x01
 *
 *******************************************************************************/
void UART_sendString(const char *a_Str)
{
	uint8 i = 0;
	while(a_Str[i] != '\0')
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	28 2f       	mov	r18, r24
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	9b 81       	ldd	r25, Y+3	; 0x03
    3404:	fc 01       	movw	r30, r24
    3406:	e2 0f       	add	r30, r18
    3408:	f3 1f       	adc	r31, r19
    340a:	80 81       	ld	r24, Z
    340c:	88 23       	and	r24, r24
    340e:	39 f7       	brne	.-50     	; 0x33de <UART_sendString+0x14>
	{
		UART_sendByte(a_Str[i]);
		i++;
	}
}
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <UART_receiveString>:

void UART_receiveString(char *Str)
{
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	00 d0       	rcall	.+0      	; 0x3426 <UART_receiveString+0xa>
    3426:	0f 92       	push	r0
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	9b 83       	std	Y+3, r25	; 0x03
    342e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3430:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	28 2f       	mov	r18, r24
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	9b 81       	ldd	r25, Y+3	; 0x03
    343c:	8c 01       	movw	r16, r24
    343e:	02 0f       	add	r16, r18
    3440:	13 1f       	adc	r17, r19
    3442:	0e 94 d6 19 	call	0x33ac	; 0x33ac <UART_receiveByte>
    3446:	f8 01       	movw	r30, r16
    3448:	80 83       	st	Z, r24
    344a:	0f c0       	rjmp	.+30     	; 0x346a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	8f 5f       	subi	r24, 0xFF	; 255
    3450:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	28 2f       	mov	r18, r24
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	9b 81       	ldd	r25, Y+3	; 0x03
    345c:	8c 01       	movw	r16, r24
    345e:	02 0f       	add	r16, r18
    3460:	13 1f       	adc	r17, r19
    3462:	0e 94 d6 19 	call	0x33ac	; 0x33ac <UART_receiveByte>
    3466:	f8 01       	movw	r30, r16
    3468:	80 83       	st	Z, r24

void UART_receiveString(char *Str)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte();
	while(Str[i] != '#')
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	8a 81       	ldd	r24, Y+2	; 0x02
    3472:	9b 81       	ldd	r25, Y+3	; 0x03
    3474:	fc 01       	movw	r30, r24
    3476:	e2 0f       	add	r30, r18
    3478:	f3 1f       	adc	r31, r19
    347a:	80 81       	ld	r24, Z
    347c:	83 32       	cpi	r24, 0x23	; 35
    347e:	31 f7       	brne	.-52     	; 0x344c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	Str[i] = '\0';
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	28 2f       	mov	r18, r24
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	8a 81       	ldd	r24, Y+2	; 0x02
    3488:	9b 81       	ldd	r25, Y+3	; 0x03
    348a:	fc 01       	movw	r30, r24
    348c:	e2 0f       	add	r30, r18
    348e:	f3 1f       	adc	r31, r19
    3490:	10 82       	st	Z, r1
}
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	cf 91       	pop	r28
    349a:	df 91       	pop	r29
    349c:	1f 91       	pop	r17
    349e:	0f 91       	pop	r16
    34a0:	08 95       	ret

000034a2 <__prologue_saves__>:
    34a2:	2f 92       	push	r2
    34a4:	3f 92       	push	r3
    34a6:	4f 92       	push	r4
    34a8:	5f 92       	push	r5
    34aa:	6f 92       	push	r6
    34ac:	7f 92       	push	r7
    34ae:	8f 92       	push	r8
    34b0:	9f 92       	push	r9
    34b2:	af 92       	push	r10
    34b4:	bf 92       	push	r11
    34b6:	cf 92       	push	r12
    34b8:	df 92       	push	r13
    34ba:	ef 92       	push	r14
    34bc:	ff 92       	push	r15
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	ca 1b       	sub	r28, r26
    34cc:	db 0b       	sbc	r29, r27
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	09 94       	ijmp

000034da <__epilogue_restores__>:
    34da:	2a 88       	ldd	r2, Y+18	; 0x12
    34dc:	39 88       	ldd	r3, Y+17	; 0x11
    34de:	48 88       	ldd	r4, Y+16	; 0x10
    34e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    34e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    34e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    34e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    34e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    34ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    34ec:	b9 84       	ldd	r11, Y+9	; 0x09
    34ee:	c8 84       	ldd	r12, Y+8	; 0x08
    34f0:	df 80       	ldd	r13, Y+7	; 0x07
    34f2:	ee 80       	ldd	r14, Y+6	; 0x06
    34f4:	fd 80       	ldd	r15, Y+5	; 0x05
    34f6:	0c 81       	ldd	r16, Y+4	; 0x04
    34f8:	1b 81       	ldd	r17, Y+3	; 0x03
    34fa:	aa 81       	ldd	r26, Y+2	; 0x02
    34fc:	b9 81       	ldd	r27, Y+1	; 0x01
    34fe:	ce 0f       	add	r28, r30
    3500:	d1 1d       	adc	r29, r1
    3502:	0f b6       	in	r0, 0x3f	; 63
    3504:	f8 94       	cli
    3506:	de bf       	out	0x3e, r29	; 62
    3508:	0f be       	out	0x3f, r0	; 63
    350a:	cd bf       	out	0x3d, r28	; 61
    350c:	ed 01       	movw	r28, r26
    350e:	08 95       	ret

00003510 <itoa>:
    3510:	fb 01       	movw	r30, r22
    3512:	9f 01       	movw	r18, r30
    3514:	e8 94       	clt
    3516:	42 30       	cpi	r20, 0x02	; 2
    3518:	c4 f0       	brlt	.+48     	; 0x354a <itoa+0x3a>
    351a:	45 32       	cpi	r20, 0x25	; 37
    351c:	b4 f4       	brge	.+44     	; 0x354a <itoa+0x3a>
    351e:	4a 30       	cpi	r20, 0x0A	; 10
    3520:	29 f4       	brne	.+10     	; 0x352c <itoa+0x1c>
    3522:	97 fb       	bst	r25, 7
    3524:	1e f4       	brtc	.+6      	; 0x352c <itoa+0x1c>
    3526:	90 95       	com	r25
    3528:	81 95       	neg	r24
    352a:	9f 4f       	sbci	r25, 0xFF	; 255
    352c:	64 2f       	mov	r22, r20
    352e:	77 27       	eor	r23, r23
    3530:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__udivmodhi4>
    3534:	80 5d       	subi	r24, 0xD0	; 208
    3536:	8a 33       	cpi	r24, 0x3A	; 58
    3538:	0c f0       	brlt	.+2      	; 0x353c <itoa+0x2c>
    353a:	89 5d       	subi	r24, 0xD9	; 217
    353c:	81 93       	st	Z+, r24
    353e:	cb 01       	movw	r24, r22
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	a1 f7       	brne	.-24     	; 0x352c <itoa+0x1c>
    3544:	16 f4       	brtc	.+4      	; 0x354a <itoa+0x3a>
    3546:	5d e2       	ldi	r21, 0x2D	; 45
    3548:	51 93       	st	Z+, r21
    354a:	10 82       	st	Z, r1
    354c:	c9 01       	movw	r24, r18
    354e:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <strrev>

00003552 <strrev>:
    3552:	dc 01       	movw	r26, r24
    3554:	fc 01       	movw	r30, r24
    3556:	67 2f       	mov	r22, r23
    3558:	71 91       	ld	r23, Z+
    355a:	77 23       	and	r23, r23
    355c:	e1 f7       	brne	.-8      	; 0x3556 <strrev+0x4>
    355e:	32 97       	sbiw	r30, 0x02	; 2
    3560:	04 c0       	rjmp	.+8      	; 0x356a <strrev+0x18>
    3562:	7c 91       	ld	r23, X
    3564:	6d 93       	st	X+, r22
    3566:	70 83       	st	Z, r23
    3568:	62 91       	ld	r22, -Z
    356a:	ae 17       	cp	r26, r30
    356c:	bf 07       	cpc	r27, r31
    356e:	c8 f3       	brcs	.-14     	; 0x3562 <strrev+0x10>
    3570:	08 95       	ret

00003572 <__udivmodhi4>:
    3572:	aa 1b       	sub	r26, r26
    3574:	bb 1b       	sub	r27, r27
    3576:	51 e1       	ldi	r21, 0x11	; 17
    3578:	07 c0       	rjmp	.+14     	; 0x3588 <__udivmodhi4_ep>

0000357a <__udivmodhi4_loop>:
    357a:	aa 1f       	adc	r26, r26
    357c:	bb 1f       	adc	r27, r27
    357e:	a6 17       	cp	r26, r22
    3580:	b7 07       	cpc	r27, r23
    3582:	10 f0       	brcs	.+4      	; 0x3588 <__udivmodhi4_ep>
    3584:	a6 1b       	sub	r26, r22
    3586:	b7 0b       	sbc	r27, r23

00003588 <__udivmodhi4_ep>:
    3588:	88 1f       	adc	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	5a 95       	dec	r21
    358e:	a9 f7       	brne	.-22     	; 0x357a <__udivmodhi4_loop>
    3590:	80 95       	com	r24
    3592:	90 95       	com	r25
    3594:	bc 01       	movw	r22, r24
    3596:	cd 01       	movw	r24, r26
    3598:	08 95       	ret

0000359a <_exit>:
    359a:	f8 94       	cli

0000359c <__stop_program>:
    359c:	ff cf       	rjmp	.-2      	; 0x359c <__stop_program>
